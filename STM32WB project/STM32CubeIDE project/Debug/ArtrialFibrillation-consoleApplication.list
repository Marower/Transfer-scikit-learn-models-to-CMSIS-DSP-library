
ArtrialFibrillation-consoleApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010814  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000594c  08010958  08010958  00020958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080162a4  080162a4  000262a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080162a8  080162a8  000262a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000048b8  20000004  080162ac  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002c58  200048bc  0801ab64  000348bc  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20007514  0801ab64  00037514  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000348bc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f4b2  00000000  00000000  000348ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000047f1  00000000  00000000  00053d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001f60  00000000  00000000  00058590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001d50  00000000  00000000  0005a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00027a7f  00000000  00000000  0005c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000222f4  00000000  00000000  00083cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e3a55  00000000  00000000  000a5fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00189a08  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009a70  00000000  00000000  00189a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200048bc 	.word	0x200048bc
 800015c:	00000000 	.word	0x00000000
 8000160:	0801093c 	.word	0x0801093c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200048c0 	.word	0x200048c0
 800017c:	0801093c 	.word	0x0801093c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <initARMSVMLinearClasificator>:
#include "SVMParameters_linear.h"

arm_svm_linear_instance_f32 linearSVM;

void initARMSVMLinearClasificator ()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af02      	add	r7, sp, #8
	  arm_svm_linear_init_f32(&linearSVM, //Parameters for the SVM function
 8000caa:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000ccc <initARMSVMLinearClasificator+0x28>
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <initARMSVMLinearClasificator+0x2c>)
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <initARMSVMLinearClasificator+0x30>)
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <initARMSVMLinearClasificator+0x34>)
 8000cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	21c4      	movs	r1, #196	; 0xc4
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <initARMSVMLinearClasificator+0x38>)
 8000cc2:	f009 fd8d 	bl	800a7e0 <arm_svm_linear_init_f32>
			  linearDualCoefficients,	//Array of dual coefficients
			  linearSupportVectors,	//Array of support vectors
			  linearClasses	//Array of 2 classes ID
	  );

}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	beef707a 	.word	0xbeef707a
 8000cd0:	08010af0 	.word	0x08010af0
 8000cd4:	08010e08 	.word	0x08010e08
 8000cd8:	08010af8 	.word	0x08010af8
 8000cdc:	200048d8 	.word	0x200048d8

08000ce0 <predictSVMLinear>:

uint32_t predictSVMLinear (float32_t innputVector[])
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	  int32_t result;
	  arm_svm_linear_predict_f32(&linearSVM, innputVector, &result);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	461a      	mov	r2, r3
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <predictSVMLinear+0x20>)
 8000cf2:	f009 fd96 	bl	800a822 <arm_svm_linear_predict_f32>
	  return result;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200048d8 	.word	0x200048d8

08000d04 <initARMSVMPolynomialClasificator>:
#include "SVMParameters_poly.h"

arm_svm_polynomial_instance_f32 polySVM;

void initARMSVMPolynomialClasificator ()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af04      	add	r7, sp, #16
	 /*
	    Initialization of the SVM instance parameters.
	    Additional parameters (intercept, degree, coef0 and gamma) are also coming from Python.
	   */
	  arm_svm_polynomial_init_f32(&polySVM,
 8000d0a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d4c <initARMSVMPolynomialClasificator+0x48>
 8000d0e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8000d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d16:	ee17 3a90 	vmov	r3, s15
 8000d1a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000d50 <initARMSVMPolynomialClasificator+0x4c>
 8000d1e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000d54 <initARMSVMPolynomialClasificator+0x50>
 8000d22:	9302      	str	r3, [sp, #8]
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <initARMSVMPolynomialClasificator+0x54>)
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <initARMSVMPolynomialClasificator+0x58>)
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	eeb0 1a66 	vmov.f32	s2, s13
 8000d30:	eef0 0a67 	vmov.f32	s1, s15
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <initARMSVMPolynomialClasificator+0x5c>)
 8000d36:	eeb0 0a47 	vmov.f32	s0, s14
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	2197      	movs	r1, #151	; 0x97
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <initARMSVMPolynomialClasificator+0x60>)
 8000d40:	f009 fdd5 	bl	800a8ee <arm_svm_polynomial_init_f32>
		polyDegree,                 /* degree */
		polyCoef0,         /* Coef0 */
		polyGamma          /* Gamma */
	  );

}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	3f08f030 	.word	0x3f08f030
 8000d50:	00000000 	.word	0x00000000
 8000d54:	3ec4af71 	.word	0x3ec4af71
 8000d58:	08012378 	.word	0x08012378
 8000d5c:	080125dc 	.word	0x080125dc
 8000d60:	08012380 	.word	0x08012380
 8000d64:	200048f0 	.word	0x200048f0

08000d68 <predictSVMPolynomial>:

uint32_t predictSVMPolynomial (float32_t innputVector[])
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	  int32_t result;
	  arm_svm_polynomial_predict_f32(&polySVM, innputVector, &result);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	461a      	mov	r2, r3
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <predictSVMPolynomial+0x20>)
 8000d7a:	f009 fde6 	bl	800a94a <arm_svm_polynomial_predict_f32>
	  return result;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200048f0 	.word	0x200048f0

08000d8c <initARMSVMSigmoidClasificator>:
#include "SVMParameters_sigmoid.h"

arm_svm_sigmoid_instance_f32 sigmoidSVM;

void initARMSVMSigmoidClasificator ()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8
	 /*
	    Initialization of the SVM instance parameters.
	    Additional parameters (intercept, degree, coef0 and gamma) are also coming from Python.
	   */
	  arm_svm_sigmoid_init_f32(&sigmoidSVM,
 8000d92:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000dc4 <initARMSVMSigmoidClasificator+0x38>
 8000d96:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000dc8 <initARMSVMSigmoidClasificator+0x3c>
 8000d9a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000dcc <initARMSVMSigmoidClasificator+0x40>
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <initARMSVMSigmoidClasificator+0x44>)
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <initARMSVMSigmoidClasificator+0x48>)
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	eeb0 1a66 	vmov.f32	s2, s13
 8000daa:	eef0 0a47 	vmov.f32	s1, s14
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <initARMSVMSigmoidClasificator+0x4c>)
 8000db0:	eeb0 0a67 	vmov.f32	s0, s15
 8000db4:	2207      	movs	r2, #7
 8000db6:	21e4      	movs	r1, #228	; 0xe4
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <initARMSVMSigmoidClasificator+0x50>)
 8000dba:	f009 feea 	bl	800ab92 <arm_svm_sigmoid_init_f32>
		sigmoidClasses,
		sigmoidCoef0,         /* Coef0 */
		sigmoidGamma          /* Gamma */
	  );

}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	c170b6e9 	.word	0xc170b6e9
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	3ec4af71 	.word	0x3ec4af71
 8000dd0:	08013660 	.word	0x08013660
 8000dd4:	080139f8 	.word	0x080139f8
 8000dd8:	08013668 	.word	0x08013668
 8000ddc:	20004914 	.word	0x20004914

08000de0 <predictSVMSigmoid>:

uint32_t predictSVMSigmoid (float32_t innputVector[])
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	  int32_t result;
	  arm_svm_sigmoid_predict_f32(&sigmoidSVM, innputVector, &result);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	461a      	mov	r2, r3
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <predictSVMSigmoid+0x20>)
 8000df2:	f009 fef9 	bl	800abe8 <arm_svm_sigmoid_predict_f32>
	  return result;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20004914 	.word	0x20004914

08000e04 <initARMSVMrbfClasificator>:


arm_svm_rbf_instance_f32 rbfSVM;

void initARMSVMrbfClasificator ()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af02      	add	r7, sp, #8
	arm_svm_rbf_init_f32(&rbfSVM, //Parameters for the SVM function
 8000e0a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000e34 <initARMSVMrbfClasificator+0x30>
 8000e0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000e38 <initARMSVMrbfClasificator+0x34>
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <initARMSVMrbfClasificator+0x38>)
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <initARMSVMrbfClasificator+0x3c>)
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	eef0 0a47 	vmov.f32	s1, s14
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <initARMSVMrbfClasificator+0x40>)
 8000e20:	eeb0 0a67 	vmov.f32	s0, s15
 8000e24:	2207      	movs	r2, #7
 8000e26:	2150      	movs	r1, #80	; 0x50
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <initARMSVMrbfClasificator+0x44>)
 8000e2a:	f009 fe09 	bl	800aa40 <arm_svm_rbf_init_f32>
				  rbfSupportVectors,	//Array of support vectors
				  rbfClasses,	//Array of 2 classes ID
				  rbfGamma	//gamma (scikit-learn terminology)
		  );

}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	c131890b 	.word	0xc131890b
 8000e38:	3ec4af71 	.word	0x3ec4af71
 8000e3c:	080152e8 	.word	0x080152e8
 8000e40:	08015430 	.word	0x08015430
 8000e44:	080152f0 	.word	0x080152f0
 8000e48:	20004934 	.word	0x20004934

08000e4c <predictSVMrbf>:

uint32_t predictSVMrbf (float32_t innputVector[])
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	  int32_t result;
	  arm_svm_rbf_predict_f32(&rbfSVM, innputVector, &result);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <predictSVMrbf+0x20>)
 8000e5e:	f009 fe15 	bl	800aa8c <arm_svm_rbf_predict_f32>
	  return result;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20004934 	.word	0x20004934

08000e70 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e94:	68fb      	ldr	r3, [r7, #12]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <sendUSBData>:

uint8_t USBBuffer[2048];
uint16_t USBBuffer_index = 0;

void sendUSBData (uint8_t* Buf, uint16_t Len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <sendUSBData+0x38>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <sendUSBData+0x3c>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00a fcf4 	bl	800b8ac <memcpy>
	USBBuffer_index += Len;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <sendUSBData+0x38>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b03      	ldr	r3, [pc, #12]	; (8000edc <sendUSBData+0x38>)
 8000ed0:	801a      	strh	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200052e4 	.word	0x200052e4
 8000ee0:	20004ae4 	.word	0x20004ae4

08000ee4 <findStrEnd>:

uint16_t findStrEnd ()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
	uint16_t end = 10;
 8000eea:	230a      	movs	r3, #10
 8000eec:	80fb      	strh	r3, [r7, #6]
	while (str[end]!='\0')
 8000eee:	e005      	b.n	8000efc <findStrEnd+0x18>
	{
		end++;
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	80fb      	strh	r3, [r7, #6]
		if (end == 250)
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	2bfa      	cmp	r3, #250	; 0xfa
 8000efa:	d005      	beq.n	8000f08 <findStrEnd+0x24>
	while (str[end]!='\0')
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <findStrEnd+0x34>)
 8000f00:	5cd3      	ldrb	r3, [r2, r3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f4      	bne.n	8000ef0 <findStrEnd+0xc>
 8000f06:	e000      	b.n	8000f0a <findStrEnd+0x26>
		{
			break;
 8000f08:	bf00      	nop
		}
	}
	return end;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	200049e8 	.word	0x200049e8

08000f1c <sendPrediction>:

void sendPrediction (float32_t innputVector[])
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint32_t prediction = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
	prediction = predictClassNaiveBayes(innputVector);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fc75 	bl	8001818 <predictClassNaiveBayes>
 8000f2e:	60f8      	str	r0, [r7, #12]
	sprintf(str,"Naive Bayes: %d\r\n", prediction);
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4927      	ldr	r1, [pc, #156]	; (8000fd0 <sendPrediction+0xb4>)
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <sendPrediction+0xb8>)
 8000f36:	f00b fb4f 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8000f3a:	f7ff ffd3 	bl	8000ee4 <findStrEnd>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4824      	ldr	r0, [pc, #144]	; (8000fd4 <sendPrediction+0xb8>)
 8000f44:	f7ff ffae 	bl	8000ea4 <sendUSBData>

	prediction = predictSVMLinear (innputVector);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fec9 	bl	8000ce0 <predictSVMLinear>
 8000f4e:	60f8      	str	r0, [r7, #12]
	sprintf(str,"SVM Linear: %d\r\n", prediction);
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4921      	ldr	r1, [pc, #132]	; (8000fd8 <sendPrediction+0xbc>)
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <sendPrediction+0xb8>)
 8000f56:	f00b fb3f 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8000f5a:	f7ff ffc3 	bl	8000ee4 <findStrEnd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <sendPrediction+0xb8>)
 8000f64:	f7ff ff9e 	bl	8000ea4 <sendUSBData>

	prediction = predictSVMPolynomial (innputVector);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fefd 	bl	8000d68 <predictSVMPolynomial>
 8000f6e:	60f8      	str	r0, [r7, #12]
	sprintf(str,"SVM Polynomial: %d\r\n", prediction);
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	491a      	ldr	r1, [pc, #104]	; (8000fdc <sendPrediction+0xc0>)
 8000f74:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <sendPrediction+0xb8>)
 8000f76:	f00b fb2f 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8000f7a:	f7ff ffb3 	bl	8000ee4 <findStrEnd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <sendPrediction+0xb8>)
 8000f84:	f7ff ff8e 	bl	8000ea4 <sendUSBData>

	prediction = predictSVMrbf (innputVector);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff5f 	bl	8000e4c <predictSVMrbf>
 8000f8e:	60f8      	str	r0, [r7, #12]
	sprintf(str,"SVM RBF: %d\r\n", prediction);
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <sendPrediction+0xc4>)
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <sendPrediction+0xb8>)
 8000f96:	f00b fb1f 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8000f9a:	f7ff ffa3 	bl	8000ee4 <findStrEnd>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <sendPrediction+0xb8>)
 8000fa4:	f7ff ff7e 	bl	8000ea4 <sendUSBData>

	prediction = predictSVMSigmoid (innputVector);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff19 	bl	8000de0 <predictSVMSigmoid>
 8000fae:	60f8      	str	r0, [r7, #12]
	sprintf(str,"SVM Sigmoid: %d\r\n", prediction);
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <sendPrediction+0xc8>)
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <sendPrediction+0xb8>)
 8000fb6:	f00b fb0f 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8000fba:	f7ff ff93 	bl	8000ee4 <findStrEnd>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <sendPrediction+0xb8>)
 8000fc4:	f7ff ff6e 	bl	8000ea4 <sendUSBData>
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08010958 	.word	0x08010958
 8000fd4:	200049e8 	.word	0x200049e8
 8000fd8:	0801096c 	.word	0x0801096c
 8000fdc:	08010980 	.word	0x08010980
 8000fe0:	08010998 	.word	0x08010998
 8000fe4:	080109a8 	.word	0x080109a8

08000fe8 <goThroughDataset>:

void goThroughDataset ()
{
 8000fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fec:	b09c      	sub	sp, #112	; 0x70
 8000fee:	af0e      	add	r7, sp, #56	; 0x38
	 float32_t input[7];
	 for (uint32_t i = 0; i < leanghtOfFeaturesArray; i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ff4:	e05e      	b.n	80010b4 <goThroughDataset+0xcc>
	 {
		 memcpy(&input[0],&featuresArray[i],7*4);
 8000ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <goThroughDataset+0xe4>)
 8001002:	1899      	adds	r1, r3, r2
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	221c      	movs	r2, #28
 800100a:	4618      	mov	r0, r3
 800100c:	f00a fc4e 	bl	800b8ac <memcpy>

		 sprintf(str,"%d %.3f %.3f %.3f %.3f %.3f %.3f %.3f\r\n", i, input[0], input[1], input[2], input[3], input[4], input[5], input[6]);
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa70 	bl	80004f8 <__aeabi_f2d>
 8001018:	4680      	mov	r8, r0
 800101a:	4689      	mov	r9, r1
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa6a 	bl	80004f8 <__aeabi_f2d>
 8001024:	4682      	mov	sl, r0
 8001026:	468b      	mov	fp, r1
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa64 	bl	80004f8 <__aeabi_f2d>
 8001030:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa5e 	bl	80004f8 <__aeabi_f2d>
 800103c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa58 	bl	80004f8 <__aeabi_f2d>
 8001048:	e9c7 0100 	strd	r0, r1, [r7]
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa52 	bl	80004f8 <__aeabi_f2d>
 8001054:	4604      	mov	r4, r0
 8001056:	460d      	mov	r5, r1
 8001058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa4c 	bl	80004f8 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001068:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800106c:	ed97 7b00 	vldr	d7, [r7]
 8001070:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001074:	ed97 7b02 	vldr	d7, [r7, #8]
 8001078:	ed8d 7b06 	vstr	d7, [sp, #24]
 800107c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001080:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001084:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001088:	e9cd 8900 	strd	r8, r9, [sp]
 800108c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800108e:	4910      	ldr	r1, [pc, #64]	; (80010d0 <goThroughDataset+0xe8>)
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <goThroughDataset+0xec>)
 8001092:	f00b faa1 	bl	800c5d8 <siprintf>
		 sendUSBData (str, findStrEnd());
 8001096:	f7ff ff25 	bl	8000ee4 <findStrEnd>
 800109a:	4603      	mov	r3, r0
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <goThroughDataset+0xec>)
 80010a0:	f7ff ff00 	bl	8000ea4 <sendUSBData>


		 sendPrediction(input);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff37 	bl	8000f1c <sendPrediction>
	 for (uint32_t i = 0; i < leanghtOfFeaturesArray; i++)
 80010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b0:	3301      	adds	r3, #1
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
 80010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b6:	f240 227e 	movw	r2, #638	; 0x27e
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d99b      	bls.n	8000ff6 <goThroughDataset+0xe>
	 }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3738      	adds	r7, #56	; 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010ca:	bf00      	nop
 80010cc:	20000004 	.word	0x20000004
 80010d0:	080109bc 	.word	0x080109bc
 80010d4:	200049e8 	.word	0x200049e8

080010d8 <testTimeOfComputation>:

void testTimeOfComputation()
{   float32_t input[7];
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
	uint32_t computationTime;
	uint16_t count = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t N = 100;
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	847b      	strh	r3, [r7, #34]	; 0x22
	TIM2->CNT = 0;
 80010e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint16_t i = 0; i < 10; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010f2:	e01c      	b.n	800112e <testTimeOfComputation+0x56>
	{
		count = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		do
		{
			memcpy(&input[0],&featuresArray[count],7*4);
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4a84      	ldr	r2, [pc, #528]	; (8001314 <testTimeOfComputation+0x23c>)
 8001104:	1899      	adds	r1, r3, r2
 8001106:	463b      	mov	r3, r7
 8001108:	221c      	movs	r2, #28
 800110a:	4618      	mov	r0, r3
 800110c:	f00a fbce 	bl	800b8ac <memcpy>
			count++;
 8001110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001112:	3301      	adds	r3, #1
 8001114:	85fb      	strh	r3, [r7, #46]	; 0x2e
			predictClassNaiveBayes(input);
 8001116:	463b      	mov	r3, r7
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fb7d 	bl	8001818 <predictClassNaiveBayes>
		}while (count < leanghtOfFeaturesArray);
 800111e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001120:	f240 227e 	movw	r2, #638	; 0x27e
 8001124:	4293      	cmp	r3, r2
 8001126:	d9e7      	bls.n	80010f8 <testTimeOfComputation+0x20>
	for (uint16_t i = 0; i < 10; i++)
 8001128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800112a:	3301      	adds	r3, #1
 800112c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800112e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001130:	2b09      	cmp	r3, #9
 8001132:	d9df      	bls.n	80010f4 <testTimeOfComputation+0x1c>
	}
	computationTime = TIM2->CNT;
 8001134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	61fb      	str	r3, [r7, #28]

	sprintf(str,"NaiveBayes: %u ticks\r\n", computationTime);
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	4976      	ldr	r1, [pc, #472]	; (8001318 <testTimeOfComputation+0x240>)
 8001140:	4876      	ldr	r0, [pc, #472]	; (800131c <testTimeOfComputation+0x244>)
 8001142:	f00b fa49 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8001146:	f7ff fecd 	bl	8000ee4 <findStrEnd>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	4873      	ldr	r0, [pc, #460]	; (800131c <testTimeOfComputation+0x244>)
 8001150:	f7ff fea8 	bl	8000ea4 <sendUSBData>

	TIM2->CNT = 0;
 8001154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint16_t i = 0; i < 10; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001160:	e01c      	b.n	800119c <testTimeOfComputation+0xc4>
	{
		count = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	85fb      	strh	r3, [r7, #46]	; 0x2e
		do
		{
			memcpy(&input[0],&featuresArray[count],7*4);
 8001166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4a68      	ldr	r2, [pc, #416]	; (8001314 <testTimeOfComputation+0x23c>)
 8001172:	1899      	adds	r1, r3, r2
 8001174:	463b      	mov	r3, r7
 8001176:	221c      	movs	r2, #28
 8001178:	4618      	mov	r0, r3
 800117a:	f00a fb97 	bl	800b8ac <memcpy>
			count++;
 800117e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001180:	3301      	adds	r3, #1
 8001182:	85fb      	strh	r3, [r7, #46]	; 0x2e
			predictSVMLinear(input);
 8001184:	463b      	mov	r3, r7
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdaa 	bl	8000ce0 <predictSVMLinear>
		}while (count < leanghtOfFeaturesArray);
 800118c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800118e:	f240 227e 	movw	r2, #638	; 0x27e
 8001192:	4293      	cmp	r3, r2
 8001194:	d9e7      	bls.n	8001166 <testTimeOfComputation+0x8e>
	for (uint16_t i = 0; i < 10; i++)
 8001196:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001198:	3301      	adds	r3, #1
 800119a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800119c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800119e:	2b09      	cmp	r3, #9
 80011a0:	d9df      	bls.n	8001162 <testTimeOfComputation+0x8a>
	}
	computationTime = TIM2->CNT;
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	61fb      	str	r3, [r7, #28]

	sprintf(str,"SVM linear: %u ticks\r\n", computationTime);
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	495c      	ldr	r1, [pc, #368]	; (8001320 <testTimeOfComputation+0x248>)
 80011ae:	485b      	ldr	r0, [pc, #364]	; (800131c <testTimeOfComputation+0x244>)
 80011b0:	f00b fa12 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 80011b4:	f7ff fe96 	bl	8000ee4 <findStrEnd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4857      	ldr	r0, [pc, #348]	; (800131c <testTimeOfComputation+0x244>)
 80011be:	f7ff fe71 	bl	8000ea4 <sendUSBData>

	TIM2->CNT = 0;
 80011c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint16_t i = 0; i < 10; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	853b      	strh	r3, [r7, #40]	; 0x28
 80011ce:	e01c      	b.n	800120a <testTimeOfComputation+0x132>
	{
		count = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		do
		{
			memcpy(&input[0],&featuresArray[count],7*4);
 80011d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <testTimeOfComputation+0x23c>)
 80011e0:	1899      	adds	r1, r3, r2
 80011e2:	463b      	mov	r3, r7
 80011e4:	221c      	movs	r2, #28
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00a fb60 	bl	800b8ac <memcpy>
			count++;
 80011ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011ee:	3301      	adds	r3, #1
 80011f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
			predictSVMPolynomial(input);
 80011f2:	463b      	mov	r3, r7
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdb7 	bl	8000d68 <predictSVMPolynomial>
		}while (count < leanghtOfFeaturesArray);
 80011fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011fc:	f240 227e 	movw	r2, #638	; 0x27e
 8001200:	4293      	cmp	r3, r2
 8001202:	d9e7      	bls.n	80011d4 <testTimeOfComputation+0xfc>
	for (uint16_t i = 0; i < 10; i++)
 8001204:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001206:	3301      	adds	r3, #1
 8001208:	853b      	strh	r3, [r7, #40]	; 0x28
 800120a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800120c:	2b09      	cmp	r3, #9
 800120e:	d9df      	bls.n	80011d0 <testTimeOfComputation+0xf8>
	}
	computationTime = TIM2->CNT;
 8001210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	61fb      	str	r3, [r7, #28]

	sprintf(str,"SVM polynomial: %u ticks\r\n", computationTime);
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4942      	ldr	r1, [pc, #264]	; (8001324 <testTimeOfComputation+0x24c>)
 800121c:	483f      	ldr	r0, [pc, #252]	; (800131c <testTimeOfComputation+0x244>)
 800121e:	f00b f9db 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8001222:	f7ff fe5f 	bl	8000ee4 <findStrEnd>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	483c      	ldr	r0, [pc, #240]	; (800131c <testTimeOfComputation+0x244>)
 800122c:	f7ff fe3a 	bl	8000ea4 <sendUSBData>

	TIM2->CNT = 0;
 8001230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint16_t i = 0; i < 10; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800123c:	e01c      	b.n	8001278 <testTimeOfComputation+0x1a0>
	{
		count = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	85fb      	strh	r3, [r7, #46]	; 0x2e
		do
		{
			memcpy(&input[0],&featuresArray[count],7*4);
 8001242:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4a31      	ldr	r2, [pc, #196]	; (8001314 <testTimeOfComputation+0x23c>)
 800124e:	1899      	adds	r1, r3, r2
 8001250:	463b      	mov	r3, r7
 8001252:	221c      	movs	r2, #28
 8001254:	4618      	mov	r0, r3
 8001256:	f00a fb29 	bl	800b8ac <memcpy>
			count++;
 800125a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800125c:	3301      	adds	r3, #1
 800125e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			predictSVMrbf(input);
 8001260:	463b      	mov	r3, r7
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fdf2 	bl	8000e4c <predictSVMrbf>
		}while (count < leanghtOfFeaturesArray);
 8001268:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800126a:	f240 227e 	movw	r2, #638	; 0x27e
 800126e:	4293      	cmp	r3, r2
 8001270:	d9e7      	bls.n	8001242 <testTimeOfComputation+0x16a>
	for (uint16_t i = 0; i < 10; i++)
 8001272:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001274:	3301      	adds	r3, #1
 8001276:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127a:	2b09      	cmp	r3, #9
 800127c:	d9df      	bls.n	800123e <testTimeOfComputation+0x166>
	}
	computationTime = TIM2->CNT;
 800127e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	61fb      	str	r3, [r7, #28]

	sprintf(str,"SVM rbf: %u ticks\r\n", computationTime);
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	4927      	ldr	r1, [pc, #156]	; (8001328 <testTimeOfComputation+0x250>)
 800128a:	4824      	ldr	r0, [pc, #144]	; (800131c <testTimeOfComputation+0x244>)
 800128c:	f00b f9a4 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 8001290:	f7ff fe28 	bl	8000ee4 <findStrEnd>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <testTimeOfComputation+0x244>)
 800129a:	f7ff fe03 	bl	8000ea4 <sendUSBData>

	TIM2->CNT = 0;
 800129e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint16_t i = 0; i < 10; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80012aa:	e01c      	b.n	80012e6 <testTimeOfComputation+0x20e>
	{
		count = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		do
		{
			memcpy(&input[0],&featuresArray[count],7*4);
 80012b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <testTimeOfComputation+0x23c>)
 80012bc:	1899      	adds	r1, r3, r2
 80012be:	463b      	mov	r3, r7
 80012c0:	221c      	movs	r2, #28
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a faf2 	bl	800b8ac <memcpy>
			count++;
 80012c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012ca:	3301      	adds	r3, #1
 80012cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
			predictSVMSigmoid(input);
 80012ce:	463b      	mov	r3, r7
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fd85 	bl	8000de0 <predictSVMSigmoid>
		}while (count < leanghtOfFeaturesArray);
 80012d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012d8:	f240 227e 	movw	r2, #638	; 0x27e
 80012dc:	4293      	cmp	r3, r2
 80012de:	d9e7      	bls.n	80012b0 <testTimeOfComputation+0x1d8>
	for (uint16_t i = 0; i < 10; i++)
 80012e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e2:	3301      	adds	r3, #1
 80012e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80012e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d9df      	bls.n	80012ac <testTimeOfComputation+0x1d4>
	}
	computationTime = TIM2->CNT;
 80012ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	61fb      	str	r3, [r7, #28]

	sprintf(str,"SVM sigmoid: %u ticks\r\n", computationTime);
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <testTimeOfComputation+0x254>)
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <testTimeOfComputation+0x244>)
 80012fa:	f00b f96d 	bl	800c5d8 <siprintf>
	sendUSBData (str, findStrEnd());
 80012fe:	f7ff fdf1 	bl	8000ee4 <findStrEnd>
 8001302:	4603      	mov	r3, r0
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <testTimeOfComputation+0x244>)
 8001308:	f7ff fdcc 	bl	8000ea4 <sendUSBData>
}
 800130c:	bf00      	nop
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000004 	.word	0x20000004
 8001318:	080109e4 	.word	0x080109e4
 800131c:	200049e8 	.word	0x200049e8
 8001320:	080109fc 	.word	0x080109fc
 8001324:	08010a14 	.word	0x08010a14
 8001328:	08010a30 	.word	0x08010a30
 800132c:	08010a44 	.word	0x08010a44

08001330 <parseLine>:

void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 8001330:	b580      	push	{r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	if (Len < 7)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b06      	cmp	r3, #6
 800133e:	d813      	bhi.n	8001368 <parseLine+0x38>
	{
		switch (Buf[0])
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b41      	cmp	r3, #65	; 0x41
 8001346:	d002      	beq.n	800134e <parseLine+0x1e>
 8001348:	2b42      	cmp	r3, #66	; 0x42
 800134a:	d003      	beq.n	8001354 <parseLine+0x24>
 800134c:	e005      	b.n	800135a <parseLine+0x2a>
		{
			case 'A':
				goThroughDataset ();
 800134e:	f7ff fe4b 	bl	8000fe8 <goThroughDataset>
				break;
 8001352:	e072      	b.n	800143a <parseLine+0x10a>
			case 'B':
				testTimeOfComputation();
 8001354:	f7ff fec0 	bl	80010d8 <testTimeOfComputation>
				break;
 8001358:	e06f      	b.n	800143a <parseLine+0x10a>
			default:
				sendUSBData (Buf, Len);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fd9f 	bl	8000ea4 <sendUSBData>
			sendUSBData (str,findStrEnd());
		}
	}


}
 8001366:	e068      	b.n	800143a <parseLine+0x10a>
		uint32_t i = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t index = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
		uint32_t count = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t inCount = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
			if((inCount)==VECTOR_DIMENSION)
 8001378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137a:	2b07      	cmp	r3, #7
 800137c:	d047      	beq.n	800140e <parseLine+0xde>
			if (Buf[i]==',' || Buf[i]=='\n')
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2c      	cmp	r3, #44	; 0x2c
 8001388:	d005      	beq.n	8001396 <parseLine+0x66>
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d130      	bne.n	80013f8 <parseLine+0xc8>
				if (count>19)
 8001396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001398:	2b13      	cmp	r3, #19
 800139a:	d901      	bls.n	80013a0 <parseLine+0x70>
					count = 19;
 800139c:	2313      	movs	r3, #19
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
				memcpy(&word[0],&Buf[index],count);
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a4:	18d1      	adds	r1, r2, r3
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00a fa7d 	bl	800b8ac <memcpy>
				word[count+1] = '\0';
 80013b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b4:	3301      	adds	r3, #1
 80013b6:	3348      	adds	r3, #72	; 0x48
 80013b8:	443b      	add	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	f803 2c40 	strb.w	r2, [r3, #-64]
				in[inCount] = (float)atof(word);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00a fa43 	bl	800b850 <atof>
 80013ca:	ec53 2b10 	vmov	r2, r3, d0
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbe1 	bl	8000b98 <__aeabi_d2f>
 80013d6:	4602      	mov	r2, r0
 80013d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	3348      	adds	r3, #72	; 0x48
 80013de:	443b      	add	r3, r7
 80013e0:	3b2c      	subs	r3, #44	; 0x2c
 80013e2:	601a      	str	r2, [r3, #0]
				inCount++;
 80013e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e6:	3301      	adds	r3, #1
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
				i++;
 80013ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ec:	3301      	adds	r3, #1
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
				index = i;
 80013f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
				count = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
			i++;
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	3301      	adds	r3, #1
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
			count++;
 80013fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001400:	3301      	adds	r3, #1
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
		}while (i<Len);
 8001404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3b5      	bcc.n	8001378 <parseLine+0x48>
 800140c:	e000      	b.n	8001410 <parseLine+0xe0>
					break;
 800140e:	bf00      	nop
		if((inCount)==VECTOR_DIMENSION)
 8001410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001412:	2b07      	cmp	r3, #7
 8001414:	d105      	bne.n	8001422 <parseLine+0xf2>
			sendPrediction (in);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fd7e 	bl	8000f1c <sendPrediction>
}
 8001420:	e00b      	b.n	800143a <parseLine+0x10a>
			sprintf(str,"error, wrong input length.\r\n");
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <parseLine+0x114>)
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <parseLine+0x118>)
 8001426:	f00b f8d7 	bl	800c5d8 <siprintf>
			sendUSBData (str,findStrEnd());
 800142a:	f7ff fd5b 	bl	8000ee4 <findStrEnd>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <parseLine+0x118>)
 8001434:	f7ff fd36 	bl	8000ea4 <sendUSBData>
}
 8001438:	e7ff      	b.n	800143a <parseLine+0x10a>
 800143a:	bf00      	nop
 800143c:	3748      	adds	r7, #72	; 0x48
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08010a5c 	.word	0x08010a5c
 8001448:	200049e8 	.word	0x200049e8

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001452:	f000 fbe1 	bl	8001c18 <HAL_Init>

  /* USER CODE BEGIN Init */
	initARMGaussianNaiveBayesClasificator ();
 8001456:	f000 f9bb 	bl	80017d0 <initARMGaussianNaiveBayesClasificator>
	initARMSVMLinearClasificator ();
 800145a:	f7ff fc23 	bl	8000ca4 <initARMSVMLinearClasificator>
	initARMSVMPolynomialClasificator ();
 800145e:	f7ff fc51 	bl	8000d04 <initARMSVMPolynomialClasificator>
	initARMSVMrbfClasificator ();
 8001462:	f7ff fccf 	bl	8000e04 <initARMSVMrbfClasificator>
	initARMSVMSigmoidClasificator ();
 8001466:	f7ff fc91 	bl	8000d8c <initARMSVMSigmoidClasificator>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146a:	f000 f873 	bl	8001554 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800146e:	f000 f8dd 	bl	800162c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f000 f96f 	bl	8001754 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8001476:	f009 fc67 	bl	800ad48 <MX_USB_Device_Init>
  MX_TIM16_Init();
 800147a:	f000 f943 	bl	8001704 <MX_TIM16_Init>
  MX_TIM2_Init();
 800147e:	f000 f8f3 	bl	8001668 <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  extern uint32_t byteInBuffer;


  extern uint8_t RxBufferFS[APP_RX_DATA_SIZE];
  HAL_TIM_Base_Start_IT(&htim16);
 8001482:	482f      	ldr	r0, [pc, #188]	; (8001540 <main+0xf4>)
 8001484:	f004 fa18 	bl	80058b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001488:	482e      	ldr	r0, [pc, #184]	; (8001544 <main+0xf8>)
 800148a:	f004 fa15 	bl	80058b8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((byteInBuffer>0) && (bufferFlag == 8))
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <main+0xfc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0fb      	beq.n	800148e <main+0x42>
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <main+0x100>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d1f7      	bne.n	800148e <main+0x42>
	 	  {
	 		  uint32_t count = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
	 		  uint32_t i = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
	 		  uint32_t index = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
	 		  do
	 		  {
	 			  i++;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
	 			  count++;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
	 			  if (RxBufferFS[i]=='\n')
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <main+0x104>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b0a      	cmp	r3, #10
 80014c0:	d112      	bne.n	80014e8 <main+0x9c>
	 			  {
	 				 count++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
	 				 parseLine (&RxBufferFS[index], count);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <main+0x104>)
 80014cc:	4413      	add	r3, r2
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff2d 	bl	8001330 <parseLine>
	 				 index += count;
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	607b      	str	r3, [r7, #4]
	 				 i++;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
	 				 count = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
	 			  }
	 			  if (i >= byteInBuffer)
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <main+0xfc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d206      	bcs.n	8001500 <main+0xb4>
	 			  {
	 				  break;
	 			  }
	 		  }while (RxBufferFS[i] != '\0');
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <main+0x104>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1d5      	bne.n	80014aa <main+0x5e>
 80014fe:	e000      	b.n	8001502 <main+0xb6>
	 				  break;
 8001500:	bf00      	nop
	 		  if (byteInBuffer != index)
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <main+0xfc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	d011      	beq.n	8001530 <main+0xe4>
	 		  {
				 memcpy(&RxBufferFS[0],&RxBufferFS[index],byteInBuffer-index);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <main+0x104>)
 8001510:	1899      	adds	r1, r3, r2
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <main+0xfc>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	461a      	mov	r2, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <main+0x104>)
 800151e:	f00a f9c5 	bl	800b8ac <memcpy>
				 byteInBuffer -=index;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <main+0xfc>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <main+0xfc>)
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e002      	b.n	8001536 <main+0xea>
	 		  }
	 		  else
	 		  {
	 			 byteInBuffer = 0;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <main+0xfc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
	 		  }
	 		  bufferFlag = 0;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <main+0x100>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	  if ((byteInBuffer>0) && (bufferFlag == 8))
 800153c:	e7a7      	b.n	800148e <main+0x42>
 800153e:	bf00      	nop
 8001540:	2000499c 	.word	0x2000499c
 8001544:	20004950 	.word	0x20004950
 8001548:	20006de8 	.word	0x20006de8
 800154c:	20006dec 	.word	0x20006dec
 8001550:	200065e8 	.word	0x200065e8

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b09a      	sub	sp, #104	; 0x68
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2248      	movs	r2, #72	; 0x48
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f00a f9b0 	bl	800b8c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <SystemClock_Config+0xd4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <SystemClock_Config+0xd4>)
 8001584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <SystemClock_Config+0xd4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001596:	2326      	movs	r3, #38	; 0x26
 8001598:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015b0:	2360      	movs	r3, #96	; 0x60
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015b8:	2301      	movs	r3, #1
 80015ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80015c0:	2320      	movs	r3, #32
 80015c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fef2 	bl	80043c4 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e6:	f000 f8ed 	bl	80017c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80015ea:	236f      	movs	r3, #111	; 0x6f
 80015ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2103      	movs	r1, #3
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fa4e 	bl	8004aac <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001616:	f000 f8d5 	bl	80017c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800161a:	f003 ffdf 	bl	80055dc <HAL_RCCEx_EnableMSIPLLMode>
}
 800161e:	bf00      	nop
 8001620:	3768      	adds	r7, #104	; 0x68
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	58000400 	.word	0x58000400

0800162c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001632:	463b      	mov	r3, r7
 8001634:	2250      	movs	r2, #80	; 0x50
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f00a f945 	bl	800b8c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001642:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001648:	2310      	movs	r3, #16
 800164a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fe4e 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800165a:	f000 f8b3 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	; 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_TIM2_Init+0x98>)
 8001688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_TIM2_Init+0x98>)
 8001690:	223f      	movs	r2, #63	; 0x3f
 8001692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM2_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM2_Init+0x98>)
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_TIM2_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_TIM2_Init+0x98>)
 80016b0:	f004 f8ab 	bl	800580a <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ba:	f000 f883 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM2_Init+0x98>)
 80016cc:	f004 fa61 	bl	8005b92 <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016d6:	f000 f875 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM2_Init+0x98>)
 80016e8:	f004 fc44 	bl	8005f74 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016f2:	f000 f867 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20004950 	.word	0x20004950

08001704 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_TIM16_Init+0x48>)
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <MX_TIM16_Init+0x4c>)
 800170c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 639;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_TIM16_Init+0x48>)
 8001710:	f240 227f 	movw	r2, #639	; 0x27f
 8001714:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MX_TIM16_Init+0x48>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_TIM16_Init+0x48>)
 800171e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001722:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_TIM16_Init+0x48>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_TIM16_Init+0x48>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_TIM16_Init+0x48>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_TIM16_Init+0x48>)
 8001738:	f004 f867 	bl	800580a <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001742:	f000 f83f 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000499c 	.word	0x2000499c
 8001750:	40014400 	.word	0x40014400

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fb89 	bl	8000e70 <LL_AHB2_GRP1_EnableClock>

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d11a      	bne.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x46>
  {
	  if (USBBuffer_index> 0)
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <HAL_TIM_PeriodElapsedCallback+0x32>
	  {
		  while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 800177c:	bf00      	nop
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001786:	f009 fbbf 	bl	800af08 <CDC_Transmit_FS>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f6      	bne.n	800177e <HAL_TIM_PeriodElapsedCallback+0x1a>
		  USBBuffer_index = 0;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001792:	2200      	movs	r2, #0
 8001794:	801a      	strh	r2, [r3, #0]
	  }
	  if (bufferFlag<8)
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d805      	bhi.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x46>
	  {
		  bufferFlag++;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017a8:	701a      	strb	r2, [r3, #0]
	  }
  }
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000499c 	.word	0x2000499c
 80017b8:	200052e4 	.word	0x200052e4
 80017bc:	20004ae4 	.word	0x20004ae4
 80017c0:	20006dec 	.word	0x20006dec

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <initARMGaussianNaiveBayesClasificator>:
#include "naiveBayesParameters.h"

arm_gaussian_naive_bayes_instance_f32 bayesInstance;

void initARMGaussianNaiveBayesClasificator ()
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	bayesInstance.vectorDimension = bayesVECTOR_DIMENSION;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <initARMGaussianNaiveBayesClasificator+0x34>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	601a      	str	r2, [r3, #0]
	bayesInstance.numberOfClasses = bayesNB_OF_CLASSES;
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <initARMGaussianNaiveBayesClasificator+0x34>)
 80017dc:	2202      	movs	r2, #2
 80017de:	605a      	str	r2, [r3, #4]
	bayesInstance.theta = bayesTheta;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <initARMGaussianNaiveBayesClasificator+0x34>)
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <initARMGaussianNaiveBayesClasificator+0x38>)
 80017e4:	609a      	str	r2, [r3, #8]
	bayesInstance.sigma = bayesSigma;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <initARMGaussianNaiveBayesClasificator+0x34>)
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <initARMGaussianNaiveBayesClasificator+0x3c>)
 80017ea:	60da      	str	r2, [r3, #12]
	bayesInstance.classPriors = bayesClassPriors;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <initARMGaussianNaiveBayesClasificator+0x34>)
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <initARMGaussianNaiveBayesClasificator+0x40>)
 80017f0:	611a      	str	r2, [r3, #16]
	bayesInstance.epsilon= bayesEpsilon;
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <initARMGaussianNaiveBayesClasificator+0x44>)
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <initARMGaussianNaiveBayesClasificator+0x34>)
 80017f6:	615a      	str	r2, [r3, #20]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200052e8 	.word	0x200052e8
 8001808:	08015cf0 	.word	0x08015cf0
 800180c:	08015d28 	.word	0x08015d28
 8001810:	08015d60 	.word	0x08015d60
 8001814:	30931e29 	.word	0x30931e29

08001818 <predictClassNaiveBayes>:

uint32_t predictClassNaiveBayes (float32_t innputVector[])
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	float32_t result[bayesNB_OF_CLASSES];
	float32_t temp[bayesNB_OF_CLASSES];

	uint32_t index;

	index = arm_gaussian_naive_bayes_predict_f32(&bayesInstance, innputVector, result,temp);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	f107 0214 	add.w	r2, r7, #20
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4804      	ldr	r0, [pc, #16]	; (800183c <predictClassNaiveBayes+0x24>)
 800182c:	f008 fefe 	bl	800a62c <arm_gaussian_naive_bayes_predict_f32>
 8001830:	61f8      	str	r0, [r7, #28]

	return index;
 8001832:	69fb      	ldr	r3, [r7, #28]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200052e8 	.word	0x200052e8

08001840 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d103      	bne.n	80018ce <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	2001      	movs	r0, #1
 80018c8:	f7ff ffba 	bl	8001840 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80018cc:	e010      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM16)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_TIM_Base_MspInit+0x44>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d10b      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018dc:	f7ff ffc9 	bl	8001872 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2019      	movs	r0, #25
 80018e6:	f000 faf8 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018ea:	2019      	movs	r0, #25
 80018ec:	f000 fb0f 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40014400 	.word	0x40014400

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler+0x4>

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f000 f9c0 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <USB_LP_IRQHandler+0x10>)
 8001956:	f000 fd60 	bl	800241a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20006ff0 	.word	0x20006ff0

08001964 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800196a:	f003 fff3 	bl	8005954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000499c 	.word	0x2000499c

08001978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_kill>:

int _kill(int pid, int sig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001992:	f009 ff61 	bl	800b858 <__errno>
 8001996:	4603      	mov	r3, r0
 8001998:	2216      	movs	r2, #22
 800199a:	601a      	str	r2, [r3, #0]
	return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0x12>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
	}

return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf1      	blt.n	8001a08 <_write+0x12>
	}
	return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a56:	605a      	str	r2, [r3, #4]
	return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_isatty>:

int _isatty(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
	return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f009 fec6 	bl	800b858 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20030000 	.word	0x20030000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	20005300 	.word	0x20005300
 8001b00:	20007518 	.word	0x20007518

08001b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <SystemInit+0x98>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <SystemInit+0x98>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b30:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <SystemInit+0x9c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4e:	f023 0305 	bic.w	r3, r3, #5
 8001b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <SystemInit+0xa0>)
 8001b70:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <SystemInit+0xa0>)
 8001b78:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	faf6fefb 	.word	0xfaf6fefb
 8001ba4:	22041000 	.word	0x22041000

08001ba8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ba8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001baa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bac:	3304      	adds	r3, #4

08001bae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bb2:	d3f9      	bcc.n	8001ba8 <CopyDataInit>
  bx lr
 8001bb4:	4770      	bx	lr

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bb6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bb8:	3004      	adds	r0, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bba:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>
  bx lr
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001bc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bc4:	f7ff ff9e 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <LoopForever+0x8>)
 8001bca:	490c      	ldr	r1, [pc, #48]	; (8001bfc <LoopForever+0xc>)
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <LoopForever+0x10>)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f7ff ffed 	bl	8001bae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopForever+0x14>)
 8001bd6:	490c      	ldr	r1, [pc, #48]	; (8001c08 <LoopForever+0x18>)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f7ff ffee 	bl	8001bba <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001bde:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopForever+0x1c>)
 8001be0:	490b      	ldr	r1, [pc, #44]	; (8001c10 <LoopForever+0x20>)
 8001be2:	2300      	movs	r3, #0
 8001be4:	f7ff ffe9 	bl	8001bba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be8:	f009 fe3c 	bl	800b864 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001bec:	f7ff fc2e 	bl	800144c <main>

08001bf0 <LoopForever>:

LoopForever:
  b LoopForever
 8001bf0:	e7fe      	b.n	8001bf0 <LoopForever>
 8001bf2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001bf4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	200048bc 	.word	0x200048bc
 8001c00:	080162ac 	.word	0x080162ac
  INIT_BSS _sbss, _ebss
 8001c04:	200048bc 	.word	0x200048bc
 8001c08:	20007514 	.word	0x20007514
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c0c:	20030000 	.word	0x20030000
 8001c10:	20030000 	.word	0x20030000

08001c14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_Init+0x3c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HAL_Init+0x3c>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2e:	2003      	movs	r0, #3
 8001c30:	f000 f948 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c34:	200f      	movs	r0, #15
 8001c36:	f000 f80f 	bl	8001c58 <HAL_InitTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	e001      	b.n	8001c4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c46:	f7ff fe2d 	bl	80018a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	58004000 	.word	0x58004000

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d024      	beq.n	8001cb6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c6c:	f003 f8cc 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f950 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	d809      	bhi.n	8001caa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c96:	2200      	movs	r2, #0
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9e:	f000 f91c 	bl	8001eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_InitTick+0x70>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e007      	b.n	8001cba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e004      	b.n	8001cba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200045f0 	.word	0x200045f0
 8001cc8:	200045ec 	.word	0x200045ec

08001ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200045f0 	.word	0x200045f0
 8001cf0:	20005304 	.word	0x20005304

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20005304 	.word	0x20005304

08001d0c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GetTickPrio+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200045ec 	.word	0x200045ec

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff40 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff90 	bl	8001e18 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5f 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff33 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa4 	bl	8001e80 <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e14c      	b.n	80021ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 813e 	beq.w	80021e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x40>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d017      	beq.n	8002022 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d123      	bne.n	8002076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8098 	beq.w	80021e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_GPIO_Init+0x2c8>)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020e2:	d019      	beq.n	8002118 <HAL_GPIO_Init+0x1d4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_GPIO_Init+0x1d0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a49      	ldr	r2, [pc, #292]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00d      	beq.n	8002110 <HAL_GPIO_Init+0x1cc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a48      	ldr	r2, [pc, #288]	; (8002218 <HAL_GPIO_Init+0x2d4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0x1c8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a47      	ldr	r2, [pc, #284]	; (800221c <HAL_GPIO_Init+0x2d8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_GPIO_Init+0x1c4>
 8002104:	2304      	movs	r3, #4
 8002106:	e008      	b.n	800211a <HAL_GPIO_Init+0x1d6>
 8002108:	2307      	movs	r3, #7
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x1d6>
 800210c:	2303      	movs	r3, #3
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x1d6>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x1d6>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x1d6>
 8002118:	2300      	movs	r3, #0
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800212a:	4938      	ldr	r1, [pc, #224]	; (800220c <HAL_GPIO_Init+0x2c8>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002186:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 800218e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 80021bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_GPIO_Init+0x2dc>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f aeab 	bne.w	8001f54 <HAL_GPIO_Init+0x10>
  }
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40010000 	.word	0x40010000
 8002210:	48000400 	.word	0x48000400
 8002214:	48000800 	.word	0x48000800
 8002218:	48000c00 	.word	0x48000c00
 800221c:	48001000 	.word	0x48001000
 8002220:	58000800 	.word	0x58000800

08002224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af06      	add	r7, sp, #24
 800222a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0cb      	b.n	80023ce <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f008 ffd6 	bl	800b1fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 ff1e 	bl	800609e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e040      	b.n	80022ea <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3301      	adds	r3, #1
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3303      	adds	r3, #3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3338      	adds	r3, #56	; 0x38
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	333c      	adds	r3, #60	; 0x3c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3340      	adds	r3, #64	; 0x40
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3b9      	bcc.n	8002268 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e044      	b.n	8002384 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	f203 1369 	addw	r3, r3, #361	; 0x169
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	3301      	adds	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d3b5      	bcc.n	80022fa <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	687e      	ldr	r6, [r7, #4]
 8002396:	466d      	mov	r5, sp
 8002398:	f106 0410 	add.w	r4, r6, #16
 800239c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	1d33      	adds	r3, r6, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f003 fe93 	bl	80060d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f001 fc45 	bl	8003c56 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_PCD_Start+0x16>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e012      	b.n	8002412 <HAL_PCD_Start+0x3c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fe39 	bl	8006070 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f006 f8fd 	bl	8008602 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f006 f902 	bl	8008630 <USB_ReadInterrupts>
 800242c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fb05 	bl	8002a48 <PCD_EP_ISR_Handler>

    return;
 800243e:	e110      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	d013      	beq.n	8002472 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245c:	b292      	uxth	r2, r2
 800245e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f008 ff7d 	bl	800b362 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002468:	2100      	movs	r1, #0
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8fc 	bl	8002668 <HAL_PCD_SetAddress>

    return;
 8002470:	e0f7      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002494:	e0e5      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00c      	beq.n	80024ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024b2:	b292      	uxth	r2, r2
 80024b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024b8:	e0d3      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d034      	beq.n	800252e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	b292      	uxth	r2, r2
 80024d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0208 	bic.w	r2, r2, #8
 80024ee:	b292      	uxth	r2, r2
 80024f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002506:	2100      	movs	r1, #0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f009 f921 	bl	800b750 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f008 ff60 	bl	800b3d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800252c:	e099      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002534:	2b00      	cmp	r3, #0
 8002536:	d027      	beq.n	8002588 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0208 	orr.w	r2, r2, #8
 800254a:	b292      	uxth	r2, r2
 800254c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	b292      	uxth	r2, r2
 8002564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0204 	orr.w	r2, r2, #4
 800257a:	b292      	uxth	r2, r2
 800257c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f008 ff0d 	bl	800b3a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002586:	e06c      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d040      	beq.n	8002614 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a4:	b292      	uxth	r2, r2
 80025a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d12b      	bne.n	800260c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0204 	orr.w	r2, r2, #4
 80025c6:	b292      	uxth	r2, r2
 80025c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	b292      	uxth	r2, r2
 80025e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002602:	2101      	movs	r1, #1
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f009 f8a3 	bl	800b750 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800260a:	e02a      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f008 fec7 	bl	800b3a0 <HAL_PCD_SuspendCallback>
    return;
 8002612:	e026      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00f      	beq.n	800263e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002630:	b292      	uxth	r2, r2
 8002632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f008 fe85 	bl	800b346 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800263c:	e011      	b.n	8002662 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265a:	b292      	uxth	r2, r2
 800265c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002660:	bf00      	nop
  }
}
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_PCD_SetAddress+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e013      	b.n	80026aa <HAL_PCD_SetAddress+0x42>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f005 ff9d 	bl	80085da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	4608      	mov	r0, r1
 80026bc:	4611      	mov	r1, r2
 80026be:	461a      	mov	r2, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	70fb      	strb	r3, [r7, #3]
 80026c4:	460b      	mov	r3, r1
 80026c6:	803b      	strh	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da0e      	bge.n	80026f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	705a      	strb	r2, [r3, #1]
 80026f4:	e00e      	b.n	8002714 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 0207 	and.w	r2, r3, #7
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002720:	883a      	ldrh	r2, [r7, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	78ba      	ldrb	r2, [r7, #2]
 800272a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800272c:	78bb      	ldrb	r3, [r7, #2]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d102      	bne.n	8002738 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_PCD_EP_Open+0x94>
 8002742:	2302      	movs	r3, #2
 8002744:	e00e      	b.n	8002764 <HAL_PCD_EP_Open+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fcdf 	bl	8006118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002762:	7afb      	ldrb	r3, [r7, #11]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277c:	2b00      	cmp	r3, #0
 800277e:	da0e      	bge.n	800279e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	705a      	strb	r2, [r3, #1]
 800279c:	e00e      	b.n	80027bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 0207 	and.w	r2, r3, #7
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_EP_Close+0x6a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e00e      	b.n	80027f4 <HAL_PCD_EP_Close+0x88>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68f9      	ldr	r1, [r7, #12]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 f85b 	bl	80068a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	460b      	mov	r3, r1
 800280a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 0207 	and.w	r2, r3, #7
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283c:	7afb      	ldrb	r3, [r7, #11]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	b2da      	uxtb	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	f004 fa13 	bl	8006c7a <USB_EPStartXfer>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 0207 	and.w	r2, r3, #7
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002880:	681b      	ldr	r3, [r3, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	460b      	mov	r3, r1
 800289c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2201      	movs	r2, #1
 80028d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6979      	ldr	r1, [r7, #20]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f9c4 	bl	8006c7a <USB_EPStartXfer>

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 0207 	and.w	r2, r3, #7
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d901      	bls.n	800291a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e03e      	b.n	8002998 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800291a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	da0e      	bge.n	8002940 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	705a      	strb	r2, [r3, #1]
 800293e:	e00c      	b.n	800295a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_PCD_EP_SetStall+0x7e>
 8002976:	2302      	movs	r3, #2
 8002978:	e00e      	b.n	8002998 <HAL_PCD_EP_SetStall+0x9c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f005 fd27 	bl	80083dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 020f 	and.w	r2, r3, #15
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d901      	bls.n	80029be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e040      	b.n	8002a40 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da0e      	bge.n	80029e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	705a      	strb	r2, [r3, #1]
 80029e2:	e00e      	b.n	8002a02 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 0207 	and.w	r2, r3, #7
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_EP_ClrStall+0x82>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e00e      	b.n	8002a40 <HAL_PCD_EP_ClrStall+0xa0>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f005 fd24 	bl	800847e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b096      	sub	sp, #88	; 0x58
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a50:	e3b1      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002a6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 8173 	bne.w	8002d5c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d150      	bne.n	8002b24 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	81fb      	strh	r3, [r7, #14]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3328      	adds	r3, #40	; 0x28
 8002aaa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	441a      	add	r2, r3
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f008 fc14 	bl	800b312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 835f 	beq.w	80031b6 <PCD_EP_ISR_Handler+0x76e>
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 835a 	bne.w	80031b6 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b292      	uxth	r2, r2
 8002b16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b22:	e348      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b2a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d032      	beq.n	8002ba8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b68:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f005 fda9 	bl	80086d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b8e:	4013      	ands	r3, r2
 8002b90:	823b      	strh	r3, [r7, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	8a3a      	ldrh	r2, [r7, #16]
 8002b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f008 fb89 	bl	800b2b8 <HAL_PCD_SetupStageCallback>
 8002ba6:	e306      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ba8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f280 8302 	bge.w	80031b6 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	83fb      	strh	r3, [r7, #30]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	8bfa      	ldrh	r2, [r7, #30]
 8002bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d019      	beq.n	8002c34 <PCD_EP_ISR_Handler+0x1ec>
 8002c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	6959      	ldr	r1, [r3, #20]
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f005 fd5b 	bl	80086d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	441a      	add	r2, r3
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f008 fb54 	bl	800b2dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 82b5 	bne.w	80031b6 <PCD_EP_ISR_Handler+0x76e>
 8002c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c50:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c58:	f000 82ad 	beq.w	80031b6 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b3e      	cmp	r3, #62	; 0x3e
 8002c92:	d91d      	bls.n	8002cd0 <PCD_EP_ISR_Handler+0x288>
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <PCD_EP_ISR_Handler+0x266>
 8002ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002caa:	3b01      	subs	r3, #1
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e026      	b.n	8002d1e <PCD_EP_ISR_Handler+0x2d6>
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <PCD_EP_ISR_Handler+0x2a6>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	e017      	b.n	8002d1e <PCD_EP_ISR_Handler+0x2d6>
 8002cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <PCD_EP_ISR_Handler+0x2c0>
 8002d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d04:	3301      	adds	r3, #1
 8002d06:	647b      	str	r3, [r7, #68]	; 0x44
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	029b      	lsls	r3, r3, #10
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	827b      	strh	r3, [r7, #18]
 8002d30:	8a7b      	ldrh	r3, [r7, #18]
 8002d32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d36:	827b      	strh	r3, [r7, #18]
 8002d38:	8a7b      	ldrh	r3, [r7, #18]
 8002d3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d3e:	827b      	strh	r3, [r7, #18]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	8a7b      	ldrh	r3, [r7, #18]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	e22c      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d70:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f280 80f6 	bge.w	8002f66 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d90:	4013      	ands	r3, r2
 8002d92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dac:	b292      	uxth	r2, r2
 8002dae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002db0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	7b1b      	ldrb	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d123      	bne.n	8002e16 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002df6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 808e 	beq.w	8002f1c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e06:	6959      	ldr	r1, [r3, #20]
 8002e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0a:	88da      	ldrh	r2, [r3, #6]
 8002e0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e10:	f005 fc60 	bl	80086d4 <USB_ReadPMA>
 8002e14:	e082      	b.n	8002f1c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	78db      	ldrb	r3, [r3, #3]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d10a      	bne.n	8002e34 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e22:	461a      	mov	r2, r3
 8002e24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f9d3 	bl	80031d2 <HAL_PCD_EP_DB_Receive>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002e32:	e073      	b.n	8002f1c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d022      	beq.n	8002ed8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002eba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02c      	beq.n	8002f1c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec8:	6959      	ldr	r1, [r3, #20]
 8002eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ecc:	891a      	ldrh	r2, [r3, #8]
 8002ece:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ed2:	f005 fbff 	bl	80086d4 <USB_ReadPMA>
 8002ed6:	e021      	b.n	8002f1c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002f00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f12:	895a      	ldrh	r2, [r3, #10]
 8002f14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f18:	f005 fbdc 	bl	80086d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f24:	441a      	add	r2, r3
 8002f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f32:	441a      	add	r2, r3
 8002f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f36:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <PCD_EP_ISR_Handler+0x504>
 8002f40:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d206      	bcs.n	8002f5a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f008 f9c2 	bl	800b2dc <HAL_PCD_DataOutStageCallback>
 8002f58:	e005      	b.n	8002f66 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fe8a 	bl	8006c7a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8121 	beq.w	80031b6 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc6:	78db      	ldrb	r3, [r3, #3]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 80a2 	bne.w	8003112 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd6:	7b1b      	ldrb	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8093 	beq.w	8003104 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d046      	beq.n	8003078 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d126      	bne.n	8003040 <PCD_EP_ISR_Handler+0x5f8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	4413      	add	r3, r2
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
 800300a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00da      	lsls	r2, r3, #3
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	4413      	add	r3, r2
 8003014:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003024:	b29a      	uxth	r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003038:	b29a      	uxth	r2, r3
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	e061      	b.n	8003104 <PCD_EP_ISR_Handler+0x6bc>
 8003040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d15d      	bne.n	8003104 <PCD_EP_ISR_Handler+0x6bc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003056:	b29b      	uxth	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	4413      	add	r3, r2
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	4413      	add	r3, r2
 800306a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	2200      	movs	r2, #0
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	e045      	b.n	8003104 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d126      	bne.n	80030d4 <PCD_EP_ISR_Handler+0x68c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	4413      	add	r3, r2
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
 800309e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	00da      	lsls	r2, r3, #3
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	4413      	add	r3, r2
 80030a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	e017      	b.n	8003104 <PCD_EP_ISR_Handler+0x6bc>
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d113      	bne.n	8003104 <PCD_EP_ISR_Handler+0x6bc>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ea:	4413      	add	r3, r2
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	2200      	movs	r2, #0
 8003102:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f008 f901 	bl	800b312 <HAL_PCD_DataInStageCallback>
 8003110:	e051      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003112:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d144      	bne.n	80031a8 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	4413      	add	r3, r2
 8003138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003142:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800314e:	429a      	cmp	r2, r3
 8003150:	d907      	bls.n	8003162 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800315a:	1ad2      	subs	r2, r2, r3
 800315c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	e002      	b.n	8003168 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f008 f8cb 	bl	800b312 <HAL_PCD_DataInStageCallback>
 800317c:	e01b      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800317e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003186:	441a      	add	r2, r3
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003194:	441a      	add	r2, r3
 8003196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003198:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fd6a 	bl	8006c7a <USB_EPStartXfer>
 80031a6:	e006      	b.n	80031b6 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031ac:	461a      	mov	r2, r3
 80031ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f917 	bl	80033e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031be:	b29b      	uxth	r3, r3
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f6ff ac45 	blt.w	8002a52 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3758      	adds	r7, #88	; 0x58
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	4613      	mov	r3, r2
 80031de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d07c      	beq.n	80032e4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	4413      	add	r3, r2
 8003204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	429a      	cmp	r2, r3
 8003218:	d306      	bcc.n	8003228 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	8b7b      	ldrh	r3, [r7, #26]
 8003220:	1ad2      	subs	r2, r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	619a      	str	r2, [r3, #24]
 8003226:	e002      	b.n	800322e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d123      	bne.n	800327e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800324c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003250:	833b      	strh	r3, [r7, #24]
 8003252:	8b3b      	ldrh	r3, [r7, #24]
 8003254:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003258:	833b      	strh	r3, [r7, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	441a      	add	r2, r3
 8003268:	8b3b      	ldrh	r3, [r7, #24]
 800326a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800326e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327a:	b29b      	uxth	r3, r3
 800327c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01f      	beq.n	80032c8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	82fb      	strh	r3, [r7, #22]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	8afb      	ldrh	r3, [r7, #22]
 80032b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032c8:	8b7b      	ldrh	r3, [r7, #26]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8085 	beq.w	80033da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6959      	ldr	r1, [r3, #20]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	891a      	ldrh	r2, [r3, #8]
 80032dc:	8b7b      	ldrh	r3, [r7, #26]
 80032de:	f005 f9f9 	bl	80086d4 <USB_ReadPMA>
 80032e2:	e07a      	b.n	80033da <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003308:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	429a      	cmp	r2, r3
 8003312:	d306      	bcc.n	8003322 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	8b7b      	ldrh	r3, [r7, #26]
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	619a      	str	r2, [r3, #24]
 8003320:	e002      	b.n	8003328 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d123      	bne.n	8003378 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	83fb      	strh	r3, [r7, #30]
 800334c:	8bfb      	ldrh	r3, [r7, #30]
 800334e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003352:	83fb      	strh	r3, [r7, #30]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	8bfb      	ldrh	r3, [r7, #30]
 8003364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	83bb      	strh	r3, [r7, #28]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	8bbb      	ldrh	r3, [r7, #28]
 80033ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033c2:	8b7b      	ldrh	r3, [r7, #26]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6959      	ldr	r1, [r3, #20]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	895a      	ldrh	r2, [r3, #10]
 80033d4:	8b7b      	ldrh	r3, [r7, #26]
 80033d6:	f005 f97d 	bl	80086d4 <USB_ReadPMA>
    }
  }

  return count;
 80033da:	8b7b      	ldrh	r3, [r7, #26]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b0a4      	sub	sp, #144	; 0x90
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 81db 	beq.w	80037b4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	4413      	add	r3, r2
 8003418:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003422:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800342e:	429a      	cmp	r2, r3
 8003430:	d907      	bls.n	8003442 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	619a      	str	r2, [r3, #24]
 8003440:	e002      	b.n	8003448 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 80b9 	bne.w	80035c4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d126      	bne.n	80034a8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346e:	4413      	add	r3, r2
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	00da      	lsls	r2, r3, #3
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	4413      	add	r3, r2
 800347c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348c:	b29a      	uxth	r2, r3
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800349c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e01a      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0xfa>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d116      	bne.n	80034de <HAL_PCD_EP_DB_Transmit+0xfa>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	4413      	add	r3, r2
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	00da      	lsls	r2, r3, #3
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	4413      	add	r3, r2
 80034d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	2200      	movs	r2, #0
 80034dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d126      	bne.n	800353a <HAL_PCD_EP_DB_Transmit+0x156>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	00da      	lsls	r2, r3, #3
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351e:	b29a      	uxth	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003532:	b29a      	uxth	r2, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	801a      	strh	r2, [r3, #0]
 8003538:	e017      	b.n	800356a <HAL_PCD_EP_DB_Transmit+0x186>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	785b      	ldrb	r3, [r3, #1]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d113      	bne.n	800356a <HAL_PCD_EP_DB_Transmit+0x186>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	4413      	add	r3, r2
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00da      	lsls	r2, r3, #3
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	4413      	add	r3, r2
 800355e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f007 fece 	bl	800b312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 82fa 	beq.w	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359c:	82fb      	strh	r3, [r7, #22]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	8afb      	ldrh	r3, [r7, #22]
 80035ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]
 80035c2:	e2d8      	b.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d021      	beq.n	8003612 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80035fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360e:	b29b      	uxth	r3, r3
 8003610:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 82ac 	bne.w	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003626:	441a      	add	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003634:	441a      	add	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	429a      	cmp	r2, r3
 8003644:	d30b      	bcc.n	800365e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003656:	1ad2      	subs	r2, r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	621a      	str	r2, [r3, #32]
 800365c:	e017      	b.n	800368e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003666:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800366a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003676:	e00a      	b.n	800368e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d165      	bne.n	8003762 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036aa:	4413      	add	r3, r2
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	00da      	lsls	r2, r3, #3
 80036b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b6:	4413      	add	r3, r2
 80036b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d2:	2b3e      	cmp	r3, #62	; 0x3e
 80036d4:	d91d      	bls.n	8003712 <HAL_PCD_EP_DB_Transmit+0x32e>
 80036d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80036ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ec:	3b01      	subs	r3, #1
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370a:	b29a      	uxth	r2, r3
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	e044      	b.n	800379c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_PCD_EP_DB_Transmit+0x34c>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003728:	b29a      	uxth	r2, r3
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	e035      	b.n	800379c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	64bb      	str	r3, [r7, #72]	; 0x48
 8003738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_PCD_EP_DB_Transmit+0x366>
 8003744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003746:	3301      	adds	r3, #1
 8003748:	64bb      	str	r3, [r7, #72]	; 0x48
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29a      	uxth	r2, r3
 8003750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003752:	b29b      	uxth	r3, r3
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	b29b      	uxth	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	b29a      	uxth	r2, r3
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	e01c      	b.n	800379c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d118      	bne.n	800379c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	647b      	str	r3, [r7, #68]	; 0x44
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	4413      	add	r3, r2
 8003780:	647b      	str	r3, [r7, #68]	; 0x44
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	00da      	lsls	r2, r3, #3
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	4413      	add	r3, r2
 800378c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
 8003792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003796:	b29a      	uxth	r2, r3
 8003798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6959      	ldr	r1, [r3, #20]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	891a      	ldrh	r2, [r3, #8]
 80037a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f004 ff4f 	bl	8008650 <USB_WritePMA>
 80037b2:	e1e0      	b.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d307      	bcc.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	619a      	str	r2, [r3, #24]
 80037f6:	e002      	b.n	80037fe <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 80c0 	bne.w	8003988 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d126      	bne.n	800385e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381e:	b29b      	uxth	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003824:	4413      	add	r3, r2
 8003826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	00da      	lsls	r2, r3, #3
 800382e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003830:	4413      	add	r3, r2
 8003832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003836:	67bb      	str	r3, [r7, #120]	; 0x78
 8003838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003842:	b29a      	uxth	r2, r3
 8003844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003856:	b29a      	uxth	r2, r3
 8003858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	e01a      	b.n	8003894 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d116      	bne.n	8003894 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	667b      	str	r3, [r7, #100]	; 0x64
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800387a:	4413      	add	r3, r2
 800387c:	667b      	str	r3, [r7, #100]	; 0x64
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	00da      	lsls	r2, r3, #3
 8003884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003886:	4413      	add	r3, r2
 8003888:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
 800388e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003890:	2200      	movs	r2, #0
 8003892:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	677b      	str	r3, [r7, #116]	; 0x74
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d12b      	bne.n	80038fa <HAL_PCD_EP_DB_Transmit+0x516>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b6:	4413      	add	r3, r2
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	00da      	lsls	r2, r3, #3
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	b29a      	uxth	r2, r3
 80038da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	e017      	b.n	800392a <HAL_PCD_EP_DB_Transmit+0x546>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d113      	bne.n	800392a <HAL_PCD_EP_DB_Transmit+0x546>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003910:	4413      	add	r3, r2
 8003912:	677b      	str	r3, [r7, #116]	; 0x74
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00da      	lsls	r2, r3, #3
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	4413      	add	r3, r2
 800391e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003922:	673b      	str	r3, [r7, #112]	; 0x70
 8003924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	4619      	mov	r1, r3
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f007 fcee 	bl	800b312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 811a 	bne.w	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800397e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]
 8003986:	e0f6      	b.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 80ca 	bne.w	8003b76 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039ea:	441a      	add	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039f8:	441a      	add	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d30b      	bcc.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	621a      	str	r2, [r3, #32]
 8003a20:	e017      	b.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a3a:	e00a      	b.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	657b      	str	r3, [r7, #84]	; 0x54
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d165      	bne.n	8003b2c <HAL_PCD_EP_DB_Transmit+0x748>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a74:	4413      	add	r3, r2
 8003a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	00da      	lsls	r2, r3, #3
 8003a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a80:	4413      	add	r3, r2
 8003a82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a9e:	d91d      	bls.n	8003adc <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	029b      	lsls	r3, r3, #10
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	e041      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_PCD_EP_DB_Transmit+0x716>
 8003ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af6:	801a      	strh	r2, [r3, #0]
 8003af8:	e032      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x730>
 8003b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b10:	3301      	adds	r3, #1
 8003b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	4313      	orrs	r3, r2
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	e019      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d115      	bne.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	4413      	add	r3, r2
 8003b44:	657b      	str	r3, [r7, #84]	; 0x54
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	00da      	lsls	r2, r3, #3
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	4413      	add	r3, r2
 8003b50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b54:	653b      	str	r3, [r7, #80]	; 0x50
 8003b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6959      	ldr	r1, [r3, #20]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	895a      	ldrh	r2, [r3, #10]
 8003b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f004 fd6d 	bl	8008650 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b90:	82bb      	strh	r3, [r7, #20]
 8003b92:	8abb      	ldrh	r3, [r7, #20]
 8003b94:	f083 0310 	eor.w	r3, r3, #16
 8003b98:	82bb      	strh	r3, [r7, #20]
 8003b9a:	8abb      	ldrh	r3, [r7, #20]
 8003b9c:	f083 0320 	eor.w	r3, r3, #32
 8003ba0:	82bb      	strh	r3, [r7, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	441a      	add	r2, r3
 8003bb0:	8abb      	ldrh	r3, [r7, #20]
 8003bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3790      	adds	r7, #144	; 0x90
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	817b      	strh	r3, [r7, #10]
 8003bde:	4613      	mov	r3, r2
 8003be0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e009      	b.n	8003c1a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c06:	897a      	ldrh	r2, [r7, #10]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	80da      	strh	r2, [r3, #6]
 8003c2e:	e00b      	b.n	8003c48 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2201      	movs	r2, #1
 8003c34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	58000400 	.word	0x58000400

08003ccc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58000400 	.word	0x58000400

08003ce8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf6:	6053      	str	r3, [r2, #4]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	58000400 	.word	0x58000400

08003d08 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1a:	d101      	bne.n	8003d20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d7a:	d101      	bne.n	8003d80 <LL_RCC_HSE_IsReady+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_RCC_HSE_IsReady+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d101      	bne.n	8003de0 <LL_RCC_HSI_IsReady+0x18>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <LL_RCC_HSI_IsReady+0x1a>
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d101      	bne.n	8003e72 <LL_RCC_HSI48_IsReady+0x18>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <LL_RCC_HSI48_IsReady+0x1a>
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d101      	bne.n	8003f1e <LL_RCC_LSE_IsReady+0x18>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_RCC_LSE_IsReady+0x1a>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d101      	bne.n	8003f86 <LL_RCC_LSI1_IsReady+0x18>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <LL_RCC_LSI1_IsReady+0x1a>
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d101      	bne.n	8003fee <LL_RCC_LSI2_IsReady+0x18>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <LL_RCC_LSI2_IsReady+0x1a>
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d101      	bne.n	800407a <LL_RCC_MSI_IsReady+0x16>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_RCC_MSI_IsReady+0x18>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2bb0      	cmp	r3, #176	; 0xb0
 80040c4:	d901      	bls.n	80040ca <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80040c6:	23b0      	movs	r3, #176	; 0xb0
 80040c8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80040ca:	687b      	ldr	r3, [r7, #4]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 0203 	bic.w	r2, r3, #3
 8004114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004176:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800417a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041a6:	f023 020f 	bic.w	r2, r3, #15
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4313      	orrs	r3, r2
 80041de:	608b      	str	r3, [r1, #8]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004296:	d101      	bne.n	800429c <LL_RCC_PLL_IsReady+0x18>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <LL_RCC_PLL_IsReady+0x1a>
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0303 	and.w	r3, r3, #3
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d101      	bne.n	8004322 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004342:	d101      	bne.n	8004348 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d101      	bne.n	800436e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800438c:	d101      	bne.n	8004392 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b0:	d101      	bne.n	80043b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b08d      	sub	sp, #52	; 0x34
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e363      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 808d 	beq.w	80044fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e4:	f7ff fea1 	bl	800412a <LL_RCC_GetSysClkSource>
 80043e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ea:	f7ff ff82 	bl	80042f2 <LL_RCC_PLL_GetMainSource>
 80043ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x3e>
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d147      	bne.n	800448c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d144      	bne.n	800448c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e347      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004412:	f7ff fe4c 	bl	80040ae <LL_RCC_MSI_GetRange>
 8004416:	4603      	mov	r3, r0
 8004418:	429c      	cmp	r4, r3
 800441a:	d914      	bls.n	8004446 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd05 	bl	8004e30 <RCC_SetFlashLatencyFromMSIRange>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e336      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fe26 	bl	8004086 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fe4a 	bl	80040d8 <LL_RCC_MSI_SetCalibTrimming>
 8004444:	e013      	b.n	800446e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fe1b 	bl	8004086 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fe3f 	bl	80040d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fce6 	bl	8004e30 <RCC_SetFlashLatencyFromMSIRange>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e317      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800446e:	f000 fccb 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004472:	4603      	mov	r3, r0
 8004474:	4aa4      	ldr	r2, [pc, #656]	; (8004708 <HAL_RCC_OscConfig+0x344>)
 8004476:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004478:	4ba4      	ldr	r3, [pc, #656]	; (800470c <HAL_RCC_OscConfig+0x348>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd fbeb 	bl	8001c58 <HAL_InitTick>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d039      	beq.n	80044fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e308      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01e      	beq.n	80044d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004494:	f7ff fdc8 	bl	8004028 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004498:	f7fd fc2c 	bl	8001cf4 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a0:	f7fd fc28 	bl	8001cf4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e2f5      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044b2:	f7ff fdd7 	bl	8004064 <LL_RCC_MSI_IsReady>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f1      	beq.n	80044a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fde0 	bl	8004086 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fe04 	bl	80040d8 <LL_RCC_MSI_SetCalibTrimming>
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044d2:	f7ff fdb8 	bl	8004046 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d6:	f7fd fc0d 	bl	8001cf4 <HAL_GetTick>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044de:	f7fd fc09 	bl	8001cf4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e2d6      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80044f0:	f7ff fdb8 	bl	8004064 <LL_RCC_MSI_IsReady>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f1      	bne.n	80044de <HAL_RCC_OscConfig+0x11a>
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d047      	beq.n	800459a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	f7ff fe0e 	bl	800412a <LL_RCC_GetSysClkSource>
 800450e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004510:	f7ff feef 	bl	80042f2 <LL_RCC_PLL_GetMainSource>
 8004514:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d005      	beq.n	8004528 <HAL_RCC_OscConfig+0x164>
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d108      	bne.n	8004534 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d134      	bne.n	800459a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e2b4      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d102      	bne.n	8004544 <HAL_RCC_OscConfig+0x180>
 800453e:	f7ff fbf5 	bl	8003d2c <LL_RCC_HSE_Enable>
 8004542:	e001      	b.n	8004548 <HAL_RCC_OscConfig+0x184>
 8004544:	f7ff fc01 	bl	8003d4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d012      	beq.n	8004576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fbd0 	bl	8001cf4 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd fbcc 	bl	8001cf4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e299      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800456a:	f7ff fbfd 	bl	8003d68 <LL_RCC_HSE_IsReady>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f1      	beq.n	8004558 <HAL_RCC_OscConfig+0x194>
 8004574:	e011      	b.n	800459a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd fbbd 	bl	8001cf4 <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457e:	f7fd fbb9 	bl	8001cf4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e286      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004590:	f7ff fbea 	bl	8003d68 <LL_RCC_HSE_IsReady>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f1      	bne.n	800457e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04c      	beq.n	8004640 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a6:	f7ff fdc0 	bl	800412a <LL_RCC_GetSysClkSource>
 80045aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ac:	f7ff fea1 	bl	80042f2 <LL_RCC_PLL_GetMainSource>
 80045b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_OscConfig+0x200>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d10e      	bne.n	80045dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d10b      	bne.n	80045dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e266      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fc09 	bl	8003dec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045da:	e031      	b.n	8004640 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d019      	beq.n	8004618 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	f7ff fbd2 	bl	8003d8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fb84 	bl	8001cf4 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fd fb80 	bl	8001cf4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e24d      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004602:	f7ff fbe1 	bl	8003dc8 <LL_RCC_HSI_IsReady>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f1      	beq.n	80045f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fbeb 	bl	8003dec <LL_RCC_HSI_SetCalibTrimming>
 8004616:	e013      	b.n	8004640 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004618:	f7ff fbc7 	bl	8003daa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd fb6a 	bl	8001cf4 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fd fb66 	bl	8001cf4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e233      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004636:	f7ff fbc7 	bl	8003dc8 <LL_RCC_HSI_IsReady>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f1      	bne.n	8004624 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a3 	beq.w	80047a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d076      	beq.n	8004750 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	d046      	beq.n	80046fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800466e:	f7ff fc7e 	bl	8003f6e <LL_RCC_LSI1_IsReady>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004678:	f7ff fc57 	bl	8003f2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800467c:	f7fd fb3a 	bl	8001cf4 <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004684:	f7fd fb36 	bl	8001cf4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e203      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004696:	f7ff fc6a 	bl	8003f6e <LL_RCC_LSI1_IsReady>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f1      	beq.n	8004684 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80046a0:	f7ff fc77 	bl	8003f92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fb26 	bl	8001cf4 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046ac:	f7fd fb22 	bl	8001cf4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1ef      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046be:	f7ff fc8a 	bl	8003fd6 <LL_RCC_LSI2_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f1      	beq.n	80046ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fc94 	bl	8003ffa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046d2:	f7ff fc3b 	bl	8003f4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fb0d 	bl	8001cf4 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046de:	f7fd fb09 	bl	8001cf4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1d6      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046f0:	f7ff fc3d 	bl	8003f6e <LL_RCC_LSI1_IsReady>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f1      	bne.n	80046de <HAL_RCC_OscConfig+0x31a>
 80046fa:	e051      	b.n	80047a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80046fc:	f7ff fc15 	bl	8003f2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd faf8 	bl	8001cf4 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004706:	e00c      	b.n	8004722 <HAL_RCC_OscConfig+0x35e>
 8004708:	200045e8 	.word	0x200045e8
 800470c:	200045ec 	.word	0x200045ec
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004710:	f7fd faf0 	bl	8001cf4 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1bd      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004722:	f7ff fc24 	bl	8003f6e <LL_RCC_LSI1_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f1      	beq.n	8004710 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800472c:	f7ff fc42 	bl	8003fb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004732:	f7fd fadf 	bl	8001cf4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b03      	cmp	r3, #3
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1ac      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004744:	f7ff fc47 	bl	8003fd6 <LL_RCC_LSI2_IsReady>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f1      	bne.n	8004732 <HAL_RCC_OscConfig+0x36e>
 800474e:	e027      	b.n	80047a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004750:	f7ff fc30 	bl	8003fb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd face 	bl	8001cf4 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800475c:	f7fd faca 	bl	8001cf4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e197      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800476e:	f7ff fc32 	bl	8003fd6 <LL_RCC_LSI2_IsReady>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f1      	bne.n	800475c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004778:	f7ff fbe8 	bl	8003f4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd faba 	bl	8001cf4 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004784:	f7fd fab6 	bl	8001cf4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e183      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004796:	f7ff fbea 	bl	8003f6e <LL_RCC_LSI1_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d05b      	beq.n	8004864 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	4ba7      	ldr	r3, [pc, #668]	; (8004a4c <HAL_RCC_OscConfig+0x688>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d114      	bne.n	80047e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047b8:	f7ff fa78 	bl	8003cac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047bc:	f7fd fa9a 	bl	8001cf4 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c4:	f7fd fa96 	bl	8001cf4 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e163      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d6:	4b9d      	ldr	r3, [pc, #628]	; (8004a4c <HAL_RCC_OscConfig+0x688>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x42c>
 80047ea:	f7ff fb48 	bl	8003e7e <LL_RCC_LSE_Enable>
 80047ee:	e00c      	b.n	800480a <HAL_RCC_OscConfig+0x446>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d104      	bne.n	8004802 <HAL_RCC_OscConfig+0x43e>
 80047f8:	f7ff fb63 	bl	8003ec2 <LL_RCC_LSE_EnableBypass>
 80047fc:	f7ff fb3f 	bl	8003e7e <LL_RCC_LSE_Enable>
 8004800:	e003      	b.n	800480a <HAL_RCC_OscConfig+0x446>
 8004802:	f7ff fb4d 	bl	8003ea0 <LL_RCC_LSE_Disable>
 8004806:	f7ff fb6d 	bl	8003ee4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d014      	beq.n	800483c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd fa6f 	bl	8001cf4 <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd fa6b 	bl	8001cf4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e136      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004830:	f7ff fb69 	bl	8003f06 <LL_RCC_LSE_IsReady>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ef      	beq.n	800481a <HAL_RCC_OscConfig+0x456>
 800483a:	e013      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd fa5a 	bl	8001cf4 <HAL_GetTick>
 8004840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd fa56 	bl	8001cf4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e121      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800485a:	f7ff fb54 	bl	8003f06 <LL_RCC_LSE_IsReady>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ef      	bne.n	8004844 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02c      	beq.n	80048ca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d014      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004878:	f7ff facd 	bl	8003e16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fd fa3a 	bl	8001cf4 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004884:	f7fd fa36 	bl	8001cf4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e103      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004896:	f7ff fae0 	bl	8003e5a <LL_RCC_HSI48_IsReady>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f1      	beq.n	8004884 <HAL_RCC_OscConfig+0x4c0>
 80048a0:	e013      	b.n	80048ca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048a2:	f7ff fac9 	bl	8003e38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a6:	f7fd fa25 	bl	8001cf4 <HAL_GetTick>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ae:	f7fd fa21 	bl	8001cf4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0ee      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048c0:	f7ff facb 	bl	8003e5a <LL_RCC_HSI48_IsReady>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f1      	bne.n	80048ae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80e4 	beq.w	8004a9c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d4:	f7ff fc29 	bl	800412a <LL_RCC_GetSysClkSource>
 80048d8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	f040 80b4 	bne.w	8004a54 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d123      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d11c      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d114      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d10d      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d05d      	beq.n	80049fe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d058      	beq.n	80049fa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0a1      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800495a:	f7ff fc84 	bl	8004266 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800495e:	f7fd f9c9 	bl	8001cf4 <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004966:	f7fd f9c5 	bl	8001cf4 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e092      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ef      	bne.n	8004966 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <HAL_RCC_OscConfig+0x68c>)
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004998:	4311      	orrs	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800499e:	0212      	lsls	r2, r2, #8
 80049a0:	4311      	orrs	r1, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049ac:	4311      	orrs	r1, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049bc:	f7ff fc44 	bl	8004248 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049d0:	f7fd f990 	bl	8001cf4 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fd f98c 	bl	8001cf4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e059      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f8:	e050      	b.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e04f      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d147      	bne.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a0c:	f7ff fc1c 	bl	8004248 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a20:	f7fd f968 	bl	8001cf4 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fd f964 	bl	8001cf4 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e031      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ef      	beq.n	8004a28 <HAL_RCC_OscConfig+0x664>
 8004a48:	e028      	b.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
 8004a4a:	bf00      	nop
 8004a4c:	58000400 	.word	0x58000400
 8004a50:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d01e      	beq.n	8004a98 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	f7ff fc04 	bl	8004266 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fd f949 	bl	8001cf4 <HAL_GetTick>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fd f945 	bl	8001cf4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e012      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_OscConfig+0x6e4>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
 8004a96:	e001      	b.n	8004a9c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3734      	adds	r7, #52	; 0x34
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	eefefffc 	.word	0xeefefffc

08004aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e12d      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b98      	ldr	r3, [pc, #608]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d91b      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b95      	ldr	r3, [pc, #596]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	4993      	ldr	r1, [pc, #588]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ade:	f7fd f909 	bl	8001cf4 <HAL_GetTick>
 8004ae2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ae6:	f7fd f905 	bl	8001cf4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e111      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af8:	4b8a      	ldr	r3, [pc, #552]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d1ef      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fb13 	bl	8004142 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b1c:	f7fd f8ea 	bl	8001cf4 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b24:	f7fd f8e6 	bl	8001cf4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0f2      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b36:	f7ff fbe8 	bl	800430a <LL_RCC_IsActiveFlag_HPRE>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f1      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fb0a 	bl	800416a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b56:	f7fd f8cd 	bl	8001cf4 <HAL_GetTick>
 8004b5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b5e:	f7fd f8c9 	bl	8001cf4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0d5      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b70:	f7ff fbdd 	bl	800432e <LL_RCC_IsActiveFlag_C2HPRE>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f1      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fb03 	bl	8004196 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b90:	f7fd f8b0 	bl	8001cf4 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b98:	f7fd f8ac 	bl	8001cf4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0b8      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004baa:	f7ff fbd3 	bl	8004354 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f1      	beq.n	8004b98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fafd 	bl	80041c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bca:	f7fd f893 	bl	8001cf4 <HAL_GetTick>
 8004bce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bd2:	f7fd f88f 	bl	8001cf4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e09b      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004be4:	f7ff fbc9 	bl	800437a <LL_RCC_IsActiveFlag_PPRE1>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f1      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d017      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff faf3 	bl	80041ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c06:	f7fd f875 	bl	8001cf4 <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c0e:	f7fd f871 	bl	8001cf4 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e07d      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c20:	f7ff fbbd 	bl	800439e <LL_RCC_IsActiveFlag_PPRE2>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f1      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d043      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c3e:	f7ff f893 	bl	8003d68 <LL_RCC_HSE_IsReady>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11e      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e067      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c54:	f7ff fb16 	bl	8004284 <LL_RCC_PLL_IsReady>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d113      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e05c      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c6a:	f7ff f9fb 	bl	8004064 <LL_RCC_MSI_IsReady>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e051      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c78:	f7ff f8a6 	bl	8003dc8 <LL_RCC_HSI_IsReady>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e04a      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fa39 	bl	8004102 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fd f830 	bl	8001cf4 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fd f82c 	bl	8001cf4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e036      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	f7ff fa3c 	bl	800412a <LL_RCC_GetSysClkSource>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d1ec      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d21b      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 0207 	bic.w	r2, r3, #7
 8004cd4:	4913      	ldr	r1, [pc, #76]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cdc:	f7fd f80a 	bl	8001cf4 <HAL_GetTick>
 8004ce0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ce4:	f7fd f806 	bl	8001cf4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e012      	b.n	8004d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_ClockConfig+0x278>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d1ef      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d04:	f000 f880 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <HAL_RCC_ClockConfig+0x27c>)
 8004d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d0e:	f7fc fffd 	bl	8001d0c <HAL_GetTickPrio>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fc ff9f 	bl	8001c58 <HAL_InitTick>
 8004d1a:	4603      	mov	r3, r0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	58004000 	.word	0x58004000
 8004d28:	200045e8 	.word	0x200045e8

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	f7ff f9fa 	bl	800412a <LL_RCC_GetSysClkSource>
 8004d36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d3e:	f7ff f9b6 	bl	80040ae <LL_RCC_MSI_GetRange>
 8004d42:	4603      	mov	r3, r0
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e04b      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d102      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e045      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d66:	f7fe ffcf 	bl	8003d08 <LL_RCC_HSE_IsEnabledDiv2>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d70:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e03a      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e037      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d7c:	f7ff fab9 	bl	80042f2 <LL_RCC_PLL_GetMainSource>
 8004d80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d003      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x64>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x6a>
 8004d8e:	e00d      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d92:	60bb      	str	r3, [r7, #8]
        break;
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d96:	f7fe ffb7 	bl	8003d08 <LL_RCC_HSE_IsEnabledDiv2>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004da0:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004da2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004da4:	e00d      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004da8:	60bb      	str	r3, [r7, #8]
        break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004dac:	f7ff f97f 	bl	80040ae <LL_RCC_MSI_GetRange>
 8004db0:	4603      	mov	r3, r0
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbe:	60bb      	str	r3, [r7, #8]
        break;
 8004dc0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004dc2:	f7ff fa71 	bl	80042a8 <LL_RCC_PLL_GetN>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	fb03 f402 	mul.w	r4, r3, r2
 8004dce:	f7ff fa84 	bl	80042da <LL_RCC_PLL_GetDivider>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ddc:	f7ff fa71 	bl	80042c2 <LL_RCC_PLL_GetR>
 8004de0:	4603      	mov	r3, r0
 8004de2:	0f5b      	lsrs	r3, r3, #29
 8004de4:	3301      	adds	r3, #1
 8004de6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	08015da8 	.word	0x08015da8
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	003d0900 	.word	0x003d0900
 8004e04:	007a1200 	.word	0x007a1200

08004e08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e08:	b598      	push	{r3, r4, r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e0c:	f7ff ff8e 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004e10:	4604      	mov	r4, r0
 8004e12:	f7ff f9ff 	bl	8004214 <LL_RCC_GetAHBPrescaler>
 8004e16:	4603      	mov	r3, r0
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	4a03      	ldr	r2, [pc, #12]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x24>)
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd98      	pop	{r3, r4, r7, pc}
 8004e2c:	08015d68 	.word	0x08015d68

08004e30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2bb0      	cmp	r3, #176	; 0xb0
 8004e3c:	d903      	bls.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e007      	b.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	4a11      	ldr	r2, [pc, #68]	; (8004e94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004e56:	f7ff f9e9 	bl	800422c <LL_RCC_GetAHB4Prescaler>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	4a0d      	ldr	r2, [pc, #52]	; (8004e98 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	0c9c      	lsrs	r4, r3, #18
 8004e7a:	f7fe ff27 	bl	8003ccc <HAL_PWREx_GetVoltageRange>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4619      	mov	r1, r3
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f80c 	bl	8004ea0 <RCC_SetFlashLatency>
 8004e88:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd90      	pop	{r4, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	08015da8 	.word	0x08015da8
 8004e98:	08015d68 	.word	0x08015d68
 8004e9c:	431bde83 	.word	0x431bde83

08004ea0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b093      	sub	sp, #76	; 0x4c
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <RCC_SetFlashLatency+0xe8>)
 8004eac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004eb6:	4a35      	ldr	r2, [pc, #212]	; (8004f8c <RCC_SetFlashLatency+0xec>)
 8004eb8:	f107 031c 	add.w	r3, r7, #28
 8004ebc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ebe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004ec2:	4b33      	ldr	r3, [pc, #204]	; (8004f90 <RCC_SetFlashLatency+0xf0>)
 8004ec4:	f107 040c 	add.w	r4, r7, #12
 8004ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004ece:	2300      	movs	r3, #0
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed8:	d11a      	bne.n	8004f10 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ede:	e013      	b.n	8004f08 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	3348      	adds	r3, #72	; 0x48
 8004ee6:	443b      	add	r3, r7
 8004ee8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d807      	bhi.n	8004f02 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	3348      	adds	r3, #72	; 0x48
 8004ef8:	443b      	add	r3, r7
 8004efa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004efe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f00:	e020      	b.n	8004f44 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f04:	3301      	adds	r3, #1
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
 8004f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d9e8      	bls.n	8004ee0 <RCC_SetFlashLatency+0x40>
 8004f0e:	e019      	b.n	8004f44 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	e013      	b.n	8004f3e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	3348      	adds	r3, #72	; 0x48
 8004f1c:	443b      	add	r3, r7
 8004f1e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d807      	bhi.n	8004f38 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	3348      	adds	r3, #72	; 0x48
 8004f2e:	443b      	add	r3, r7
 8004f30:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004f36:	e005      	b.n	8004f44 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d9e8      	bls.n	8004f16 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <RCC_SetFlashLatency+0xf4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 0207 	bic.w	r2, r3, #7
 8004f4c:	4911      	ldr	r1, [pc, #68]	; (8004f94 <RCC_SetFlashLatency+0xf4>)
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f54:	f7fc fece 	bl	8001cf4 <HAL_GetTick>
 8004f58:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f5a:	e008      	b.n	8004f6e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f5c:	f7fc feca 	bl	8001cf4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e007      	b.n	8004f7e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <RCC_SetFlashLatency+0xf4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d1ef      	bne.n	8004f5c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	374c      	adds	r7, #76	; 0x4c
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd90      	pop	{r4, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	08010a7c 	.word	0x08010a7c
 8004f8c:	08010a8c 	.word	0x08010a8c
 8004f90:	08010a98 	.word	0x08010a98
 8004f94:	58004000 	.word	0x58004000

08004f98 <LL_RCC_LSE_IsEnabled>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <LL_RCC_LSE_IsEnabled+0x18>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <LL_RCC_LSE_IsEnabled+0x1a>
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_RCC_LSE_IsReady>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d101      	bne.n	8004fd4 <LL_RCC_LSE_IsReady+0x18>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <LL_RCC_LSE_IsReady+0x1a>
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_MSI_EnablePLLMode>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fee:	f043 0304 	orr.w	r3, r3, #4
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_SetRFWKPClockSource>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <LL_RCC_SetSMPSClockSource>:
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f023 0203 	bic.w	r2, r3, #3
 800503c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_RCC_SetSMPSPrescaler>:
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4313      	orrs	r3, r2
 800506c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_SetUSARTClockSource>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_SetLPUARTClockSource>:
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80050ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_SetI2CClockSource>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050ea:	43db      	mvns	r3, r3
 80050ec:	401a      	ands	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_RCC_SetLPTIMClockSource>:
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	43db      	mvns	r3, r3
 8005124:	401a      	ands	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <LL_RCC_SetSAIClockSource>:
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_RCC_SetRNGClockSource>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_RCC_SetCLK48ClockSource>:
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <LL_RCC_SetUSBClockSource>:
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ffe3 	bl	8005198 <LL_RCC_SetCLK48ClockSource>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <LL_RCC_SetADCClockSource>:
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_RCC_SetRTCClockSource>:
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800521a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <LL_RCC_GetRTCClockSource>:
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_ForceBackupDomainReset>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <LL_RCC_ReleaseBackupDomainReset>:
{
 800526e:	b480      	push	{r7}
 8005270:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005286:	bf00      	nop
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_RCC_PLLSAI1_Enable>:
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800529e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a2:	6013      	str	r3, [r2, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <LL_RCC_PLLSAI1_Disable>:
{
 80052ae:	b480      	push	{r7}
 80052b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052c0:	6013      	str	r3, [r2, #0]
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_RCC_PLLSAI1_IsReady>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052de:	d101      	bne.n	80052e4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80052f8:	2300      	movs	r3, #0
 80052fa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80052fc:	2300      	movs	r3, #0
 80052fe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d034      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005314:	d021      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005316:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800531a:	d81b      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800531c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005320:	d01d      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005326:	d815      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800532c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005330:	d110      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005340:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005342:	e00d      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f94d 	bl	80055e8 <RCCEx_PLLSAI1_ConfigNP>
 800534e:	4603      	mov	r3, r0
 8005350:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005352:	e005      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	77fb      	strb	r3, [r7, #31]
        break;
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800535e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005360:	7ffb      	ldrb	r3, [r7, #31]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d105      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fee8 	bl	8005140 <LL_RCC_SetSAIClockSource>
 8005370:	e001      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005372:	7ffb      	ldrb	r3, [r7, #31]
 8005374:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537e:	2b00      	cmp	r3, #0
 8005380:	d046      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005382:	f7ff ff56 	bl	8005232 <LL_RCC_GetRTCClockSource>
 8005386:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	429a      	cmp	r2, r3
 8005390:	d03c      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005392:	f7fe fc8b 	bl	8003cac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ff30 	bl	8005206 <LL_RCC_SetRTCClockSource>
 80053a6:	e02e      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80053b2:	f7ff ff4b 	bl	800524c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80053b6:	f7ff ff5a 	bl	800526e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80053c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80053d2:	f7ff fde1 	bl	8004f98 <LL_RCC_LSE_IsEnabled>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d114      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053dc:	f7fc fc8a 	bl	8001cf4 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80053e2:	e00b      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f7fc fc86 	bl	8001cf4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d902      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	77fb      	strb	r3, [r7, #31]
              break;
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80053fc:	f7ff fdde 	bl	8004fbc <LL_RCC_LSE_IsReady>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d1ee      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005406:	7ffb      	ldrb	r3, [r7, #31]
 8005408:	77bb      	strb	r3, [r7, #30]
 800540a:	e001      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	7ffb      	ldrb	r3, [r7, #31]
 800540e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fe2a 	bl	800507a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fe35 	bl	80050a6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fe5d 	bl	800510c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe52 	bl	800510c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fe2a 	bl	80050d2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fe1f 	bl	80050d2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fe8d 	bl	80051c4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d107      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054cc:	d10b      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f8e3 	bl	800569e <RCCEx_PLLSAI1_ConfigNQ>
 80054d8:	4603      	mov	r3, r0
 80054da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80054dc:	7ffb      	ldrb	r3, [r7, #31]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
 80054e4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d008      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005504:	d003      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fe2a 	bl	800516c <LL_RCC_SetRNGClockSource>
 8005518:	e00a      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	2000      	movs	r0, #0
 8005526:	f7ff fe21 	bl	800516c <LL_RCC_SetRNGClockSource>
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fe34 	bl	8005198 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005538:	d107      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005548:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	2b00      	cmp	r3, #0
 8005554:	d022      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fe3d 	bl	80051da <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005568:	d107      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005582:	d10b      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f8e3 	bl	8005754 <RCCEx_PLLSAI1_ConfigNR>
 800558e:	4603      	mov	r3, r0
 8005590:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005592:	7ffb      	ldrb	r3, [r7, #31]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005598:	7ffb      	ldrb	r3, [r7, #31]
 800559a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fd26 	bl	8004ffe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fd45 	bl	8005052 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fd2c 	bl	800502a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80055d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80055e0:	f7ff fcfe 	bl	8004fe0 <LL_RCC_MSI_EnablePLLMode>
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055f4:	f7ff fe5b 	bl	80052ae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055f8:	f7fc fb7c 	bl	8001cf4 <HAL_GetTick>
 80055fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055fe:	e009      	b.n	8005614 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005600:	f7fc fb78 	bl	8001cf4 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d902      	bls.n	8005614 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	73fb      	strb	r3, [r7, #15]
      break;
 8005612:	e004      	b.n	800561e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005614:	f7ff fe5a 	bl	80052cc <LL_RCC_PLLSAI1_IsReady>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d137      	bne.n	8005694 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005638:	4313      	orrs	r3, r2
 800563a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005652:	f7ff fe1d 	bl	8005290 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005656:	f7fc fb4d 	bl	8001cf4 <HAL_GetTick>
 800565a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800565c:	e009      	b.n	8005672 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800565e:	f7fc fb49 	bl	8001cf4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d902      	bls.n	8005672 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	73fb      	strb	r3, [r7, #15]
        break;
 8005670:	e004      	b.n	800567c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005672:	f7ff fe2b 	bl	80052cc <LL_RCC_PLLSAI1_IsReady>
 8005676:	4603      	mov	r3, r0
 8005678:	2b01      	cmp	r3, #1
 800567a:	d1f0      	bne.n	800565e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d108      	bne.n	8005694 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005690:	4313      	orrs	r3, r2
 8005692:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056aa:	f7ff fe00 	bl	80052ae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056ae:	f7fc fb21 	bl	8001cf4 <HAL_GetTick>
 80056b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056b4:	e009      	b.n	80056ca <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b6:	f7fc fb1d 	bl	8001cf4 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d902      	bls.n	80056ca <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e004      	b.n	80056d4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056ca:	f7ff fdff 	bl	80052cc <LL_RCC_PLLSAI1_IsReady>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d137      	bne.n	800574a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005704:	4313      	orrs	r3, r2
 8005706:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005708:	f7ff fdc2 	bl	8005290 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570c:	f7fc faf2 	bl	8001cf4 <HAL_GetTick>
 8005710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005712:	e009      	b.n	8005728 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005714:	f7fc faee 	bl	8001cf4 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d902      	bls.n	8005728 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	73fb      	strb	r3, [r7, #15]
        break;
 8005726:	e004      	b.n	8005732 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005728:	f7ff fdd0 	bl	80052cc <LL_RCC_PLLSAI1_IsReady>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d1f0      	bne.n	8005714 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d108      	bne.n	800574a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005746:	4313      	orrs	r3, r2
 8005748:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005760:	f7ff fda5 	bl	80052ae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005764:	f7fc fac6 	bl	8001cf4 <HAL_GetTick>
 8005768:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800576a:	e009      	b.n	8005780 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800576c:	f7fc fac2 	bl	8001cf4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	73fb      	strb	r3, [r7, #15]
      break;
 800577e:	e004      	b.n	800578a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005780:	f7ff fda4 	bl	80052cc <LL_RCC_PLLSAI1_IsReady>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d137      	bne.n	8005800 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a4:	4313      	orrs	r3, r2
 80057a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ba:	4313      	orrs	r3, r2
 80057bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057be:	f7ff fd67 	bl	8005290 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fc fa97 	bl	8001cf4 <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057c8:	e009      	b.n	80057de <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ca:	f7fc fa93 	bl	8001cf4 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d902      	bls.n	80057de <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	73fb      	strb	r3, [r7, #15]
        break;
 80057dc:	e004      	b.n	80057e8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057de:	f7ff fd75 	bl	80052cc <LL_RCC_PLLSAI1_IsReady>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d1f0      	bne.n	80057ca <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d108      	bne.n	8005800 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057fc:	4313      	orrs	r3, r2
 80057fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e049      	b.n	80058b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7fc f83f 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	4619      	mov	r1, r3
 8005848:	4610      	mov	r0, r2
 800584a:	f000 fa93 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e036      	b.n	800593e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a17      	ldr	r2, [pc, #92]	; (800594c <HAL_TIM_Base_Start_IT+0x94>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x44>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d115      	bne.n	8005928 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_TIM_Base_Start_IT+0x98>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b06      	cmp	r3, #6
 800590c:	d015      	beq.n	800593a <HAL_TIM_Base_Start_IT+0x82>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d011      	beq.n	800593a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	e008      	b.n	800593a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e000      	b.n	800593c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40012c00 	.word	0x40012c00
 8005950:	00010007 	.word	0x00010007

08005954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d122      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b02      	cmp	r3, #2
 8005976:	d11b      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0202 	mvn.w	r2, #2
 8005980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f9ce 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9c0 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f9d1 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d122      	bne.n	8005a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d11b      	bne.n	8005a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0204 	mvn.w	r2, #4
 80059d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9a4 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 80059f0:	e005      	b.n	80059fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f996 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f9a7 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0208 	mvn.w	r2, #8
 8005a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f97a 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f96c 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f97d 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d122      	bne.n	8005aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0210 	mvn.w	r2, #16
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2208      	movs	r2, #8
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f950 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f942 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f953 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d10e      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d107      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0201 	mvn.w	r2, #1
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb fe46 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d10e      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	2b80      	cmp	r3, #128	; 0x80
 8005af2:	d107      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faa2 	bl	8006048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b12:	d10e      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa95 	bl	800605c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d10e      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d107      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f901 	bl	8005d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d10e      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d107      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f06f 0220 	mvn.w	r2, #32
 8005b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa55 	bl	8006034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_ConfigClockSource+0x1c>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e0b6      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x18a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005bcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bea:	d03e      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0xd8>
 8005bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf0:	f200 8087 	bhi.w	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf8:	f000 8086 	beq.w	8005d08 <HAL_TIM_ConfigClockSource+0x176>
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c00:	d87f      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c02:	2b70      	cmp	r3, #112	; 0x70
 8005c04:	d01a      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0xaa>
 8005c06:	2b70      	cmp	r3, #112	; 0x70
 8005c08:	d87b      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c0a:	2b60      	cmp	r3, #96	; 0x60
 8005c0c:	d050      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x11e>
 8005c0e:	2b60      	cmp	r3, #96	; 0x60
 8005c10:	d877      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c12:	2b50      	cmp	r3, #80	; 0x50
 8005c14:	d03c      	beq.n	8005c90 <HAL_TIM_ConfigClockSource+0xfe>
 8005c16:	2b50      	cmp	r3, #80	; 0x50
 8005c18:	d873      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d058      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0x13e>
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d86f      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c22:	2b30      	cmp	r3, #48	; 0x30
 8005c24:	d064      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8005c26:	2b30      	cmp	r3, #48	; 0x30
 8005c28:	d86b      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d060      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d867      	bhi.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d05c      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d05a      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x15e>
 8005c3a:	e062      	b.n	8005d02 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6899      	ldr	r1, [r3, #8]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f000 f972 	bl	8005f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	609a      	str	r2, [r3, #8]
      break;
 8005c68:	e04f      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6899      	ldr	r1, [r3, #8]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f000 f95b 	bl	8005f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8c:	609a      	str	r2, [r3, #8]
      break;
 8005c8e:	e03c      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f000 f8cd 	bl	8005e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2150      	movs	r1, #80	; 0x50
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 f926 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005cae:	e02c      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f000 f8ec 	bl	8005e9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2160      	movs	r1, #96	; 0x60
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f916 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005cce:	e01c      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6859      	ldr	r1, [r3, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f000 f8ad 	bl	8005e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2140      	movs	r1, #64	; 0x40
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f906 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005cee:	e00c      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f000 f8fd 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005d00:	e003      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
      break;
 8005d06:	e000      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <TIM_Base_SetConfig+0xbc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x20>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <TIM_Base_SetConfig+0xbc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00b      	beq.n	8005dc6 <TIM_Base_SetConfig+0x52>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d007      	beq.n	8005dc6 <TIM_Base_SetConfig+0x52>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <TIM_Base_SetConfig+0xc0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d003      	beq.n	8005dc6 <TIM_Base_SetConfig+0x52>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <TIM_Base_SetConfig+0xc4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d108      	bne.n	8005dd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <TIM_Base_SetConfig+0xbc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d007      	beq.n	8005e14 <TIM_Base_SetConfig+0xa0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a0b      	ldr	r2, [pc, #44]	; (8005e34 <TIM_Base_SetConfig+0xc0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_Base_SetConfig+0xa0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <TIM_Base_SetConfig+0xc4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d103      	bne.n	8005e1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	615a      	str	r2, [r3, #20]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f023 030a 	bic.w	r3, r3, #10
 8005e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f023 0210 	bic.w	r2, r3, #16
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	031b      	lsls	r3, r3, #12
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f043 0307 	orr.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e04a      	b.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d10c      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	4313      	orrs	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00

08006034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006080:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006084:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	b29a      	uxth	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060a6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80060aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	4013      	ands	r3, r2
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80060d4:	b084      	sub	sp, #16
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	f107 0014 	add.w	r0, r7, #20
 80060e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	b004      	add	sp, #16
 8006114:	4770      	bx	lr
	...

08006118 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006118:	b480      	push	{r7}
 800611a:	b09d      	sub	sp, #116	; 0x74
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	78db      	ldrb	r3, [r3, #3]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d81f      	bhi.n	800618a <USB_ActivateEndpoint+0x72>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <USB_ActivateEndpoint+0x38>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006161 	.word	0x08006161
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006193 	.word	0x08006193
 800615c:	0800616f 	.word	0x0800616f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006168:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800616c:	e012      	b.n	8006194 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800616e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006172:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006176:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800617a:	e00b      	b.n	8006194 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800617c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006184:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006188:	e004      	b.n	8006194 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006190:	e000      	b.n	8006194 <USB_ActivateEndpoint+0x7c>
      break;
 8006192:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	b21a      	sxth	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b21b      	sxth	r3, r3
 80061da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	7b1b      	ldrb	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 8178 	bne.w	80064fa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8084 	beq.w	800631c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4413      	add	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	00da      	lsls	r2, r3, #3
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	88db      	ldrh	r3, [r3, #6]
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	b29b      	uxth	r3, r3
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	827b      	strh	r3, [r7, #18]
 8006256:	8a7b      	ldrh	r3, [r7, #18]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01b      	beq.n	8006298 <USB_ActivateEndpoint+0x180>
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	823b      	strh	r3, [r7, #16]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	8a3b      	ldrh	r3, [r7, #16]
 8006284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006294:	b29b      	uxth	r3, r3
 8006296:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	78db      	ldrb	r3, [r3, #3]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d020      	beq.n	80062e2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b6:	81bb      	strh	r3, [r7, #12]
 80062b8:	89bb      	ldrh	r3, [r7, #12]
 80062ba:	f083 0320 	eor.w	r3, r3, #32
 80062be:	81bb      	strh	r3, [r7, #12]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	89bb      	ldrh	r3, [r7, #12]
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
 80062e0:	e2d5      	b.n	800688e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f8:	81fb      	strh	r3, [r7, #14]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	89fb      	ldrh	r3, [r7, #14]
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
 800631a:	e2b8      	b.n	800688e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	4413      	add	r3, r2
 800632e:	633b      	str	r3, [r7, #48]	; 0x30
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	00da      	lsls	r2, r3, #3
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	4413      	add	r3, r2
 800633a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	88db      	ldrh	r3, [r3, #6]
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	4413      	add	r3, r2
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	00da      	lsls	r2, r3, #3
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	4413      	add	r3, r2
 800636e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637e:	b29a      	uxth	r2, r3
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b3e      	cmp	r3, #62	; 0x3e
 800638a:	d91d      	bls.n	80063c8 <USB_ActivateEndpoint+0x2b0>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	66bb      	str	r3, [r7, #104]	; 0x68
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <USB_ActivateEndpoint+0x28e>
 80063a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063a2:	3b01      	subs	r3, #1
 80063a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e026      	b.n	8006416 <USB_ActivateEndpoint+0x2fe>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <USB_ActivateEndpoint+0x2ce>
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063de:	b29a      	uxth	r2, r3
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e017      	b.n	8006416 <USB_ActivateEndpoint+0x2fe>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <USB_ActivateEndpoint+0x2e8>
 80063fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063fc:	3301      	adds	r3, #1
 80063fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006408:	b29b      	uxth	r3, r3
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	b29b      	uxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b29a      	uxth	r2, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	847b      	strh	r3, [r7, #34]	; 0x22
 8006424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01b      	beq.n	8006466 <USB_ActivateEndpoint+0x34e>
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006444:	843b      	strh	r3, [r7, #32]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	441a      	add	r2, r3
 8006450:	8c3b      	ldrh	r3, [r7, #32]
 8006452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800645e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d124      	bne.n	80064b8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	83bb      	strh	r3, [r7, #28]
 8006486:	8bbb      	ldrh	r3, [r7, #28]
 8006488:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800648c:	83bb      	strh	r3, [r7, #28]
 800648e:	8bbb      	ldrh	r3, [r7, #28]
 8006490:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006494:	83bb      	strh	r3, [r7, #28]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	8bbb      	ldrh	r3, [r7, #28]
 80064a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	8013      	strh	r3, [r2, #0]
 80064b6:	e1ea      	b.n	800688e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	83fb      	strh	r3, [r7, #30]
 80064d0:	8bfb      	ldrh	r3, [r7, #30]
 80064d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064d6:	83fb      	strh	r3, [r7, #30]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	8bfb      	ldrh	r3, [r7, #30]
 80064e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	8013      	strh	r3, [r2, #0]
 80064f8:	e1c9      	b.n	800688e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	78db      	ldrb	r3, [r3, #3]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d11e      	bne.n	8006540 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006518:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006532:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]
 800653e:	e01d      	b.n	800657c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658c:	4413      	add	r3, r2
 800658e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	00da      	lsls	r2, r3, #3
 8006596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006598:	4413      	add	r3, r2
 800659a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659e:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	891b      	ldrh	r3, [r3, #8]
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	657b      	str	r3, [r7, #84]	; 0x54
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c0:	4413      	add	r3, r2
 80065c2:	657b      	str	r3, [r7, #84]	; 0x54
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	00da      	lsls	r2, r3, #3
 80065ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d2:	653b      	str	r3, [r7, #80]	; 0x50
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	895b      	ldrh	r3, [r3, #10]
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	b29b      	uxth	r3, r3
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f040 8093 	bne.w	8006714 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80065fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01b      	beq.n	8006642 <USB_ActivateEndpoint+0x52a>
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006620:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006650:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01b      	beq.n	8006692 <USB_ActivateEndpoint+0x57a>
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80066aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80066b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	441a      	add	r2, r3
 80066c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]
 8006712:	e0bc      	b.n	800688e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006724:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01d      	beq.n	800676c <USB_ActivateEndpoint+0x654>
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800677c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01d      	beq.n	80067c4 <USB_ActivateEndpoint+0x6ac>
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	78db      	ldrb	r3, [r3, #3]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d024      	beq.n	8006816 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067ea:	f083 0320 	eor.w	r3, r3, #32
 80067ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
 8006814:	e01d      	b.n	8006852 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006868:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800687a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	b29b      	uxth	r3, r3
 800688c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800688e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006892:	4618      	mov	r0, r3
 8006894:	3774      	adds	r7, #116	; 0x74
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b08d      	sub	sp, #52	; 0x34
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	7b1b      	ldrb	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 808e 	bne.w	80069d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d044      	beq.n	8006946 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	81bb      	strh	r3, [r7, #12]
 80068ca:	89bb      	ldrh	r3, [r7, #12]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01b      	beq.n	800690c <USB_DeactivateEndpoint+0x6c>
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	817b      	strh	r3, [r7, #10]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	897b      	ldrh	r3, [r7, #10]
 80068f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006908:	b29b      	uxth	r3, r3
 800690a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	813b      	strh	r3, [r7, #8]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	893b      	ldrh	r3, [r7, #8]
 8006930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006940:	b29b      	uxth	r3, r3
 8006942:	8013      	strh	r3, [r2, #0]
 8006944:	e192      	b.n	8006c6c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	827b      	strh	r3, [r7, #18]
 8006954:	8a7b      	ldrh	r3, [r7, #18]
 8006956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01b      	beq.n	8006996 <USB_DeactivateEndpoint+0xf6>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	823b      	strh	r3, [r7, #16]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	8a3b      	ldrh	r3, [r7, #16]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	81fb      	strh	r3, [r7, #14]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	89fb      	ldrh	r3, [r7, #14]
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]
 80069ce:	e14d      	b.n	8006c6c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 80a5 	bne.w	8006b24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	843b      	strh	r3, [r7, #32]
 80069e8:	8c3b      	ldrh	r3, [r7, #32]
 80069ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01b      	beq.n	8006a2a <USB_DeactivateEndpoint+0x18a>
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a08:	83fb      	strh	r3, [r7, #30]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	8bfb      	ldrh	r3, [r7, #30]
 8006a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	83bb      	strh	r3, [r7, #28]
 8006a38:	8bbb      	ldrh	r3, [r7, #28]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01b      	beq.n	8006a7a <USB_DeactivateEndpoint+0x1da>
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a58:	837b      	strh	r3, [r7, #26]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	8b7b      	ldrh	r3, [r7, #26]
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a90:	833b      	strh	r3, [r7, #24]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	8b3b      	ldrh	r3, [r7, #24]
 8006a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	82fb      	strh	r3, [r7, #22]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8afb      	ldrh	r3, [r7, #22]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b00:	82bb      	strh	r3, [r7, #20]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	8abb      	ldrh	r3, [r7, #20]
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]
 8006b22:	e0a3      	b.n	8006c6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01b      	beq.n	8006b74 <USB_DeactivateEndpoint+0x2d4>
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <USB_DeactivateEndpoint+0x324>
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3734      	adds	r7, #52	; 0x34
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b0c2      	sub	sp, #264	; 0x108
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c88:	6018      	str	r0, [r3, #0]
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c92:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	f040 86b7 	bne.w	8007a14 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d908      	bls.n	8006cd4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cd2:	e007      	b.n	8006ce4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	7b1b      	ldrb	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d13a      	bne.n	8006d6a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6959      	ldr	r1, [r3, #20]
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	88da      	ldrh	r2, [r3, #6]
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	f001 fc98 	bl	8008650 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4413      	add	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	00da      	lsls	r2, r3, #3
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	f000 be1f 	b.w	80079a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	f040 8462 	bne.w	8007640 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a1a      	ldr	r2, [r3, #32]
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	f240 83df 	bls.w	8007558 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6a1a      	ldr	r2, [r3, #32]
 8006e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e06:	1ad2      	subs	r2, r2, r3
 8006e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 81c7 	beq.w	80071ca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	633b      	str	r3, [r7, #48]	; 0x30
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d177      	bne.n	8006f48 <USB_EPStartXfer+0x2ce>
 8006e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	4413      	add	r3, r2
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	00da      	lsls	r2, r3, #3
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eaa:	d921      	bls.n	8006ef0 <USB_EPStartXfer+0x276>
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <USB_EPStartXfer+0x252>
 8006ec2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e050      	b.n	8006f92 <USB_EPStartXfer+0x318>
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <USB_EPStartXfer+0x294>
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e041      	b.n	8006f92 <USB_EPStartXfer+0x318>
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <USB_EPStartXfer+0x2b4>
 8006f24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	029b      	lsls	r3, r3, #10
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e024      	b.n	8006f92 <USB_EPStartXfer+0x318>
 8006f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11c      	bne.n	8006f92 <USB_EPStartXfer+0x318>
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	4413      	add	r3, r2
 8006f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	00da      	lsls	r2, r3, #3
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	4413      	add	r3, r2
 8006f82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	895b      	ldrh	r3, [r3, #10]
 8006f9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6959      	ldr	r1, [r3, #20]
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fc0:	6800      	ldr	r0, [r0, #0]
 8006fc2:	f001 fb45 	bl	8008650 <USB_WritePMA>
            ep->xfer_buff += len;
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	441a      	add	r2, r3
 8006fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d90f      	bls.n	8007020 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	621a      	str	r2, [r3, #32]
 800701e:	e00e      	b.n	800703e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2200      	movs	r2, #0
 800703c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d177      	bne.n	800713e <USB_EPStartXfer+0x4c4>
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007068:	b29b      	uxth	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	4413      	add	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	00da      	lsls	r2, r3, #3
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	4413      	add	r3, r2
 8007084:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007094:	b29a      	uxth	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	2b3e      	cmp	r3, #62	; 0x3e
 80070a0:	d921      	bls.n	80070e6 <USB_EPStartXfer+0x46c>
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <USB_EPStartXfer+0x448>
 80070b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070bc:	3b01      	subs	r3, #1
 80070be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	029b      	lsls	r3, r3, #10
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070de:	b29a      	uxth	r2, r3
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e056      	b.n	8007194 <USB_EPStartXfer+0x51a>
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <USB_EPStartXfer+0x48a>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e047      	b.n	8007194 <USB_EPStartXfer+0x51a>
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <USB_EPStartXfer+0x4aa>
 800711a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711e:	3301      	adds	r3, #1
 8007120:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29a      	uxth	r2, r3
 800712a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712e:	b29b      	uxth	r3, r3
 8007130:	029b      	lsls	r3, r3, #10
 8007132:	b29b      	uxth	r3, r3
 8007134:	4313      	orrs	r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	e02a      	b.n	8007194 <USB_EPStartXfer+0x51a>
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d122      	bne.n	8007194 <USB_EPStartXfer+0x51a>
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007168:	b29b      	uxth	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	4413      	add	r3, r2
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	4413      	add	r3, r2
 8007184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718e:	b29a      	uxth	r2, r3
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	891b      	ldrh	r3, [r3, #8]
 80071a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6959      	ldr	r1, [r3, #20]
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071c2:	6800      	ldr	r0, [r0, #0]
 80071c4:	f001 fa44 	bl	8008650 <USB_WritePMA>
 80071c8:	e3ee      	b.n	80079a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d177      	bne.n	80072ca <USB_EPStartXfer+0x650>
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fa:	4413      	add	r3, r2
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00da      	lsls	r2, r3, #3
 800720c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800720e:	4413      	add	r3, r2
 8007210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007214:	647b      	str	r3, [r7, #68]	; 0x44
 8007216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007220:	b29a      	uxth	r2, r3
 8007222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722a:	2b3e      	cmp	r3, #62	; 0x3e
 800722c:	d921      	bls.n	8007272 <USB_EPStartXfer+0x5f8>
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <USB_EPStartXfer+0x5d4>
 8007244:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007248:	3b01      	subs	r3, #1
 800724a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800724e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007258:	b29b      	uxth	r3, r3
 800725a:	029b      	lsls	r3, r3, #10
 800725c:	b29b      	uxth	r3, r3
 800725e:	4313      	orrs	r3, r2
 8007260:	b29b      	uxth	r3, r3
 8007262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726a:	b29a      	uxth	r2, r3
 800726c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	e056      	b.n	8007320 <USB_EPStartXfer+0x6a6>
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <USB_EPStartXfer+0x616>
 800727a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	e047      	b.n	8007320 <USB_EPStartXfer+0x6a6>
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <USB_EPStartXfer+0x636>
 80072a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072aa:	3301      	adds	r3, #1
 80072ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	029b      	lsls	r3, r3, #10
 80072be:	b29b      	uxth	r3, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e02a      	b.n	8007320 <USB_EPStartXfer+0x6a6>
 80072ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d122      	bne.n	8007320 <USB_EPStartXfer+0x6a6>
 80072da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	653b      	str	r3, [r7, #80]	; 0x50
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072fa:	4413      	add	r3, r2
 80072fc:	653b      	str	r3, [r7, #80]	; 0x50
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	00da      	lsls	r2, r3, #3
 800730c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800730e:	4413      	add	r3, r2
 8007310:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731a:	b29a      	uxth	r2, r3
 800731c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	891b      	ldrh	r3, [r3, #8]
 800732c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6959      	ldr	r1, [r3, #20]
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007340:	b29b      	uxth	r3, r3
 8007342:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007346:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800734a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800734e:	6800      	ldr	r0, [r0, #0]
 8007350:	f001 f97e 	bl	8008650 <USB_WritePMA>
            ep->xfer_buff += len;
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007364:	441a      	add	r2, r3
 8007366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d90f      	bls.n	80073ae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	621a      	str	r2, [r3, #32]
 80073ac:	e00e      	b.n	80073cc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2200      	movs	r2, #0
 80073ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	643b      	str	r3, [r7, #64]	; 0x40
 80073d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d177      	bne.n	80074d8 <USB_EPStartXfer+0x85e>
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007402:	b29b      	uxth	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	4413      	add	r3, r2
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00da      	lsls	r2, r3, #3
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	4413      	add	r3, r2
 800741e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800742e:	b29a      	uxth	r2, r3
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007438:	2b3e      	cmp	r3, #62	; 0x3e
 800743a:	d921      	bls.n	8007480 <USB_EPStartXfer+0x806>
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <USB_EPStartXfer+0x7e2>
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007456:	3b01      	subs	r3, #1
 8007458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29a      	uxth	r2, r3
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007466:	b29b      	uxth	r3, r3
 8007468:	029b      	lsls	r3, r3, #10
 800746a:	b29b      	uxth	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	b29b      	uxth	r3, r3
 8007470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007478:	b29a      	uxth	r2, r3
 800747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e050      	b.n	8007522 <USB_EPStartXfer+0x8a8>
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <USB_EPStartXfer+0x824>
 8007488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007496:	b29a      	uxth	r2, r3
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	e041      	b.n	8007522 <USB_EPStartXfer+0x8a8>
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <USB_EPStartXfer+0x844>
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	029b      	lsls	r3, r3, #10
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4313      	orrs	r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e024      	b.n	8007522 <USB_EPStartXfer+0x8a8>
 80074d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d11c      	bne.n	8007522 <USB_EPStartXfer+0x8a8>
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fc:	4413      	add	r3, r2
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	00da      	lsls	r2, r3, #3
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	4413      	add	r3, r2
 8007512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751c:	b29a      	uxth	r2, r3
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	895b      	ldrh	r3, [r3, #10]
 800752e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6959      	ldr	r1, [r3, #20]
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007542:	b29b      	uxth	r3, r3
 8007544:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007548:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800754c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007550:	6800      	ldr	r0, [r0, #0]
 8007552:	f001 f87d 	bl	8008650 <USB_WritePMA>
 8007556:	e227      	b.n	80079a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075e4:	4413      	add	r3, r2
 80075e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	00da      	lsls	r2, r3, #3
 80075f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f8:	4413      	add	r3, r2
 80075fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007604:	b29a      	uxth	r2, r3
 8007606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007608:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800760a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	891b      	ldrh	r3, [r3, #8]
 8007616:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800761a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6959      	ldr	r1, [r3, #20]
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	b29b      	uxth	r3, r3
 800762c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007630:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007634:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007638:	6800      	ldr	r0, [r0, #0]
 800763a:	f001 f809 	bl	8008650 <USB_WritePMA>
 800763e:	e1b3      	b.n	80079a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6a1a      	ldr	r2, [r3, #32]
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007650:	1ad2      	subs	r2, r2, r3
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800765e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80c6 	beq.w	8007812 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	673b      	str	r3, [r7, #112]	; 0x70
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d177      	bne.n	8007792 <USB_EPStartXfer+0xb18>
 80076a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80076ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076c2:	4413      	add	r3, r2
 80076c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	00da      	lsls	r2, r3, #3
 80076d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076d6:	4413      	add	r3, r2
 80076d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076dc:	667b      	str	r3, [r7, #100]	; 0x64
 80076de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	2b3e      	cmp	r3, #62	; 0x3e
 80076f4:	d921      	bls.n	800773a <USB_EPStartXfer+0xac0>
 80076f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <USB_EPStartXfer+0xa9c>
 800770c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007710:	3b01      	subs	r3, #1
 8007712:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007720:	b29b      	uxth	r3, r3
 8007722:	029b      	lsls	r3, r3, #10
 8007724:	b29b      	uxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b29b      	uxth	r3, r3
 800772a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007732:	b29a      	uxth	r2, r3
 8007734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	e050      	b.n	80077dc <USB_EPStartXfer+0xb62>
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <USB_EPStartXfer+0xade>
 8007742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	e041      	b.n	80077dc <USB_EPStartXfer+0xb62>
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <USB_EPStartXfer+0xafe>
 800776e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007772:	3301      	adds	r3, #1
 8007774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007782:	b29b      	uxth	r3, r3
 8007784:	029b      	lsls	r3, r3, #10
 8007786:	b29b      	uxth	r3, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	b29a      	uxth	r2, r3
 800778c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	e024      	b.n	80077dc <USB_EPStartXfer+0xb62>
 8007792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d11c      	bne.n	80077dc <USB_EPStartXfer+0xb62>
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	461a      	mov	r2, r3
 80077b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077b6:	4413      	add	r3, r2
 80077b8:	673b      	str	r3, [r7, #112]	; 0x70
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	00da      	lsls	r2, r3, #3
 80077c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ca:	4413      	add	r3, r2
 80077cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	895b      	ldrh	r3, [r3, #10]
 80077e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6959      	ldr	r1, [r3, #20]
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007802:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007806:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	f000 ff20 	bl	8008650 <USB_WritePMA>
 8007810:	e0ca      	b.n	80079a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d177      	bne.n	8007912 <USB_EPStartXfer+0xc98>
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783c:	b29b      	uxth	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007842:	4413      	add	r3, r2
 8007844:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	00da      	lsls	r2, r3, #3
 8007854:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007856:	4413      	add	r3, r2
 8007858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800785c:	67bb      	str	r3, [r7, #120]	; 0x78
 800785e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007868:	b29a      	uxth	r2, r3
 800786a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007872:	2b3e      	cmp	r3, #62	; 0x3e
 8007874:	d921      	bls.n	80078ba <USB_EPStartXfer+0xc40>
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <USB_EPStartXfer+0xc1c>
 800788c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007890:	3b01      	subs	r3, #1
 8007892:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e05c      	b.n	8007974 <USB_EPStartXfer+0xcfa>
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <USB_EPStartXfer+0xc5e>
 80078c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	e04d      	b.n	8007974 <USB_EPStartXfer+0xcfa>
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USB_EPStartXfer+0xc7e>
 80078ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078f2:	3301      	adds	r3, #1
 80078f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	b29a      	uxth	r2, r3
 800790c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	e030      	b.n	8007974 <USB_EPStartXfer+0xcfa>
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d128      	bne.n	8007974 <USB_EPStartXfer+0xcfa>
 8007922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007946:	4413      	add	r3, r2
 8007948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00da      	lsls	r2, r3, #3
 800795a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800795e:	4413      	add	r3, r2
 8007960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	b29a      	uxth	r2, r3
 800796e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007972:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	891b      	ldrh	r3, [r3, #8]
 8007980:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6959      	ldr	r1, [r3, #20]
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007994:	b29b      	uxth	r3, r3
 8007996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800799a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800799e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079a2:	6800      	ldr	r0, [r0, #0]
 80079a4:	f000 fe54 	bl	8008650 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80079a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ce:	817b      	strh	r3, [r7, #10]
 80079d0:	897b      	ldrh	r3, [r7, #10]
 80079d2:	f083 0310 	eor.w	r3, r3, #16
 80079d6:	817b      	strh	r3, [r7, #10]
 80079d8:	897b      	ldrh	r3, [r7, #10]
 80079da:	f083 0320 	eor.w	r3, r3, #32
 80079de:	817b      	strh	r3, [r7, #10]
 80079e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	441a      	add	r2, r3
 80079fa:	897b      	ldrh	r3, [r7, #10]
 80079fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	8013      	strh	r3, [r2, #0]
 8007a10:	f000 bcde 	b.w	80083d0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	7b1b      	ldrb	r3, [r3, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 80bb 	bne.w	8007b9c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d917      	bls.n	8007a72 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	619a      	str	r2, [r3, #24]
 8007a70:	e00e      	b.n	8007a90 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	00da      	lsls	r2, r3, #3
 8007ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aee:	2b3e      	cmp	r3, #62	; 0x3e
 8007af0:	d924      	bls.n	8007b3c <USB_EPStartXfer+0xec2>
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <USB_EPStartXfer+0xe98>
 8007b08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	f000 bc10 	b.w	800835c <USB_EPStartXfer+0x16e2>
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10c      	bne.n	8007b5e <USB_EPStartXfer+0xee4>
 8007b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	e3fe      	b.n	800835c <USB_EPStartXfer+0x16e2>
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <USB_EPStartXfer+0xf04>
 8007b74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b78:	3301      	adds	r3, #1
 8007b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	029b      	lsls	r3, r3, #10
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	e3df      	b.n	800835c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	f040 8218 	bne.w	8007fde <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 809d 	bne.w	8007cfa <USB_EPStartXfer+0x1080>
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007be4:	4413      	add	r3, r2
 8007be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	00da      	lsls	r2, r3, #3
 8007bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b3e      	cmp	r3, #62	; 0x3e
 8007c28:	d92b      	bls.n	8007c82 <USB_EPStartXfer+0x1008>
 8007c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d104      	bne.n	8007c5a <USB_EPStartXfer+0xfe0>
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c54:	3b01      	subs	r3, #1
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	029b      	lsls	r3, r3, #10
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e070      	b.n	8007d64 <USB_EPStartXfer+0x10ea>
 8007c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <USB_EPStartXfer+0x1032>
 8007c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	e05b      	b.n	8007d64 <USB_EPStartXfer+0x10ea>
 8007cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <USB_EPStartXfer+0x1062>
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	029b      	lsls	r3, r3, #10
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	e034      	b.n	8007d64 <USB_EPStartXfer+0x10ea>
 8007cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d12c      	bne.n	8007d64 <USB_EPStartXfer+0x10ea>
 8007d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d2e:	4413      	add	r3, r2
 8007d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	00da      	lsls	r2, r3, #3
 8007d42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d46:	4413      	add	r3, r2
 8007d48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f040 809d 	bne.w	8007ebe <USB_EPStartXfer+0x1244>
 8007d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da8:	4413      	add	r3, r2
 8007daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	00da      	lsls	r2, r3, #3
 8007dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b3e      	cmp	r3, #62	; 0x3e
 8007dec:	d92b      	bls.n	8007e46 <USB_EPStartXfer+0x11cc>
 8007dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <USB_EPStartXfer+0x11a4>
 8007e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	029b      	lsls	r3, r3, #10
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e069      	b.n	8007f1a <USB_EPStartXfer+0x12a0>
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10c      	bne.n	8007e70 <USB_EPStartXfer+0x11f6>
 8007e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	e054      	b.n	8007f1a <USB_EPStartXfer+0x12a0>
 8007e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <USB_EPStartXfer+0x1226>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	029b      	lsls	r3, r3, #10
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eba:	801a      	strh	r2, [r3, #0]
 8007ebc:	e02d      	b.n	8007f1a <USB_EPStartXfer+0x12a0>
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d125      	bne.n	8007f1a <USB_EPStartXfer+0x12a0>
 8007ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	00da      	lsls	r2, r3, #3
 8007ef8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007efc:	4413      	add	r3, r2
 8007efe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f18:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8218 	beq.w	800835c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <USB_EPStartXfer+0x12ea>
 8007f58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10d      	bne.n	8007f80 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 81f5 	bne.w	800835c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 81ee 	bne.w	800835c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	441a      	add	r2, r3
 8007fc4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	8013      	strh	r3, [r2, #0]
 8007fdc:	e1be      	b.n	800835c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	78db      	ldrb	r3, [r3, #3]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	f040 81b4 	bne.w	8008358 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699a      	ldr	r2, [r3, #24]
 8007ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	d917      	bls.n	800803c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800800c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800801c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	1ad2      	subs	r2, r2, r3
 800802e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	619a      	str	r2, [r3, #24]
 800803a:	e00e      	b.n	800805a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800803c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800804c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2200      	movs	r2, #0
 8008058:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800805a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 8085 	bne.w	8008176 <USB_EPStartXfer+0x14fc>
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800807a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800807e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008088:	b29b      	uxth	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008090:	4413      	add	r3, r2
 8008092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	00da      	lsls	r2, r3, #3
 80080a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ca:	2b3e      	cmp	r3, #62	; 0x3e
 80080cc:	d923      	bls.n	8008116 <USB_EPStartXfer+0x149c>
 80080ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <USB_EPStartXfer+0x1474>
 80080e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e8:	3b01      	subs	r3, #1
 80080ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	029b      	lsls	r3, r3, #10
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	b29b      	uxth	r3, r3
 8008104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810c:	b29a      	uxth	r2, r3
 800810e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008112:	801a      	strh	r2, [r3, #0]
 8008114:	e060      	b.n	80081d8 <USB_EPStartXfer+0x155e>
 8008116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10c      	bne.n	8008138 <USB_EPStartXfer+0x14be>
 800811e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812e:	b29a      	uxth	r2, r3
 8008130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	e04f      	b.n	80081d8 <USB_EPStartXfer+0x155e>
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <USB_EPStartXfer+0x14de>
 800814e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008152:	3301      	adds	r3, #1
 8008154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29a      	uxth	r2, r3
 8008160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008164:	b29b      	uxth	r3, r3
 8008166:	029b      	lsls	r3, r3, #10
 8008168:	b29b      	uxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	b29a      	uxth	r2, r3
 800816e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	e030      	b.n	80081d8 <USB_EPStartXfer+0x155e>
 8008176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d128      	bne.n	80081d8 <USB_EPStartXfer+0x155e>
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081aa:	4413      	add	r3, r2
 80081ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	00da      	lsls	r2, r3, #3
 80081be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c2:	4413      	add	r3, r2
 80081c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8085 	bne.w	8008302 <USB_EPStartXfer+0x1688>
 80081f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008214:	b29b      	uxth	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800821c:	4413      	add	r3, r2
 800821e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	00da      	lsls	r2, r3, #3
 8008230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008234:	4413      	add	r3, r2
 8008236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800823a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800823e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008256:	2b3e      	cmp	r3, #62	; 0x3e
 8008258:	d923      	bls.n	80082a2 <USB_EPStartXfer+0x1628>
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	f003 031f 	and.w	r3, r3, #31
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <USB_EPStartXfer+0x1600>
 8008270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008274:	3b01      	subs	r3, #1
 8008276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800827a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29b      	uxth	r3, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	e05c      	b.n	800835c <USB_EPStartXfer+0x16e2>
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10c      	bne.n	80082c4 <USB_EPStartXfer+0x164a>
 80082aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	e04b      	b.n	800835c <USB_EPStartXfer+0x16e2>
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c8:	085b      	lsrs	r3, r3, #1
 80082ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <USB_EPStartXfer+0x166a>
 80082da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082de:	3301      	adds	r3, #1
 80082e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	029b      	lsls	r3, r3, #10
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082fe:	801a      	strh	r2, [r3, #0]
 8008300:	e02c      	b.n	800835c <USB_EPStartXfer+0x16e2>
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d124      	bne.n	800835c <USB_EPStartXfer+0x16e2>
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008328:	4413      	add	r3, r2
 800832a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800832e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	00da      	lsls	r2, r3, #3
 800833c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008340:	4413      	add	r3, r2
 8008342:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008346:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834e:	b29a      	uxth	r2, r3
 8008350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	e001      	b.n	800835c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e03a      	b.n	80083d2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008386:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800838a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800838e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008392:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800839a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800839e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	441a      	add	r2, r3
 80083b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d020      	beq.n	8008430 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008404:	81bb      	strh	r3, [r7, #12]
 8008406:	89bb      	ldrh	r3, [r7, #12]
 8008408:	f083 0310 	eor.w	r3, r3, #16
 800840c:	81bb      	strh	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	441a      	add	r2, r3
 8008418:	89bb      	ldrh	r3, [r7, #12]
 800841a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842a:	b29b      	uxth	r3, r3
 800842c:	8013      	strh	r3, [r2, #0]
 800842e:	e01f      	b.n	8008470 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	81fb      	strh	r3, [r7, #14]
 8008448:	89fb      	ldrh	r3, [r7, #14]
 800844a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800844e:	81fb      	strh	r3, [r7, #14]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	441a      	add	r2, r3
 800845a:	89fb      	ldrh	r3, [r7, #14]
 800845c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846c:	b29b      	uxth	r3, r3
 800846e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800847e:	b480      	push	{r7}
 8008480:	b087      	sub	sp, #28
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	7b1b      	ldrb	r3, [r3, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 809d 	bne.w	80085cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d04c      	beq.n	8008534 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	823b      	strh	r3, [r7, #16]
 80084a8:	8a3b      	ldrh	r3, [r7, #16]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01b      	beq.n	80084ea <USB_EPClearStall+0x6c>
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c8:	81fb      	strh	r3, [r7, #14]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	441a      	add	r2, r3
 80084d4:	89fb      	ldrh	r3, [r7, #14]
 80084d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d06c      	beq.n	80085cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008508:	81bb      	strh	r3, [r7, #12]
 800850a:	89bb      	ldrh	r3, [r7, #12]
 800850c:	f083 0320 	eor.w	r3, r3, #32
 8008510:	81bb      	strh	r3, [r7, #12]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	89bb      	ldrh	r3, [r7, #12]
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]
 8008532:	e04b      	b.n	80085cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	82fb      	strh	r3, [r7, #22]
 8008542:	8afb      	ldrh	r3, [r7, #22]
 8008544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01b      	beq.n	8008584 <USB_EPClearStall+0x106>
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	82bb      	strh	r3, [r7, #20]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	441a      	add	r2, r3
 800856e:	8abb      	ldrh	r3, [r7, #20]
 8008570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800857c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008580:	b29b      	uxth	r3, r3
 8008582:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859a:	827b      	strh	r3, [r7, #18]
 800859c:	8a7b      	ldrh	r3, [r7, #18]
 800859e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085a2:	827b      	strh	r3, [r7, #18]
 80085a4:	8a7b      	ldrh	r3, [r7, #18]
 80085a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085aa:	827b      	strh	r3, [r7, #18]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	441a      	add	r2, r3
 80085b6:	8a7b      	ldrh	r3, [r7, #18]
 80085b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2280      	movs	r2, #128	; 0x80
 80085f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008610:	b29b      	uxth	r3, r3
 8008612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800863e:	b29b      	uxth	r3, r3
 8008640:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008642:	68fb      	ldr	r3, [r7, #12]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008650:	b480      	push	{r7}
 8008652:	b08b      	sub	sp, #44	; 0x2c
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	460b      	mov	r3, r1
 8008660:	80fb      	strh	r3, [r7, #6]
 8008662:	4613      	mov	r3, r2
 8008664:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008666:	88bb      	ldrh	r3, [r7, #4]
 8008668:	3301      	adds	r3, #1
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008676:	88fa      	ldrh	r2, [r7, #6]
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008680:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
 8008686:	e01b      	b.n	80086c0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3301      	adds	r3, #1
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	b21a      	sxth	r2, r3
 8008698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800869c:	4313      	orrs	r3, r2
 800869e:	b21b      	sxth	r3, r3
 80086a0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	8a7a      	ldrh	r2, [r7, #18]
 80086a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	3302      	adds	r3, #2
 80086ac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	3301      	adds	r3, #1
 80086b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	3301      	adds	r3, #1
 80086b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	3b01      	subs	r3, #1
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e0      	bne.n	8008688 <USB_WritePMA+0x38>
  }
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	372c      	adds	r7, #44	; 0x2c
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b08b      	sub	sp, #44	; 0x2c
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4611      	mov	r1, r2
 80086e0:	461a      	mov	r2, r3
 80086e2:	460b      	mov	r3, r1
 80086e4:	80fb      	strh	r3, [r7, #6]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086ea:	88bb      	ldrh	r3, [r7, #4]
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008704:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
 800870a:	e018      	b.n	800873e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	3302      	adds	r3, #2
 8008718:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	b2da      	uxtb	r2, r3
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	3301      	adds	r3, #1
 8008726:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	0a1b      	lsrs	r3, r3, #8
 800872c:	b2da      	uxtb	r2, r3
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3301      	adds	r3, #1
 8008736:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	3b01      	subs	r3, #1
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e3      	bne.n	800870c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008744:	88bb      	ldrh	r3, [r7, #4]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	b29b      	uxth	r3, r3
 8008756:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	b2da      	uxtb	r2, r3
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	701a      	strb	r2, [r3, #0]
  }
}
 8008760:	bf00      	nop
 8008762:	372c      	adds	r7, #44	; 0x2c
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008778:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800877c:	f003 f81e 	bl	800b7bc <USBD_static_malloc>
 8008780:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32b0      	adds	r2, #176	; 0xb0
 8008792:	2100      	movs	r1, #0
 8008794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008798:	2302      	movs	r3, #2
 800879a:	e0d4      	b.n	8008946 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800879c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f003 f890 	bl	800b8c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	32b0      	adds	r2, #176	; 0xb0
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32b0      	adds	r2, #176	; 0xb0
 80087c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7c1b      	ldrb	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d138      	bne.n	8008846 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087d4:	4b5e      	ldr	r3, [pc, #376]	; (8008950 <USBD_CDC_Init+0x1e4>)
 80087d6:	7819      	ldrb	r1, [r3, #0]
 80087d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087dc:	2202      	movs	r2, #2
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f002 fe91 	bl	800b506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087e4:	4b5a      	ldr	r3, [pc, #360]	; (8008950 <USBD_CDC_Init+0x1e4>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	3324      	adds	r3, #36	; 0x24
 80087fa:	2201      	movs	r2, #1
 80087fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087fe:	4b55      	ldr	r3, [pc, #340]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008800:	7819      	ldrb	r1, [r3, #0]
 8008802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008806:	2202      	movs	r2, #2
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f002 fe7c 	bl	800b506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800880e:	4b51      	ldr	r3, [pc, #324]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008826:	2201      	movs	r2, #1
 8008828:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800882a:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <USBD_CDC_Init+0x1ec>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 020f 	and.w	r2, r3, #15
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	3326      	adds	r3, #38	; 0x26
 8008840:	2210      	movs	r2, #16
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e035      	b.n	80088b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008846:	4b42      	ldr	r3, [pc, #264]	; (8008950 <USBD_CDC_Init+0x1e4>)
 8008848:	7819      	ldrb	r1, [r3, #0]
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	2202      	movs	r2, #2
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 fe59 	bl	800b506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008854:	4b3e      	ldr	r3, [pc, #248]	; (8008950 <USBD_CDC_Init+0x1e4>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	2201      	movs	r2, #1
 800886c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800886e:	4b39      	ldr	r3, [pc, #228]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008870:	7819      	ldrb	r1, [r3, #0]
 8008872:	2340      	movs	r3, #64	; 0x40
 8008874:	2202      	movs	r2, #2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f002 fe45 	bl	800b506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800887c:	4b35      	ldr	r3, [pc, #212]	; (8008954 <USBD_CDC_Init+0x1e8>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 020f 	and.w	r2, r3, #15
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008894:	2201      	movs	r2, #1
 8008896:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008898:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <USBD_CDC_Init+0x1ec>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 020f 	and.w	r2, r3, #15
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	440b      	add	r3, r1
 80088ac:	3326      	adds	r3, #38	; 0x26
 80088ae:	2210      	movs	r2, #16
 80088b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088b2:	4b29      	ldr	r3, [pc, #164]	; (8008958 <USBD_CDC_Init+0x1ec>)
 80088b4:	7819      	ldrb	r1, [r3, #0]
 80088b6:	2308      	movs	r3, #8
 80088b8:	2203      	movs	r2, #3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f002 fe23 	bl	800b506 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80088c0:	4b25      	ldr	r3, [pc, #148]	; (8008958 <USBD_CDC_Init+0x1ec>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	3324      	adds	r3, #36	; 0x24
 80088d6:	2201      	movs	r2, #1
 80088d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	33b0      	adds	r3, #176	; 0xb0
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008910:	2302      	movs	r3, #2
 8008912:	e018      	b.n	8008946 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <USBD_CDC_Init+0x1e8>)
 800891e:	7819      	ldrb	r1, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f002 fedb 	bl	800b6e6 <USBD_LL_PrepareReceive>
 8008930:	e008      	b.n	8008944 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008934:	7819      	ldrb	r1, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 fed1 	bl	800b6e6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	2000467b 	.word	0x2000467b
 8008954:	2000467c 	.word	0x2000467c
 8008958:	2000467d 	.word	0x2000467d

0800895c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008968:	4b3a      	ldr	r3, [pc, #232]	; (8008a54 <USBD_CDC_DeInit+0xf8>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f002 fdef 	bl	800b552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008974:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <USBD_CDC_DeInit+0xf8>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	2200      	movs	r2, #0
 800898c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800898e:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <USBD_CDC_DeInit+0xfc>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f002 fddc 	bl	800b552 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <USBD_CDC_DeInit+0xfc>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089b2:	2200      	movs	r2, #0
 80089b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80089b6:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <USBD_CDC_DeInit+0x100>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fdc8 	bl	800b552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80089c2:	4b26      	ldr	r3, [pc, #152]	; (8008a5c <USBD_CDC_DeInit+0x100>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	f003 020f 	and.w	r2, r3, #15
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	3324      	adds	r3, #36	; 0x24
 80089d8:	2200      	movs	r2, #0
 80089da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80089dc:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <USBD_CDC_DeInit+0x100>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 020f 	and.w	r2, r3, #15
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	3326      	adds	r3, #38	; 0x26
 80089f2:	2200      	movs	r2, #0
 80089f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	32b0      	adds	r2, #176	; 0xb0
 8008a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01f      	beq.n	8008a48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	33b0      	adds	r3, #176	; 0xb0
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	32b0      	adds	r2, #176	; 0xb0
 8008a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f002 fed4 	bl	800b7d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32b0      	adds	r2, #176	; 0xb0
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	2000467b 	.word	0x2000467b
 8008a58:	2000467c 	.word	0x2000467c
 8008a5c:	2000467d 	.word	0x2000467d

08008a60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	32b0      	adds	r2, #176	; 0xb0
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e0bf      	b.n	8008c10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d050      	beq.n	8008b3e <USBD_CDC_Setup+0xde>
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	f040 80af 	bne.w	8008c00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d03a      	beq.n	8008b20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	da1b      	bge.n	8008aec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	33b0      	adds	r3, #176	; 0xb0
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008aca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	88d2      	ldrh	r2, [r2, #6]
 8008ad0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88db      	ldrh	r3, [r3, #6]
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	bf28      	it	cs
 8008ada:	2307      	movcs	r3, #7
 8008adc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	89fa      	ldrh	r2, [r7, #14]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fd21 	bl	800a52c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008aea:	e090      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785a      	ldrb	r2, [r3, #1]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	88db      	ldrh	r3, [r3, #6]
 8008afa:	2b3f      	cmp	r3, #63	; 0x3f
 8008afc:	d803      	bhi.n	8008b06 <USBD_CDC_Setup+0xa6>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	e000      	b.n	8008b08 <USBD_CDC_Setup+0xa8>
 8008b06:	2240      	movs	r2, #64	; 0x40
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b0e:	6939      	ldr	r1, [r7, #16]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008b16:	461a      	mov	r2, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 fd33 	bl	800a584 <USBD_CtlPrepareRx>
      break;
 8008b1e:	e076      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	33b0      	adds	r3, #176	; 0xb0
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	7850      	ldrb	r0, [r2, #1]
 8008b36:	2200      	movs	r2, #0
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	4798      	blx	r3
      break;
 8008b3c:	e067      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b0b      	cmp	r3, #11
 8008b44:	d851      	bhi.n	8008bea <USBD_CDC_Setup+0x18a>
 8008b46:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBD_CDC_Setup+0xec>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b7d 	.word	0x08008b7d
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008beb 	.word	0x08008beb
 8008b58:	08008beb 	.word	0x08008beb
 8008b5c:	08008beb 	.word	0x08008beb
 8008b60:	08008beb 	.word	0x08008beb
 8008b64:	08008beb 	.word	0x08008beb
 8008b68:	08008beb 	.word	0x08008beb
 8008b6c:	08008beb 	.word	0x08008beb
 8008b70:	08008beb 	.word	0x08008beb
 8008b74:	08008ba7 	.word	0x08008ba7
 8008b78:	08008bd1 	.word	0x08008bd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d107      	bne.n	8008b98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b88:	f107 030a 	add.w	r3, r7, #10
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fccb 	bl	800a52c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b96:	e032      	b.n	8008bfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fc55 	bl	800a44a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ba4:	e02b      	b.n	8008bfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d107      	bne.n	8008bc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bb2:	f107 030d 	add.w	r3, r7, #13
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fcb6 	bl	800a52c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bc0:	e01d      	b.n	8008bfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fc40 	bl	800a44a <USBD_CtlError>
            ret = USBD_FAIL;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bce:	e016      	b.n	8008bfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d00f      	beq.n	8008bfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fc33 	bl	800a44a <USBD_CtlError>
            ret = USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008be8:	e008      	b.n	8008bfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fc2c 	bl	800a44a <USBD_CtlError>
          ret = USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf6:	e002      	b.n	8008bfe <USBD_CDC_Setup+0x19e>
          break;
 8008bf8:	bf00      	nop
 8008bfa:	e008      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>
          break;
 8008bfc:	bf00      	nop
      }
      break;
 8008bfe:	e006      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fc21 	bl	800a44a <USBD_CtlError>
      ret = USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32b0      	adds	r2, #176	; 0xb0
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e065      	b.n	8008d0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	32b0      	adds	r2, #176	; 0xb0
 8008c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3318      	adds	r3, #24
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02f      	beq.n	8008ccc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 020f 	and.w	r2, r3, #15
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3318      	adds	r3, #24
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 010f 	and.w	r1, r3, #15
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4403      	add	r3, r0
 8008c94:	3338      	adds	r3, #56	; 0x38
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d112      	bne.n	8008ccc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 020f 	and.w	r2, r3, #15
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3318      	adds	r3, #24
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008cbe:	78f9      	ldrb	r1, [r7, #3]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f002 fced 	bl	800b6a4 <USBD_LL_Transmit>
 8008cca:	e01f      	b.n	8008d0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	33b0      	adds	r3, #176	; 0xb0
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d010      	beq.n	8008d0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	33b0      	adds	r3, #176	; 0xb0
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32b0      	adds	r2, #176	; 0xb0
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	32b0      	adds	r2, #176	; 0xb0
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e01a      	b.n	8008d7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f002 fceb 	bl	800b728 <USBD_LL_GetRxDataSize>
 8008d52:	4602      	mov	r2, r0
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	33b0      	adds	r3, #176	; 0xb0
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d78:	4611      	mov	r1, r2
 8008d7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	32b0      	adds	r2, #176	; 0xb0
 8008d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e025      	b.n	8008df4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	33b0      	adds	r3, #176	; 0xb0
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01a      	beq.n	8008df2 <USBD_CDC_EP0_RxReady+0x6c>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008dc2:	2bff      	cmp	r3, #255	; 0xff
 8008dc4:	d015      	beq.n	8008df2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	33b0      	adds	r3, #176	; 0xb0
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008dde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008de6:	b292      	uxth	r2, r2
 8008de8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	22ff      	movs	r2, #255	; 0xff
 8008dee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e04:	2182      	movs	r1, #130	; 0x82
 8008e06:	4818      	ldr	r0, [pc, #96]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e08:	f000 fcbd 	bl	8009786 <USBD_GetEpDesc>
 8008e0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4815      	ldr	r0, [pc, #84]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e12:	f000 fcb8 	bl	8009786 <USBD_GetEpDesc>
 8008e16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e18:	2181      	movs	r1, #129	; 0x81
 8008e1a:	4813      	ldr	r0, [pc, #76]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e1c:	f000 fcb3 	bl	8009786 <USBD_GetEpDesc>
 8008e20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3c:	711a      	strb	r2, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e50:	711a      	strb	r2, [r3, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2243      	movs	r2, #67	; 0x43
 8008e5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20004638 	.word	0x20004638

08008e6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e74:	2182      	movs	r1, #130	; 0x82
 8008e76:	4818      	ldr	r0, [pc, #96]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e78:	f000 fc85 	bl	8009786 <USBD_GetEpDesc>
 8008e7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4815      	ldr	r0, [pc, #84]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e82:	f000 fc80 	bl	8009786 <USBD_GetEpDesc>
 8008e86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e88:	2181      	movs	r1, #129	; 0x81
 8008e8a:	4813      	ldr	r0, [pc, #76]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e8c:	f000 fc7b 	bl	8009786 <USBD_GetEpDesc>
 8008e90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2210      	movs	r2, #16
 8008e9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	711a      	strb	r2, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f042 0202 	orr.w	r2, r2, #2
 8008eb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d006      	beq.n	8008ec6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	711a      	strb	r2, [r3, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f042 0202 	orr.w	r2, r2, #2
 8008ec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2243      	movs	r2, #67	; 0x43
 8008eca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20004638 	.word	0x20004638

08008edc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ee4:	2182      	movs	r1, #130	; 0x82
 8008ee6:	4818      	ldr	r0, [pc, #96]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ee8:	f000 fc4d 	bl	8009786 <USBD_GetEpDesc>
 8008eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4815      	ldr	r0, [pc, #84]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ef2:	f000 fc48 	bl	8009786 <USBD_GetEpDesc>
 8008ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ef8:	2181      	movs	r1, #129	; 0x81
 8008efa:	4813      	ldr	r0, [pc, #76]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008efc:	f000 fc43 	bl	8009786 <USBD_GetEpDesc>
 8008f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1c:	711a      	strb	r2, [r3, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d006      	beq.n	8008f36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f30:	711a      	strb	r2, [r3, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2243      	movs	r2, #67	; 0x43
 8008f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20004638 	.word	0x20004638

08008f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220a      	movs	r2, #10
 8008f58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	200045f4 	.word	0x200045f4

08008f6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e009      	b.n	8008f94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	33b0      	adds	r3, #176	; 0xb0
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	32b0      	adds	r2, #176	; 0xb0
 8008fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e008      	b.n	8008fd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	32b0      	adds	r2, #176	; 0xb0
 8008ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009004:	2303      	movs	r3, #3
 8009006:	e004      	b.n	8009012 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32b0      	adds	r2, #176	; 0xb0
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009042:	2303      	movs	r3, #3
 8009044:	e025      	b.n	8009092 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11f      	bne.n	8009090 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2201      	movs	r2, #1
 8009054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009058:	4b10      	ldr	r3, [pc, #64]	; (800909c <USBD_CDC_TransmitPacket+0x7c>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 020f 	and.w	r2, r3, #15
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4403      	add	r3, r0
 8009072:	3318      	adds	r3, #24
 8009074:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <USBD_CDC_TransmitPacket+0x7c>)
 8009078:	7819      	ldrb	r1, [r3, #0]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f002 fb0c 	bl	800b6a4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2000467b 	.word	0x2000467b

080090a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	32b0      	adds	r2, #176	; 0xb0
 80090b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	32b0      	adds	r2, #176	; 0xb0
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e018      	b.n	8009100 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7c1b      	ldrb	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <USBD_CDC_ReceivePacket+0x68>)
 80090d8:	7819      	ldrb	r1, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f002 fafe 	bl	800b6e6 <USBD_LL_PrepareReceive>
 80090ea:	e008      	b.n	80090fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <USBD_CDC_ReceivePacket+0x68>)
 80090ee:	7819      	ldrb	r1, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f002 faf4 	bl	800b6e6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	2000467c 	.word	0x2000467c

0800910c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009120:	2303      	movs	r3, #3
 8009122:	e01f      	b.n	8009164 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	79fa      	ldrb	r2, [r7, #7]
 8009156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f002 f957 	bl	800b40c <USBD_LL_Init>
 800915e:	4603      	mov	r3, r0
 8009160:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009180:	2303      	movs	r3, #3
 8009182:	e025      	b.n	80091d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	32ae      	adds	r2, #174	; 0xae
 8009196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00f      	beq.n	80091c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32ae      	adds	r2, #174	; 0xae
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	f107 020e 	add.w	r2, r7, #14
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	4602      	mov	r2, r0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f002 f975 	bl	800b4d0 <USBD_LL_Start>
 80091e6:	4603      	mov	r3, r0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d009      	beq.n	8009234 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	4611      	mov	r1, r2
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4611      	mov	r1, r2
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f001 f8a6 	bl	800a3d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092a6:	f003 031f 	and.w	r3, r3, #31
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d01a      	beq.n	80092e4 <USBD_LL_SetupStage+0x72>
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d822      	bhi.n	80092f8 <USBD_LL_SetupStage+0x86>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <USBD_LL_SetupStage+0x4a>
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d00a      	beq.n	80092d0 <USBD_LL_SetupStage+0x5e>
 80092ba:	e01d      	b.n	80092f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fad3 	bl	8009870 <USBD_StdDevReq>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73fb      	strb	r3, [r7, #15]
      break;
 80092ce:	e020      	b.n	8009312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fb3b 	bl	8009954 <USBD_StdItfReq>
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]
      break;
 80092e2:	e016      	b.n	8009312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb9d 	bl	8009a2c <USBD_StdEPReq>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]
      break;
 80092f6:	e00c      	b.n	8009312 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f002 f942 	bl	800b590 <USBD_LL_StallEP>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]
      break;
 8009310:	bf00      	nop
  }

  return ret;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	460b      	mov	r3, r1
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d16e      	bne.n	8009412 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800933a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009342:	2b03      	cmp	r3, #3
 8009344:	f040 8098 	bne.w	8009478 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	429a      	cmp	r2, r3
 8009352:	d913      	bls.n	800937c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	4293      	cmp	r3, r2
 800936c:	bf28      	it	cs
 800936e:	4613      	movcs	r3, r2
 8009370:	461a      	mov	r2, r3
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f001 f922 	bl	800a5be <USBD_CtlContinueRx>
 800937a:	e07d      	b.n	8009478 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009382:	f003 031f 	and.w	r3, r3, #31
 8009386:	2b02      	cmp	r3, #2
 8009388:	d014      	beq.n	80093b4 <USBD_LL_DataOutStage+0x98>
 800938a:	2b02      	cmp	r3, #2
 800938c:	d81d      	bhi.n	80093ca <USBD_LL_DataOutStage+0xae>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <USBD_LL_DataOutStage+0x7c>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d003      	beq.n	800939e <USBD_LL_DataOutStage+0x82>
 8009396:	e018      	b.n	80093ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	75bb      	strb	r3, [r7, #22]
            break;
 800939c:	e018      	b.n	80093d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	4619      	mov	r1, r3
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f9d2 	bl	8009752 <USBD_CoreFindIF>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75bb      	strb	r3, [r7, #22]
            break;
 80093b2:	e00d      	b.n	80093d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4619      	mov	r1, r3
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f9d4 	bl	800976c <USBD_CoreFindEP>
 80093c4:	4603      	mov	r3, r0
 80093c6:	75bb      	strb	r3, [r7, #22]
            break;
 80093c8:	e002      	b.n	80093d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75bb      	strb	r3, [r7, #22]
            break;
 80093ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80093d0:	7dbb      	ldrb	r3, [r7, #22]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d119      	bne.n	800940a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d113      	bne.n	800940a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80093e2:	7dba      	ldrb	r2, [r7, #22]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	32ae      	adds	r2, #174	; 0xae
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80093f2:	7dba      	ldrb	r2, [r7, #22]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093fa:	7dba      	ldrb	r2, [r7, #22]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	32ae      	adds	r2, #174	; 0xae
 8009400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f001 f8e8 	bl	800a5e0 <USBD_CtlSendStatus>
 8009410:	e032      	b.n	8009478 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f9a5 	bl	800976c <USBD_CoreFindEP>
 8009422:	4603      	mov	r3, r0
 8009424:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009426:	7dbb      	ldrb	r3, [r7, #22]
 8009428:	2bff      	cmp	r3, #255	; 0xff
 800942a:	d025      	beq.n	8009478 <USBD_LL_DataOutStage+0x15c>
 800942c:	7dbb      	ldrb	r3, [r7, #22]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d122      	bne.n	8009478 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d117      	bne.n	800946e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800943e:	7dba      	ldrb	r2, [r7, #22]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	32ae      	adds	r2, #174	; 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00f      	beq.n	800946e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800944e:	7dba      	ldrb	r2, [r7, #22]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	32ae      	adds	r2, #174	; 0xae
 800945c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	7afa      	ldrb	r2, [r7, #11]
 8009464:	4611      	mov	r1, r2
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	4798      	blx	r3
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	e000      	b.n	800947a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b086      	sub	sp, #24
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	460b      	mov	r3, r1
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d16f      	bne.n	8009576 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3314      	adds	r3, #20
 800949a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d15a      	bne.n	800955c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d914      	bls.n	80094dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	1ad2      	subs	r2, r2, r3
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	461a      	mov	r2, r3
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f001 f84a 	bl	800a562 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ce:	2300      	movs	r3, #0
 80094d0:	2200      	movs	r2, #0
 80094d2:	2100      	movs	r1, #0
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f002 f906 	bl	800b6e6 <USBD_LL_PrepareReceive>
 80094da:	e03f      	b.n	800955c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d11c      	bne.n	8009522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d316      	bcc.n	8009522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094fe:	429a      	cmp	r2, r3
 8009500:	d20f      	bcs.n	8009522 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 f82b 	bl	800a562 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009514:	2300      	movs	r3, #0
 8009516:	2200      	movs	r2, #0
 8009518:	2100      	movs	r1, #0
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f002 f8e3 	bl	800b6e6 <USBD_LL_PrepareReceive>
 8009520:	e01c      	b.n	800955c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d10f      	bne.n	800954e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d009      	beq.n	800954e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800954e:	2180      	movs	r1, #128	; 0x80
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f002 f81d 	bl	800b590 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f001 f855 	bl	800a606 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d03a      	beq.n	80095dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff fe42 	bl	80091f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009574:	e032      	b.n	80095dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800957c:	b2db      	uxtb	r3, r3
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f8f3 	bl	800976c <USBD_CoreFindEP>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	2bff      	cmp	r3, #255	; 0xff
 800958e:	d025      	beq.n	80095dc <USBD_LL_DataInStage+0x15a>
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d122      	bne.n	80095dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d11c      	bne.n	80095dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095a2:	7dfa      	ldrb	r2, [r7, #23]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	32ae      	adds	r2, #174	; 0xae
 80095a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d014      	beq.n	80095dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80095b2:	7dfa      	ldrb	r2, [r7, #23]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80095ba:	7dfa      	ldrb	r2, [r7, #23]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	32ae      	adds	r2, #174	; 0xae
 80095c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	7afa      	ldrb	r2, [r7, #11]
 80095c8:	4611      	mov	r1, r2
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80095d2:	7dbb      	ldrb	r3, [r7, #22]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80095d8:	7dbb      	ldrb	r3, [r7, #22]
 80095da:	e000      	b.n	80095de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961e:	2b00      	cmp	r3, #0
 8009620:	d014      	beq.n	800964c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00e      	beq.n	800964c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6852      	ldr	r2, [r2, #4]
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	4611      	mov	r1, r2
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800964c:	2340      	movs	r3, #64	; 0x40
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 ff57 	bl	800b506 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2240      	movs	r2, #64	; 0x40
 8009664:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	2200      	movs	r2, #0
 800966c:	2180      	movs	r1, #128	; 0x80
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 ff49 	bl	800b506 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2240      	movs	r2, #64	; 0x40
 800967e:	621a      	str	r2, [r3, #32]

  return ret;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	78fa      	ldrb	r2, [r7, #3]
 800969a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d006      	beq.n	80096cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2204      	movs	r2, #4
 80096d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d106      	bne.n	8009704 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d110      	bne.n	8009748 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800975e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009778:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b086      	sub	sp, #24
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	885b      	ldrh	r3, [r3, #2]
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d920      	bls.n	80097f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80097b6:	e013      	b.n	80097e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80097b8:	f107 030a 	add.w	r3, r7, #10
 80097bc:	4619      	mov	r1, r3
 80097be:	6978      	ldr	r0, [r7, #20]
 80097c0:	f000 f81b 	bl	80097fa <USBD_GetNextDesc>
 80097c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d108      	bne.n	80097e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	789b      	ldrb	r3, [r3, #2]
 80097d6:	78fa      	ldrb	r2, [r7, #3]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d008      	beq.n	80097ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80097dc:	2300      	movs	r3, #0
 80097de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	885b      	ldrh	r3, [r3, #2]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	897b      	ldrh	r3, [r7, #10]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d8e5      	bhi.n	80097b8 <USBD_GetEpDesc+0x32>
 80097ec:	e000      	b.n	80097f0 <USBD_GetEpDesc+0x6a>
          break;
 80097ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80097f0:	693b      	ldr	r3, [r7, #16]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	881a      	ldrh	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	4413      	add	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4413      	add	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009826:	68fb      	ldr	r3, [r7, #12]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	3301      	adds	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009852:	8a3b      	ldrh	r3, [r7, #16]
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	b21a      	sxth	r2, r3
 8009858:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800985c:	4313      	orrs	r3, r2
 800985e:	b21b      	sxth	r3, r3
 8009860:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009862:	89fb      	ldrh	r3, [r7, #14]
}
 8009864:	4618      	mov	r0, r3
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009886:	2b40      	cmp	r3, #64	; 0x40
 8009888:	d005      	beq.n	8009896 <USBD_StdDevReq+0x26>
 800988a:	2b40      	cmp	r3, #64	; 0x40
 800988c:	d857      	bhi.n	800993e <USBD_StdDevReq+0xce>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00f      	beq.n	80098b2 <USBD_StdDevReq+0x42>
 8009892:	2b20      	cmp	r3, #32
 8009894:	d153      	bne.n	800993e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	32ae      	adds	r2, #174	; 0xae
 80098a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
      break;
 80098b0:	e04a      	b.n	8009948 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	785b      	ldrb	r3, [r3, #1]
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d83b      	bhi.n	8009932 <USBD_StdDevReq+0xc2>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <USBD_StdDevReq+0x50>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	08009915 	.word	0x08009915
 80098c4:	08009929 	.word	0x08009929
 80098c8:	08009933 	.word	0x08009933
 80098cc:	0800991f 	.word	0x0800991f
 80098d0:	08009933 	.word	0x08009933
 80098d4:	080098f3 	.word	0x080098f3
 80098d8:	080098e9 	.word	0x080098e9
 80098dc:	08009933 	.word	0x08009933
 80098e0:	0800990b 	.word	0x0800990b
 80098e4:	080098fd 	.word	0x080098fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa3c 	bl	8009d68 <USBD_GetDescriptor>
          break;
 80098f0:	e024      	b.n	800993c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fbcb 	bl	800a090 <USBD_SetAddress>
          break;
 80098fa:	e01f      	b.n	800993c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fc0a 	bl	800a118 <USBD_SetConfig>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
          break;
 8009908:	e018      	b.n	800993c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fcad 	bl	800a26c <USBD_GetConfig>
          break;
 8009912:	e013      	b.n	800993c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fcde 	bl	800a2d8 <USBD_GetStatus>
          break;
 800991c:	e00e      	b.n	800993c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fd0d 	bl	800a340 <USBD_SetFeature>
          break;
 8009926:	e009      	b.n	800993c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fd31 	bl	800a392 <USBD_ClrFeature>
          break;
 8009930:	e004      	b.n	800993c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fd88 	bl	800a44a <USBD_CtlError>
          break;
 800993a:	bf00      	nop
      }
      break;
 800993c:	e004      	b.n	8009948 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fd82 	bl	800a44a <USBD_CtlError>
      break;
 8009946:	bf00      	nop
  }

  return ret;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop

08009954 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800996a:	2b40      	cmp	r3, #64	; 0x40
 800996c:	d005      	beq.n	800997a <USBD_StdItfReq+0x26>
 800996e:	2b40      	cmp	r3, #64	; 0x40
 8009970:	d852      	bhi.n	8009a18 <USBD_StdItfReq+0xc4>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <USBD_StdItfReq+0x26>
 8009976:	2b20      	cmp	r3, #32
 8009978:	d14e      	bne.n	8009a18 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	2b02      	cmp	r3, #2
 8009986:	d840      	bhi.n	8009a0a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	889b      	ldrh	r3, [r3, #4]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b01      	cmp	r3, #1
 8009990:	d836      	bhi.n	8009a00 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	889b      	ldrh	r3, [r3, #4]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fed9 	bl	8009752 <USBD_CoreFindIF>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2bff      	cmp	r3, #255	; 0xff
 80099a8:	d01d      	beq.n	80099e6 <USBD_StdItfReq+0x92>
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11a      	bne.n	80099e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80099b0:	7bba      	ldrb	r2, [r7, #14]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	32ae      	adds	r2, #174	; 0xae
 80099b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00f      	beq.n	80099e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80099c0:	7bba      	ldrb	r2, [r7, #14]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099c8:	7bba      	ldrb	r2, [r7, #14]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32ae      	adds	r2, #174	; 0xae
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099de:	e004      	b.n	80099ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80099e0:	2303      	movs	r3, #3
 80099e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099e4:	e001      	b.n	80099ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80099e6:	2303      	movs	r3, #3
 80099e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	88db      	ldrh	r3, [r3, #6]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d110      	bne.n	8009a14 <USBD_StdItfReq+0xc0>
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10d      	bne.n	8009a14 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fdf1 	bl	800a5e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099fe:	e009      	b.n	8009a14 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fd21 	bl	800a44a <USBD_CtlError>
          break;
 8009a08:	e004      	b.n	8009a14 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fd1c 	bl	800a44a <USBD_CtlError>
          break;
 8009a12:	e000      	b.n	8009a16 <USBD_StdItfReq+0xc2>
          break;
 8009a14:	bf00      	nop
      }
      break;
 8009a16:	e004      	b.n	8009a22 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fd15 	bl	800a44a <USBD_CtlError>
      break;
 8009a20:	bf00      	nop
  }

  return ret;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	889b      	ldrh	r3, [r3, #4]
 8009a3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a48:	2b40      	cmp	r3, #64	; 0x40
 8009a4a:	d007      	beq.n	8009a5c <USBD_StdEPReq+0x30>
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	f200 817f 	bhi.w	8009d50 <USBD_StdEPReq+0x324>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d02a      	beq.n	8009aac <USBD_StdEPReq+0x80>
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	f040 817a 	bne.w	8009d50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff fe83 	bl	800976c <USBD_CoreFindEP>
 8009a66:	4603      	mov	r3, r0
 8009a68:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a6a:	7b7b      	ldrb	r3, [r7, #13]
 8009a6c:	2bff      	cmp	r3, #255	; 0xff
 8009a6e:	f000 8174 	beq.w	8009d5a <USBD_StdEPReq+0x32e>
 8009a72:	7b7b      	ldrb	r3, [r7, #13]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 8170 	bne.w	8009d5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a7a:	7b7a      	ldrb	r2, [r7, #13]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a82:	7b7a      	ldrb	r2, [r7, #13]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	32ae      	adds	r2, #174	; 0xae
 8009a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8163 	beq.w	8009d5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a94:	7b7a      	ldrb	r2, [r7, #13]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	32ae      	adds	r2, #174	; 0xae
 8009a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009aaa:	e156      	b.n	8009d5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	785b      	ldrb	r3, [r3, #1]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d008      	beq.n	8009ac6 <USBD_StdEPReq+0x9a>
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	f300 8145 	bgt.w	8009d44 <USBD_StdEPReq+0x318>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 809b 	beq.w	8009bf6 <USBD_StdEPReq+0x1ca>
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d03c      	beq.n	8009b3e <USBD_StdEPReq+0x112>
 8009ac4:	e13e      	b.n	8009d44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d002      	beq.n	8009ad8 <USBD_StdEPReq+0xac>
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d016      	beq.n	8009b04 <USBD_StdEPReq+0xd8>
 8009ad6:	e02c      	b.n	8009b32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00d      	beq.n	8009afa <USBD_StdEPReq+0xce>
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	2b80      	cmp	r3, #128	; 0x80
 8009ae2:	d00a      	beq.n	8009afa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fd51 	bl	800b590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aee:	2180      	movs	r1, #128	; 0x80
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fd4d 	bl	800b590 <USBD_LL_StallEP>
 8009af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009af8:	e020      	b.n	8009b3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fca4 	bl	800a44a <USBD_CtlError>
              break;
 8009b02:	e01b      	b.n	8009b3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	885b      	ldrh	r3, [r3, #2]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10e      	bne.n	8009b2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00b      	beq.n	8009b2a <USBD_StdEPReq+0xfe>
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b80      	cmp	r3, #128	; 0x80
 8009b16:	d008      	beq.n	8009b2a <USBD_StdEPReq+0xfe>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	88db      	ldrh	r3, [r3, #6]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d104      	bne.n	8009b2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fd33 	bl	800b590 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fd58 	bl	800a5e0 <USBD_CtlSendStatus>

              break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fc88 	bl	800a44a <USBD_CtlError>
              break;
 8009b3a:	bf00      	nop
          }
          break;
 8009b3c:	e107      	b.n	8009d4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d002      	beq.n	8009b50 <USBD_StdEPReq+0x124>
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d016      	beq.n	8009b7c <USBD_StdEPReq+0x150>
 8009b4e:	e04b      	b.n	8009be8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00d      	beq.n	8009b72 <USBD_StdEPReq+0x146>
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b80      	cmp	r3, #128	; 0x80
 8009b5a:	d00a      	beq.n	8009b72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fd15 	bl	800b590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b66:	2180      	movs	r1, #128	; 0x80
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 fd11 	bl	800b590 <USBD_LL_StallEP>
 8009b6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b70:	e040      	b.n	8009bf4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fc68 	bl	800a44a <USBD_CtlError>
              break;
 8009b7a:	e03b      	b.n	8009bf4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	885b      	ldrh	r3, [r3, #2]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d136      	bne.n	8009bf2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fd1b 	bl	800b5ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fd21 	bl	800a5e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff fde2 	bl	800976c <USBD_CoreFindEP>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bac:	7b7b      	ldrb	r3, [r7, #13]
 8009bae:	2bff      	cmp	r3, #255	; 0xff
 8009bb0:	d01f      	beq.n	8009bf2 <USBD_StdEPReq+0x1c6>
 8009bb2:	7b7b      	ldrb	r3, [r7, #13]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d11c      	bne.n	8009bf2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009bb8:	7b7a      	ldrb	r2, [r7, #13]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009bc0:	7b7a      	ldrb	r2, [r7, #13]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	32ae      	adds	r2, #174	; 0xae
 8009bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d010      	beq.n	8009bf2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bd0:	7b7a      	ldrb	r2, [r7, #13]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	; 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009be6:	e004      	b.n	8009bf2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fc2d 	bl	800a44a <USBD_CtlError>
              break;
 8009bf0:	e000      	b.n	8009bf4 <USBD_StdEPReq+0x1c8>
              break;
 8009bf2:	bf00      	nop
          }
          break;
 8009bf4:	e0ab      	b.n	8009d4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d002      	beq.n	8009c08 <USBD_StdEPReq+0x1dc>
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d032      	beq.n	8009c6c <USBD_StdEPReq+0x240>
 8009c06:	e097      	b.n	8009d38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d007      	beq.n	8009c1e <USBD_StdEPReq+0x1f2>
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	2b80      	cmp	r3, #128	; 0x80
 8009c12:	d004      	beq.n	8009c1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fc17 	bl	800a44a <USBD_CtlError>
                break;
 8009c1c:	e091      	b.n	8009d42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da0b      	bge.n	8009c3e <USBD_StdEPReq+0x212>
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	3310      	adds	r3, #16
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	4413      	add	r3, r2
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	e00b      	b.n	8009c56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	4413      	add	r3, r2
 8009c54:	3304      	adds	r3, #4
 8009c56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2202      	movs	r2, #2
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fc61 	bl	800a52c <USBD_CtlSendData>
              break;
 8009c6a:	e06a      	b.n	8009d42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da11      	bge.n	8009c98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	f003 020f 	and.w	r2, r3, #15
 8009c7a:	6879      	ldr	r1, [r7, #4]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	3324      	adds	r3, #36	; 0x24
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d117      	bne.n	8009cbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fbda 	bl	800a44a <USBD_CtlError>
                  break;
 8009c96:	e054      	b.n	8009d42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d104      	bne.n	8009cbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fbc7 	bl	800a44a <USBD_CtlError>
                  break;
 8009cbc:	e041      	b.n	8009d42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da0b      	bge.n	8009cde <USBD_StdEPReq+0x2b2>
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	3310      	adds	r3, #16
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	e00b      	b.n	8009cf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <USBD_StdEPReq+0x2d8>
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b80      	cmp	r3, #128	; 0x80
 8009d02:	d103      	bne.n	8009d0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e00e      	b.n	8009d2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 fc7b 	bl	800b60c <USBD_LL_IsStallEP>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e002      	b.n	8009d2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2200      	movs	r2, #0
 8009d28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fbfb 	bl	800a52c <USBD_CtlSendData>
              break;
 8009d36:	e004      	b.n	8009d42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fb85 	bl	800a44a <USBD_CtlError>
              break;
 8009d40:	bf00      	nop
          }
          break;
 8009d42:	e004      	b.n	8009d4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fb7f 	bl	800a44a <USBD_CtlError>
          break;
 8009d4c:	bf00      	nop
      }
      break;
 8009d4e:	e005      	b.n	8009d5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fb79 	bl	800a44a <USBD_CtlError>
      break;
 8009d58:	e000      	b.n	8009d5c <USBD_StdEPReq+0x330>
      break;
 8009d5a:	bf00      	nop
  }

  return ret;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	2b0e      	cmp	r3, #14
 8009d8a:	f200 8152 	bhi.w	800a032 <USBD_GetDescriptor+0x2ca>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <USBD_GetDescriptor+0x2c>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009e05 	.word	0x08009e05
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e5d 	.word	0x08009e5d
 8009da0:	0800a033 	.word	0x0800a033
 8009da4:	0800a033 	.word	0x0800a033
 8009da8:	08009fd3 	.word	0x08009fd3
 8009dac:	08009fff 	.word	0x08009fff
 8009db0:	0800a033 	.word	0x0800a033
 8009db4:	0800a033 	.word	0x0800a033
 8009db8:	0800a033 	.word	0x0800a033
 8009dbc:	0800a033 	.word	0x0800a033
 8009dc0:	0800a033 	.word	0x0800a033
 8009dc4:	0800a033 	.word	0x0800a033
 8009dc8:	0800a033 	.word	0x0800a033
 8009dcc:	08009dd1 	.word	0x08009dd1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00b      	beq.n	8009df4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	7c12      	ldrb	r2, [r2, #16]
 8009de8:	f107 0108 	add.w	r1, r7, #8
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
 8009df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df2:	e126      	b.n	800a042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fb27 	bl	800a44a <USBD_CtlError>
        err++;
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	72fb      	strb	r3, [r7, #11]
      break;
 8009e02:	e11e      	b.n	800a042 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	7c12      	ldrb	r2, [r2, #16]
 8009e10:	f107 0108 	add.w	r1, r7, #8
 8009e14:	4610      	mov	r0, r2
 8009e16:	4798      	blx	r3
 8009e18:	60f8      	str	r0, [r7, #12]
      break;
 8009e1a:	e112      	b.n	800a042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7c1b      	ldrb	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10d      	bne.n	8009e40 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	f107 0208 	add.w	r2, r7, #8
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e3e:	e100      	b.n	800a042 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	f107 0208 	add.w	r2, r7, #8
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	2202      	movs	r2, #2
 8009e58:	701a      	strb	r2, [r3, #0]
      break;
 8009e5a:	e0f2      	b.n	800a042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	885b      	ldrh	r3, [r3, #2]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	f200 80ac 	bhi.w	8009fc0 <USBD_GetDescriptor+0x258>
 8009e68:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <USBD_GetDescriptor+0x108>)
 8009e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6e:	bf00      	nop
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009ebd 	.word	0x08009ebd
 8009e78:	08009ef1 	.word	0x08009ef1
 8009e7c:	08009f25 	.word	0x08009f25
 8009e80:	08009f59 	.word	0x08009f59
 8009e84:	08009f8d 	.word	0x08009f8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eaa:	e091      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 facb 	bl	800a44a <USBD_CtlError>
            err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eba:	e089      	b.n	8009fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	7c12      	ldrb	r2, [r2, #16]
 8009ed4:	f107 0108 	add.w	r1, r7, #8
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ede:	e077      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fab1 	bl	800a44a <USBD_CtlError>
            err++;
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	3301      	adds	r3, #1
 8009eec:	72fb      	strb	r3, [r7, #11]
          break;
 8009eee:	e06f      	b.n	8009fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	7c12      	ldrb	r2, [r2, #16]
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f12:	e05d      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa97 	bl	800a44a <USBD_CtlError>
            err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
          break;
 8009f22:	e055      	b.n	8009fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7c12      	ldrb	r2, [r2, #16]
 8009f3c:	f107 0108 	add.w	r1, r7, #8
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
 8009f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f46:	e043      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa7d 	bl	800a44a <USBD_CtlError>
            err++;
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	3301      	adds	r3, #1
 8009f54:	72fb      	strb	r3, [r7, #11]
          break;
 8009f56:	e03b      	b.n	8009fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00b      	beq.n	8009f7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7c12      	ldrb	r2, [r2, #16]
 8009f70:	f107 0108 	add.w	r1, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7a:	e029      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fa63 	bl	800a44a <USBD_CtlError>
            err++;
 8009f84:	7afb      	ldrb	r3, [r7, #11]
 8009f86:	3301      	adds	r3, #1
 8009f88:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8a:	e021      	b.n	8009fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	7c12      	ldrb	r2, [r2, #16]
 8009fa4:	f107 0108 	add.w	r1, r7, #8
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4798      	blx	r3
 8009fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fae:	e00f      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa49 	bl	800a44a <USBD_CtlError>
            err++;
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fbe:	e007      	b.n	8009fd0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa41 	bl	800a44a <USBD_CtlError>
          err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009fce:	bf00      	nop
      }
      break;
 8009fd0:	e037      	b.n	800a042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7c1b      	ldrb	r3, [r3, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f107 0208 	add.w	r2, r7, #8
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4798      	blx	r3
 8009fea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fec:	e029      	b.n	800a042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa2a 	bl	800a44a <USBD_CtlError>
        err++;
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8009ffc:	e021      	b.n	800a042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	7c1b      	ldrb	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10d      	bne.n	800a022 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	f107 0208 	add.w	r2, r7, #8
 800a012:	4610      	mov	r0, r2
 800a014:	4798      	blx	r3
 800a016:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	2207      	movs	r2, #7
 800a01e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a020:	e00f      	b.n	800a042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa10 	bl	800a44a <USBD_CtlError>
        err++;
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	3301      	adds	r3, #1
 800a02e:	72fb      	strb	r3, [r7, #11]
      break;
 800a030:	e007      	b.n	800a042 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fa08 	bl	800a44a <USBD_CtlError>
      err++;
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	3301      	adds	r3, #1
 800a03e:	72fb      	strb	r3, [r7, #11]
      break;
 800a040:	bf00      	nop
  }

  if (err != 0U)
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d11e      	bne.n	800a086 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	88db      	ldrh	r3, [r3, #6]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d016      	beq.n	800a07e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a050:	893b      	ldrh	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00e      	beq.n	800a074 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	88da      	ldrh	r2, [r3, #6]
 800a05a:	893b      	ldrh	r3, [r7, #8]
 800a05c:	4293      	cmp	r3, r2
 800a05e:	bf28      	it	cs
 800a060:	4613      	movcs	r3, r2
 800a062:	b29b      	uxth	r3, r3
 800a064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a066:	893b      	ldrh	r3, [r7, #8]
 800a068:	461a      	mov	r2, r3
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa5d 	bl	800a52c <USBD_CtlSendData>
 800a072:	e009      	b.n	800a088 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f9e7 	bl	800a44a <USBD_CtlError>
 800a07c:	e004      	b.n	800a088 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 faae 	bl	800a5e0 <USBD_CtlSendStatus>
 800a084:	e000      	b.n	800a088 <USBD_GetDescriptor+0x320>
    return;
 800a086:	bf00      	nop
  }
}
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop

0800a090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	889b      	ldrh	r3, [r3, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d131      	bne.n	800a106 <USBD_SetAddress+0x76>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	88db      	ldrh	r3, [r3, #6]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d12d      	bne.n	800a106 <USBD_SetAddress+0x76>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a0b0:	d829      	bhi.n	800a106 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	885b      	ldrh	r3, [r3, #2]
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d104      	bne.n	800a0d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f9bc 	bl	800a44a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d2:	e01d      	b.n	800a110 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7bfa      	ldrb	r2, [r7, #15]
 800a0d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 fac0 	bl	800b666 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa7a 	bl	800a5e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0fa:	e009      	b.n	800a110 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a104:	e004      	b.n	800a110 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f99e 	bl	800a44a <USBD_CtlError>
  }
}
 800a10e:	bf00      	nop
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	885b      	ldrh	r3, [r3, #2]
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	4b4e      	ldr	r3, [pc, #312]	; (800a268 <USBD_SetConfig+0x150>)
 800a12e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a130:	4b4d      	ldr	r3, [pc, #308]	; (800a268 <USBD_SetConfig+0x150>)
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d905      	bls.n	800a144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f985 	bl	800a44a <USBD_CtlError>
    return USBD_FAIL;
 800a140:	2303      	movs	r3, #3
 800a142:	e08c      	b.n	800a25e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d002      	beq.n	800a156 <USBD_SetConfig+0x3e>
 800a150:	2b03      	cmp	r3, #3
 800a152:	d029      	beq.n	800a1a8 <USBD_SetConfig+0x90>
 800a154:	e075      	b.n	800a242 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a156:	4b44      	ldr	r3, [pc, #272]	; (800a268 <USBD_SetConfig+0x150>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d020      	beq.n	800a1a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a15e:	4b42      	ldr	r3, [pc, #264]	; (800a268 <USBD_SetConfig+0x150>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a168:	4b3f      	ldr	r3, [pc, #252]	; (800a268 <USBD_SetConfig+0x150>)
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff f849 	bl	8009206 <USBD_SetClassConfig>
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d008      	beq.n	800a190 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f962 	bl	800a44a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2202      	movs	r2, #2
 800a18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a18e:	e065      	b.n	800a25c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa25 	bl	800a5e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2203      	movs	r2, #3
 800a19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a19e:	e05d      	b.n	800a25c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fa1d 	bl	800a5e0 <USBD_CtlSendStatus>
      break;
 800a1a6:	e059      	b.n	800a25c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1a8:	4b2f      	ldr	r3, [pc, #188]	; (800a268 <USBD_SetConfig+0x150>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d112      	bne.n	800a1d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1b8:	4b2b      	ldr	r3, [pc, #172]	; (800a268 <USBD_SetConfig+0x150>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1c2:	4b29      	ldr	r3, [pc, #164]	; (800a268 <USBD_SetConfig+0x150>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff f838 	bl	800923e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa06 	bl	800a5e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1d4:	e042      	b.n	800a25c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a1d6:	4b24      	ldr	r3, [pc, #144]	; (800a268 <USBD_SetConfig+0x150>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d02a      	beq.n	800a23a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f826 	bl	800923e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1f2:	4b1d      	ldr	r3, [pc, #116]	; (800a268 <USBD_SetConfig+0x150>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1fc:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <USBD_SetConfig+0x150>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7fe ffff 	bl	8009206 <USBD_SetClassConfig>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00f      	beq.n	800a232 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f918 	bl	800a44a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff f80b 	bl	800923e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a230:	e014      	b.n	800a25c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f9d4 	bl	800a5e0 <USBD_CtlSendStatus>
      break;
 800a238:	e010      	b.n	800a25c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f9d0 	bl	800a5e0 <USBD_CtlSendStatus>
      break;
 800a240:	e00c      	b.n	800a25c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f900 	bl	800a44a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <USBD_SetConfig+0x150>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7fe fff4 	bl	800923e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a256:	2303      	movs	r3, #3
 800a258:	73fb      	strb	r3, [r7, #15]
      break;
 800a25a:	bf00      	nop
  }

  return ret;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20005308 	.word	0x20005308

0800a26c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	88db      	ldrh	r3, [r3, #6]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d004      	beq.n	800a288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f8e2 	bl	800a44a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a286:	e023      	b.n	800a2d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b02      	cmp	r3, #2
 800a292:	dc02      	bgt.n	800a29a <USBD_GetConfig+0x2e>
 800a294:	2b00      	cmp	r3, #0
 800a296:	dc03      	bgt.n	800a2a0 <USBD_GetConfig+0x34>
 800a298:	e015      	b.n	800a2c6 <USBD_GetConfig+0x5a>
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d00b      	beq.n	800a2b6 <USBD_GetConfig+0x4a>
 800a29e:	e012      	b.n	800a2c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f93c 	bl	800a52c <USBD_CtlSendData>
        break;
 800a2b4:	e00c      	b.n	800a2d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f934 	bl	800a52c <USBD_CtlSendData>
        break;
 800a2c4:	e004      	b.n	800a2d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f8be 	bl	800a44a <USBD_CtlError>
        break;
 800a2ce:	bf00      	nop
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d81e      	bhi.n	800a32e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	88db      	ldrh	r3, [r3, #6]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d004      	beq.n	800a302 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f8a5 	bl	800a44a <USBD_CtlError>
        break;
 800a300:	e01a      	b.n	800a338 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f043 0202 	orr.w	r2, r3, #2
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	330c      	adds	r3, #12
 800a322:	2202      	movs	r2, #2
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f900 	bl	800a52c <USBD_CtlSendData>
      break;
 800a32c:	e004      	b.n	800a338 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f88a 	bl	800a44a <USBD_CtlError>
      break;
 800a336:	bf00      	nop
  }
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	885b      	ldrh	r3, [r3, #2]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d107      	bne.n	800a362 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f940 	bl	800a5e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a360:	e013      	b.n	800a38a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d10b      	bne.n	800a382 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	889b      	ldrh	r3, [r3, #4]
 800a36e:	0a1b      	lsrs	r3, r3, #8
 800a370:	b29b      	uxth	r3, r3
 800a372:	b2da      	uxtb	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f930 	bl	800a5e0 <USBD_CtlSendStatus>
}
 800a380:	e003      	b.n	800a38a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f860 	bl	800a44a <USBD_CtlError>
}
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d80b      	bhi.n	800a3c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d10c      	bne.n	800a3cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f910 	bl	800a5e0 <USBD_CtlSendStatus>
      }
      break;
 800a3c0:	e004      	b.n	800a3cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f840 	bl	800a44a <USBD_CtlError>
      break;
 800a3ca:	e000      	b.n	800a3ce <USBD_ClrFeature+0x3c>
      break;
 800a3cc:	bf00      	nop
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	781a      	ldrb	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	781a      	ldrb	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fa17 	bl	8009834 <SWAPBYTE>
 800a406:	4603      	mov	r3, r0
 800a408:	461a      	mov	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3301      	adds	r3, #1
 800a412:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3301      	adds	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff fa0a 	bl	8009834 <SWAPBYTE>
 800a420:	4603      	mov	r3, r0
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f7ff f9fd 	bl	8009834 <SWAPBYTE>
 800a43a:	4603      	mov	r3, r0
 800a43c:	461a      	mov	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	80da      	strh	r2, [r3, #6]
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a454:	2180      	movs	r1, #128	; 0x80
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 f89a 	bl	800b590 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a45c:	2100      	movs	r1, #0
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 f896 	bl	800b590 <USBD_LL_StallEP>
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d036      	beq.n	800a4f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a486:	6938      	ldr	r0, [r7, #16]
 800a488:	f000 f836 	bl	800a4f8 <USBD_GetLen>
 800a48c:	4603      	mov	r3, r0
 800a48e:	3301      	adds	r3, #1
 800a490:	b29b      	uxth	r3, r3
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	4413      	add	r3, r2
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	7812      	ldrb	r2, [r2, #0]
 800a4a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	2203      	movs	r2, #3
 800a4b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4bc:	e013      	b.n	800a4e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	7812      	ldrb	r2, [r2, #0]
 800a4c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	613b      	str	r3, [r7, #16]
    idx++;
 800a4d0:	7dfb      	ldrb	r3, [r7, #23]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	4413      	add	r3, r2
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e7      	bne.n	800a4be <USBD_GetString+0x52>
 800a4ee:	e000      	b.n	800a4f2 <USBD_GetString+0x86>
    return;
 800a4f0:	bf00      	nop
  }
}
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a508:	e005      	b.n	800a516 <USBD_GetLen+0x1e>
  {
    len++;
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	3301      	adds	r3, #1
 800a50e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	3301      	adds	r3, #1
 800a514:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1f5      	bne.n	800a50a <USBD_GetLen+0x12>
  }

  return len;
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	2100      	movs	r1, #0
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f001 f8a6 	bl	800b6a4 <USBD_LL_Transmit>

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	60f8      	str	r0, [r7, #12]
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	2100      	movs	r1, #0
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f001 f895 	bl	800b6a4 <USBD_LL_Transmit>

  return USBD_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2203      	movs	r2, #3
 800a594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f001 f899 	bl	800b6e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f001 f888 	bl	800b6e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 f854 	bl	800b6a4 <USBD_LL_Transmit>

  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2205      	movs	r2, #5
 800a612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a616:	2300      	movs	r3, #0
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 f862 	bl	800b6e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <arm_gaussian_naive_bayes_predict_f32>:

uint32_t arm_gaussian_naive_bayes_predict_f32(const arm_gaussian_naive_bayes_instance_f32 *S, 
   const float32_t * in, 
   float32_t *pOutputProbabilities,
   float32_t *pBufferB)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b092      	sub	sp, #72	; 0x48
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
    uint32_t nbClass;
    uint32_t nbDim;
    const float32_t *pPrior = S->classPriors;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
    const float32_t *pTheta = S->theta;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	63bb      	str	r3, [r7, #56]	; 0x38
    const float32_t *pSigma = S->sigma;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
    float32_t *buffer = pOutputProbabilities;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	633b      	str	r3, [r7, #48]	; 0x30
    const float32_t *pIn=in;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c
    float32_t acc1,acc2;
    uint32_t index;

    (void)pBufferB;

    pTheta=S->theta;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	63bb      	str	r3, [r7, #56]	; 0x38
    pSigma=S->sigma;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	637b      	str	r3, [r7, #52]	; 0x34

    for(nbClass = 0; nbClass < S->numberOfClasses; nbClass++)
 800a660:	2300      	movs	r3, #0
 800a662:	647b      	str	r3, [r7, #68]	; 0x44
 800a664:	e082      	b.n	800a76c <arm_gaussian_naive_bayes_predict_f32+0x140>
    {

        
        pIn = in;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	62fb      	str	r3, [r7, #44]	; 0x2c

        tmp = 0.0;
 800a66a:	f04f 0300 	mov.w	r3, #0
 800a66e:	623b      	str	r3, [r7, #32]
        acc1 = 0.0f;
 800a670:	f04f 0300 	mov.w	r3, #0
 800a674:	62bb      	str	r3, [r7, #40]	; 0x28
        acc2 = 0.0f;
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	627b      	str	r3, [r7, #36]	; 0x24
        for(nbDim = 0; nbDim < S->vectorDimension; nbDim++)
 800a67c:	2300      	movs	r3, #0
 800a67e:	643b      	str	r3, [r7, #64]	; 0x40
 800a680:	e043      	b.n	800a70a <arm_gaussian_naive_bayes_predict_f32+0xde>
        {
           sigma = *pSigma + S->epsilon;
 800a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a684:	ed93 7a00 	vldr	s14, [r3]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	edd3 7a05 	vldr	s15, [r3, #20]
 800a68e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a692:	edc7 7a07 	vstr	s15, [r7, #28]
           acc1 += logf(2.0f * PI_F * sigma);
 800a696:	edd7 7a07 	vldr	s15, [r7, #28]
 800a69a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800a794 <arm_gaussian_naive_bayes_predict_f32+0x168>
 800a69e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a6:	f005 fe0b 	bl	80102c0 <logf>
 800a6aa:	eeb0 7a40 	vmov.f32	s14, s0
 800a6ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
           acc2 += (*pIn - *pTheta) * (*pIn - *pTheta) / sigma;
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	ed93 7a00 	vldr	s14, [r3]
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	edd3 7a00 	vldr	s15, [r3]
 800a6c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	edd3 6a00 	vldr	s13, [r3]
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	edd3 7a00 	vldr	s15, [r3]
 800a6d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a6da:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a6de:	ed97 7a07 	vldr	s14, [r7, #28]
 800a6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a6ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

           pIn++;
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
           pTheta++;
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	63bb      	str	r3, [r7, #56]	; 0x38
           pSigma++;
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	3304      	adds	r3, #4
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
        for(nbDim = 0; nbDim < S->vectorDimension; nbDim++)
 800a704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a706:	3301      	adds	r3, #1
 800a708:	643b      	str	r3, [r7, #64]	; 0x40
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a710:	429a      	cmp	r2, r3
 800a712:	d3b6      	bcc.n	800a682 <arm_gaussian_naive_bayes_predict_f32+0x56>
        }

        tmp = -0.5f * acc1;
 800a714:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a718:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a71c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a720:	edc7 7a08 	vstr	s15, [r7, #32]
        tmp -= 0.5f * acc2;
 800a724:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a728:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a72c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a730:	ed97 7a08 	vldr	s14, [r7, #32]
 800a734:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a738:	edc7 7a08 	vstr	s15, [r7, #32]


        *buffer = tmp + logf(*pPrior++);
 800a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73e:	1d1a      	adds	r2, r3, #4
 800a740:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a742:	edd3 7a00 	vldr	s15, [r3]
 800a746:	eeb0 0a67 	vmov.f32	s0, s15
 800a74a:	f005 fdb9 	bl	80102c0 <logf>
 800a74e:	eeb0 7a40 	vmov.f32	s14, s0
 800a752:	edd7 7a08 	vldr	s15, [r7, #32]
 800a756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	edc3 7a00 	vstr	s15, [r3]
        buffer++;
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	3304      	adds	r3, #4
 800a764:	633b      	str	r3, [r7, #48]	; 0x30
    for(nbClass = 0; nbClass < S->numberOfClasses; nbClass++)
 800a766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a768:	3301      	adds	r3, #1
 800a76a:	647b      	str	r3, [r7, #68]	; 0x44
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a772:	429a      	cmp	r2, r3
 800a774:	f4ff af77 	bcc.w	800a666 <arm_gaussian_naive_bayes_predict_f32+0x3a>
    }

    arm_max_f32(pOutputProbabilities,S->numberOfClasses,&result,&index);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6859      	ldr	r1, [r3, #4]
 800a77c:	f107 0314 	add.w	r3, r7, #20
 800a780:	f107 0218 	add.w	r2, r7, #24
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 faa7 	bl	800acd8 <arm_max_f32>

    return(index);
 800a78a:	697b      	ldr	r3, [r7, #20]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3748      	adds	r7, #72	; 0x48
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	40c90fdb 	.word	0x40c90fdb

0800a798 <arm_exponent_f32>:
 * @param[in]    nb          integer exponent >= 1
 * @return x^nb
 *
 */
__STATIC_INLINE float32_t arm_exponent_f32(float32_t x, int32_t nb)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a7a2:	6038      	str	r0, [r7, #0]
    float32_t r = x;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]
    nb --;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	603b      	str	r3, [r7, #0]
    while(nb > 0)
 800a7ae:	e00a      	b.n	800a7c6 <arm_exponent_f32+0x2e>
    {
        r = r * x;
 800a7b0:	ed97 7a03 	vldr	s14, [r7, #12]
 800a7b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7bc:	edc7 7a03 	vstr	s15, [r7, #12]
        nb--;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	603b      	str	r3, [r7, #0]
    while(nb > 0)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dcf1      	bgt.n	800a7b0 <arm_exponent_f32+0x18>
    }
    return(r);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	ee07 3a90 	vmov	s15, r3
}
 800a7d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <arm_svm_linear_init_f32>:
  uint32_t vectorDimension,
  float32_t intercept,
  const float32_t *dualCoefficients,
  const float32_t *supportVectors,
  const int32_t *classes)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6178      	str	r0, [r7, #20]
 800a7e8:	6139      	str	r1, [r7, #16]
 800a7ea:	60fa      	str	r2, [r7, #12]
 800a7ec:	ed87 0a02 	vstr	s0, [r7, #8]
 800a7f0:	607b      	str	r3, [r7, #4]
   S->nbOfSupportVectors = nbOfSupportVectors;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	601a      	str	r2, [r3, #0]
   S->vectorDimension = vectorDimension;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	605a      	str	r2, [r3, #4]
   S->intercept = intercept;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	609a      	str	r2, [r3, #8]
   S->dualCoefficients = dualCoefficients;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	60da      	str	r2, [r3, #12]
   S->supportVectors = supportVectors;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	6a3a      	ldr	r2, [r7, #32]
 800a80e:	611a      	str	r2, [r3, #16]
   S->classes = classes;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a814:	615a      	str	r2, [r3, #20]
}
 800a816:	bf00      	nop
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <arm_svm_linear_predict_f32>:
#else
void arm_svm_linear_predict_f32(
    const arm_svm_linear_instance_f32 *S,
    const float32_t * in,
    int32_t * pResult)
{
 800a822:	b480      	push	{r7}
 800a824:	b08b      	sub	sp, #44	; 0x2c
 800a826:	af00      	add	r7, sp, #0
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	607a      	str	r2, [r7, #4]
    float32_t sum=S->intercept;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t dot=0;
 800a834:	f04f 0300 	mov.w	r3, #0
 800a838:	623b      	str	r3, [r7, #32]
    uint32_t i,j;
    const float32_t *pSupport = S->supportVectors;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	617b      	str	r3, [r7, #20]

    for(i=0; i < S->nbOfSupportVectors; i++)
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]
 800a844:	e034      	b.n	800a8b0 <arm_svm_linear_predict_f32+0x8e>
    {
        dot=0;
 800a846:	f04f 0300 	mov.w	r3, #0
 800a84a:	623b      	str	r3, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800a84c:	2300      	movs	r3, #0
 800a84e:	61bb      	str	r3, [r7, #24]
 800a850:	e015      	b.n	800a87e <arm_svm_linear_predict_f32+0x5c>
        {
            dot = dot + in[j]* *pSupport++;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	4413      	add	r3, r2
 800a85a:	ed93 7a00 	vldr	s14, [r3]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	1d1a      	adds	r2, r3, #4
 800a862:	617a      	str	r2, [r7, #20]
 800a864:	edd3 7a00 	vldr	s15, [r3]
 800a868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86c:	ed97 7a08 	vldr	s14, [r7, #32]
 800a870:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a874:	edc7 7a08 	vstr	s15, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	3301      	adds	r3, #1
 800a87c:	61bb      	str	r3, [r7, #24]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	429a      	cmp	r2, r3
 800a886:	d3e4      	bcc.n	800a852 <arm_svm_linear_predict_f32+0x30>
        }
        sum += S->dualCoefficients[i] * dot;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68da      	ldr	r2, [r3, #12]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	ed93 7a00 	vldr	s14, [r3]
 800a896:	edd7 7a08 	vldr	s15, [r7, #32]
 800a89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a8a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=0; i < S->nbOfSupportVectors; i++)
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	61fb      	str	r3, [r7, #28]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69fa      	ldr	r2, [r7, #28]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d3c5      	bcc.n	800a846 <arm_svm_linear_predict_f32+0x24>
    }
    *pResult=S->classes[STEP(sum)];
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	695a      	ldr	r2, [r3, #20]
 800a8be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a8c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ca:	bf94      	ite	ls
 800a8cc:	2301      	movls	r3, #1
 800a8ce:	2300      	movhi	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	f083 0301 	eor.w	r3, r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	601a      	str	r2, [r3, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	372c      	adds	r7, #44	; 0x2c
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <arm_svm_polynomial_init_f32>:
  const int32_t *classes,
  int32_t      degree,
  float32_t coef0,
  float32_t gamma
  )
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b089      	sub	sp, #36	; 0x24
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	61f8      	str	r0, [r7, #28]
 800a8f6:	61b9      	str	r1, [r7, #24]
 800a8f8:	617a      	str	r2, [r7, #20]
 800a8fa:	ed87 0a04 	vstr	s0, [r7, #16]
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	edc7 0a02 	vstr	s1, [r7, #8]
 800a904:	ed87 1a01 	vstr	s2, [r7, #4]
   S->nbOfSupportVectors = nbOfSupportVectors;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	601a      	str	r2, [r3, #0]
   S->vectorDimension = vectorDimension;
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	605a      	str	r2, [r3, #4]
   S->intercept = intercept;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	609a      	str	r2, [r3, #8]
   S->dualCoefficients = dualCoefficients;
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	60da      	str	r2, [r3, #12]
   S->supportVectors = supportVectors;
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a924:	611a      	str	r2, [r3, #16]
   S->classes = classes;
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a92a:	615a      	str	r2, [r3, #20]
   S->degree = degree;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a930:	619a      	str	r2, [r3, #24]
   S->coef0 = coef0;
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	61da      	str	r2, [r3, #28]
   S->gamma = gamma;
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	621a      	str	r2, [r3, #32]
}
 800a93e:	bf00      	nop
 800a940:	3724      	adds	r7, #36	; 0x24
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <arm_svm_polynomial_predict_f32>:
#else
void arm_svm_polynomial_predict_f32(
    const arm_svm_polynomial_instance_f32 *S,
    const float32_t * in,
    int32_t * pResult)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	ed2d 8b02 	vpush	{d8}
 800a950:	b08a      	sub	sp, #40	; 0x28
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
    float32_t sum=S->intercept;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t dot=0;
 800a960:	f04f 0300 	mov.w	r3, #0
 800a964:	623b      	str	r3, [r7, #32]
    uint32_t i,j;
    const float32_t *pSupport = S->supportVectors;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	617b      	str	r3, [r7, #20]

    for(i=0; i < S->nbOfSupportVectors; i++)
 800a96c:	2300      	movs	r3, #0
 800a96e:	61fb      	str	r3, [r7, #28]
 800a970:	e047      	b.n	800aa02 <arm_svm_polynomial_predict_f32+0xb8>
    {
        dot=0;
 800a972:	f04f 0300 	mov.w	r3, #0
 800a976:	623b      	str	r3, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800a978:	2300      	movs	r3, #0
 800a97a:	61bb      	str	r3, [r7, #24]
 800a97c:	e015      	b.n	800a9aa <arm_svm_polynomial_predict_f32+0x60>
        {
            dot = dot + in[j]* *pSupport++;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	4413      	add	r3, r2
 800a986:	ed93 7a00 	vldr	s14, [r3]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	1d1a      	adds	r2, r3, #4
 800a98e:	617a      	str	r2, [r7, #20]
 800a990:	edd3 7a00 	vldr	s15, [r3]
 800a994:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a998:	ed97 7a08 	vldr	s14, [r7, #32]
 800a99c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9a0:	edc7 7a08 	vstr	s15, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	61bb      	str	r3, [r7, #24]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	69ba      	ldr	r2, [r7, #24]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d3e4      	bcc.n	800a97e <arm_svm_polynomial_predict_f32+0x34>
        }
        sum += S->dualCoefficients[i] * arm_exponent_f32(S->gamma * dot + S->coef0, S->degree);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	ed93 8a00 	vldr	s16, [r3]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	ed93 7a08 	vldr	s14, [r3, #32]
 800a9c8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	edd3 7a07 	vldr	s15, [r3, #28]
 800a9d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e4:	f7ff fed8 	bl	800a798 <arm_exponent_f32>
 800a9e8:	eef0 7a40 	vmov.f32	s15, s0
 800a9ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a9f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a9f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=0; i < S->nbOfSupportVectors; i++)
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d3b2      	bcc.n	800a972 <arm_svm_polynomial_predict_f32+0x28>
    }

    *pResult=S->classes[STEP(sum)];
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	695a      	ldr	r2, [r3, #20]
 800aa10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aa14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1c:	bf94      	ite	ls
 800aa1e:	2301      	movls	r3, #1
 800aa20:	2300      	movhi	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f083 0301 	eor.w	r3, r3, #1
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	601a      	str	r2, [r3, #0]
}
 800aa34:	bf00      	nop
 800aa36:	3728      	adds	r7, #40	; 0x28
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	ecbd 8b02 	vpop	{d8}
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <arm_svm_rbf_init_f32>:
  const float32_t *dualCoefficients,
  const float32_t *supportVectors,
  const int32_t *classes,
  float32_t gamma
  )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6178      	str	r0, [r7, #20]
 800aa48:	6139      	str	r1, [r7, #16]
 800aa4a:	60fa      	str	r2, [r7, #12]
 800aa4c:	ed87 0a02 	vstr	s0, [r7, #8]
 800aa50:	607b      	str	r3, [r7, #4]
 800aa52:	edc7 0a00 	vstr	s1, [r7]
   S->nbOfSupportVectors = nbOfSupportVectors;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	601a      	str	r2, [r3, #0]
   S->vectorDimension = vectorDimension;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	605a      	str	r2, [r3, #4]
   S->intercept = intercept;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	609a      	str	r2, [r3, #8]
   S->dualCoefficients = dualCoefficients;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	60da      	str	r2, [r3, #12]
   S->supportVectors = supportVectors;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	6a3a      	ldr	r2, [r7, #32]
 800aa72:	611a      	str	r2, [r3, #16]
   S->classes = classes;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa78:	615a      	str	r2, [r3, #20]
   S->gamma = gamma;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	619a      	str	r2, [r3, #24]
}
 800aa80:	bf00      	nop
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <arm_svm_rbf_predict_f32>:
#else
void arm_svm_rbf_predict_f32(
    const arm_svm_rbf_instance_f32 *S,
    const float32_t * in,
    int32_t * pResult)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	ed2d 8b02 	vpush	{d8}
 800aa92:	b08a      	sub	sp, #40	; 0x28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
    float32_t sum=S->intercept;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t dot=0;
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	623b      	str	r3, [r7, #32]
    uint32_t i,j;
    const float32_t *pSupport = S->supportVectors;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	617b      	str	r3, [r7, #20]

    for(i=0; i < S->nbOfSupportVectors; i++)
 800aaae:	2300      	movs	r3, #0
 800aab0:	61fb      	str	r3, [r7, #28]
 800aab2:	e04f      	b.n	800ab54 <arm_svm_rbf_predict_f32+0xc8>
    {
        dot=0;
 800aab4:	f04f 0300 	mov.w	r3, #0
 800aab8:	623b      	str	r3, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800aaba:	2300      	movs	r3, #0
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	e023      	b.n	800ab08 <arm_svm_rbf_predict_f32+0x7c>
        {
            dot = dot + SQ(in[j] - *pSupport);
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	4413      	add	r3, r2
 800aac8:	ed93 7a00 	vldr	s14, [r3]
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	edd3 7a00 	vldr	s15, [r3]
 800aad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	4413      	add	r3, r2
 800aade:	edd3 6a00 	vldr	s13, [r3]
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	edd3 7a00 	vldr	s15, [r3]
 800aae8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aaec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf0:	ed97 7a08 	vldr	s14, [r7, #32]
 800aaf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaf8:	edc7 7a08 	vstr	s15, [r7, #32]
            pSupport++;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	3304      	adds	r3, #4
 800ab00:	617b      	str	r3, [r7, #20]
        for(j=0; j < S->vectorDimension; j++)
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	3301      	adds	r3, #1
 800ab06:	61bb      	str	r3, [r7, #24]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d3d6      	bcc.n	800aac0 <arm_svm_rbf_predict_f32+0x34>
        }
        sum += S->dualCoefficients[i] * expf(-S->gamma * dot);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	ed93 8a00 	vldr	s16, [r3]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	edd3 7a06 	vldr	s15, [r3, #24]
 800ab26:	eeb1 7a67 	vneg.f32	s14, s15
 800ab2a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab32:	eeb0 0a67 	vmov.f32	s0, s15
 800ab36:	f005 fb8d 	bl	8010254 <expf>
 800ab3a:	eef0 7a40 	vmov.f32	s15, s0
 800ab3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ab42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ab46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=0; i < S->nbOfSupportVectors; i++)
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	3301      	adds	r3, #1
 800ab52:	61fb      	str	r3, [r7, #28]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	69fa      	ldr	r2, [r7, #28]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d3aa      	bcc.n	800aab4 <arm_svm_rbf_predict_f32+0x28>
    }
    *pResult=S->classes[STEP(sum)];
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ab66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6e:	bf94      	ite	ls
 800ab70:	2301      	movls	r3, #1
 800ab72:	2300      	movhi	r3, #0
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	f083 0301 	eor.w	r3, r3, #1
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	601a      	str	r2, [r3, #0]
}
 800ab86:	bf00      	nop
 800ab88:	3728      	adds	r7, #40	; 0x28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	ecbd 8b02 	vpop	{d8}
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <arm_svm_sigmoid_init_f32>:
  const float32_t *supportVectors,
  const int32_t *classes,
  float32_t coef0,
  float32_t gamma
  )
{
 800ab92:	b480      	push	{r7}
 800ab94:	b089      	sub	sp, #36	; 0x24
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	61f8      	str	r0, [r7, #28]
 800ab9a:	61b9      	str	r1, [r7, #24]
 800ab9c:	617a      	str	r2, [r7, #20]
 800ab9e:	ed87 0a04 	vstr	s0, [r7, #16]
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	edc7 0a02 	vstr	s1, [r7, #8]
 800aba8:	ed87 1a01 	vstr	s2, [r7, #4]
   S->nbOfSupportVectors = nbOfSupportVectors;
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	601a      	str	r2, [r3, #0]
   S->vectorDimension = vectorDimension;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	605a      	str	r2, [r3, #4]
   S->intercept = intercept;
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	609a      	str	r2, [r3, #8]
   S->dualCoefficients = dualCoefficients;
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	60da      	str	r2, [r3, #12]
   S->supportVectors = supportVectors;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc8:	611a      	str	r2, [r3, #16]
   S->classes = classes;
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abce:	615a      	str	r2, [r3, #20]
   S->coef0 = coef0;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	619a      	str	r2, [r3, #24]
   S->gamma = gamma;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	61da      	str	r2, [r3, #28]
}
 800abdc:	bf00      	nop
 800abde:	3724      	adds	r7, #36	; 0x24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <arm_svm_sigmoid_predict_f32>:
#else
void arm_svm_sigmoid_predict_f32(
    const arm_svm_sigmoid_instance_f32 *S,
    const float32_t * in,
    int32_t * pResult)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	ed2d 8b02 	vpush	{d8}
 800abee:	b08a      	sub	sp, #40	; 0x28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
    float32_t sum=S->intercept;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t dot=0;
 800abfe:	f04f 0300 	mov.w	r3, #0
 800ac02:	623b      	str	r3, [r7, #32]
    uint32_t i,j;
    const float32_t *pSupport = S->supportVectors;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	617b      	str	r3, [r7, #20]

    for(i=0; i < S->nbOfSupportVectors; i++)
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61fb      	str	r3, [r7, #28]
 800ac0e:	e044      	b.n	800ac9a <arm_svm_sigmoid_predict_f32+0xb2>
    {
        dot=0;
 800ac10:	f04f 0300 	mov.w	r3, #0
 800ac14:	623b      	str	r3, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800ac16:	2300      	movs	r3, #0
 800ac18:	61bb      	str	r3, [r7, #24]
 800ac1a:	e015      	b.n	800ac48 <arm_svm_sigmoid_predict_f32+0x60>
        {
            dot = dot + in[j]* *pSupport++;
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	4413      	add	r3, r2
 800ac24:	ed93 7a00 	vldr	s14, [r3]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	1d1a      	adds	r2, r3, #4
 800ac2c:	617a      	str	r2, [r7, #20]
 800ac2e:	edd3 7a00 	vldr	s15, [r3]
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	ed97 7a08 	vldr	s14, [r7, #32]
 800ac3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac3e:	edc7 7a08 	vstr	s15, [r7, #32]
        for(j=0; j < S->vectorDimension; j++)
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	3301      	adds	r3, #1
 800ac46:	61bb      	str	r3, [r7, #24]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d3e4      	bcc.n	800ac1c <arm_svm_sigmoid_predict_f32+0x34>
        }
        sum += S->dualCoefficients[i] * tanhf(S->gamma * dot + S->coef0);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	ed93 8a00 	vldr	s16, [r3]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	ed93 7a07 	vldr	s14, [r3, #28]
 800ac66:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac78:	eeb0 0a67 	vmov.f32	s0, s15
 800ac7c:	f005 fa98 	bl	80101b0 <tanhf>
 800ac80:	eef0 7a40 	vmov.f32	s15, s0
 800ac84:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ac88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=0; i < S->nbOfSupportVectors; i++)
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	3301      	adds	r3, #1
 800ac98:	61fb      	str	r3, [r7, #28]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d3b5      	bcc.n	800ac10 <arm_svm_sigmoid_predict_f32+0x28>
    }
    *pResult=S->classes[STEP(sum)];
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	695a      	ldr	r2, [r3, #20]
 800aca8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800acb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb4:	bf94      	ite	ls
 800acb6:	2301      	movls	r3, #1
 800acb8:	2300      	movhi	r3, #0
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	f083 0301 	eor.w	r3, r3, #1
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]
}
 800accc:	bf00      	nop
 800acce:	3728      	adds	r7, #40	; 0x28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	ecbd 8b02 	vpop	{d8}
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	; 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	1d1a      	adds	r2, r3, #4
 800acee:	60fa      	str	r2, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800acfa:	e016      	b.n	800ad2a <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	60fa      	str	r2, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800ad06:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad0a:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad16:	d505      	bpl.n	800ad24 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e5      	bne.n	800acfc <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	601a      	str	r2, [r3, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	3724      	adds	r7, #36	; 0x24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4912      	ldr	r1, [pc, #72]	; (800ad98 <MX_USB_Device_Init+0x50>)
 800ad50:	4812      	ldr	r0, [pc, #72]	; (800ad9c <MX_USB_Device_Init+0x54>)
 800ad52:	f7fe f9db 	bl	800910c <USBD_Init>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ad5c:	f7f6 fd32 	bl	80017c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ad60:	490f      	ldr	r1, [pc, #60]	; (800ada0 <MX_USB_Device_Init+0x58>)
 800ad62:	480e      	ldr	r0, [pc, #56]	; (800ad9c <MX_USB_Device_Init+0x54>)
 800ad64:	f7fe fa02 	bl	800916c <USBD_RegisterClass>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ad6e:	f7f6 fd29 	bl	80017c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ad72:	490c      	ldr	r1, [pc, #48]	; (800ada4 <MX_USB_Device_Init+0x5c>)
 800ad74:	4809      	ldr	r0, [pc, #36]	; (800ad9c <MX_USB_Device_Init+0x54>)
 800ad76:	f7fe f8f9 	bl	8008f6c <USBD_CDC_RegisterInterface>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ad80:	f7f6 fd20 	bl	80017c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ad84:	4805      	ldr	r0, [pc, #20]	; (800ad9c <MX_USB_Device_Init+0x54>)
 800ad86:	f7fe fa27 	bl	80091d8 <USBD_Start>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ad90:	f7f6 fd18 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ad94:	bf00      	nop
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20004694 	.word	0x20004694
 800ad9c:	2000530c 	.word	0x2000530c
 800ada0:	20004600 	.word	0x20004600
 800ada4:	20004680 	.word	0x20004680

0800ada8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800adac:	2200      	movs	r2, #0
 800adae:	4905      	ldr	r1, [pc, #20]	; (800adc4 <CDC_Init_FS+0x1c>)
 800adb0:	4805      	ldr	r0, [pc, #20]	; (800adc8 <CDC_Init_FS+0x20>)
 800adb2:	f7fe f8f5 	bl	8008fa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800adb6:	4905      	ldr	r1, [pc, #20]	; (800adcc <CDC_Init_FS+0x24>)
 800adb8:	4803      	ldr	r0, [pc, #12]	; (800adc8 <CDC_Init_FS+0x20>)
 800adba:	f7fe f913 	bl	8008fe4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	20005de8 	.word	0x20005de8
 800adc8:	2000530c 	.word	0x2000530c
 800adcc:	200055e8 	.word	0x200055e8

0800add0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800add4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800add6:	4618      	mov	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	71fb      	strb	r3, [r7, #7]
 800adec:	4613      	mov	r3, r2
 800adee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800adf0:	79fb      	ldrb	r3, [r7, #7]
 800adf2:	2b23      	cmp	r3, #35	; 0x23
 800adf4:	d84a      	bhi.n	800ae8c <CDC_Control_FS+0xac>
 800adf6:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <CDC_Control_FS+0x1c>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae8d 	.word	0x0800ae8d
 800ae00:	0800ae8d 	.word	0x0800ae8d
 800ae04:	0800ae8d 	.word	0x0800ae8d
 800ae08:	0800ae8d 	.word	0x0800ae8d
 800ae0c:	0800ae8d 	.word	0x0800ae8d
 800ae10:	0800ae8d 	.word	0x0800ae8d
 800ae14:	0800ae8d 	.word	0x0800ae8d
 800ae18:	0800ae8d 	.word	0x0800ae8d
 800ae1c:	0800ae8d 	.word	0x0800ae8d
 800ae20:	0800ae8d 	.word	0x0800ae8d
 800ae24:	0800ae8d 	.word	0x0800ae8d
 800ae28:	0800ae8d 	.word	0x0800ae8d
 800ae2c:	0800ae8d 	.word	0x0800ae8d
 800ae30:	0800ae8d 	.word	0x0800ae8d
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800ae8d 	.word	0x0800ae8d
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800ae8d 	.word	0x0800ae8d
 800ae4c:	0800ae8d 	.word	0x0800ae8d
 800ae50:	0800ae8d 	.word	0x0800ae8d
 800ae54:	0800ae8d 	.word	0x0800ae8d
 800ae58:	0800ae8d 	.word	0x0800ae8d
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae8d 	.word	0x0800ae8d
 800ae64:	0800ae8d 	.word	0x0800ae8d
 800ae68:	0800ae8d 	.word	0x0800ae8d
 800ae6c:	0800ae8d 	.word	0x0800ae8d
 800ae70:	0800ae8d 	.word	0x0800ae8d
 800ae74:	0800ae8d 	.word	0x0800ae8d
 800ae78:	0800ae8d 	.word	0x0800ae8d
 800ae7c:	0800ae8d 	.word	0x0800ae8d
 800ae80:	0800ae8d 	.word	0x0800ae8d
 800ae84:	0800ae8d 	.word	0x0800ae8d
 800ae88:	0800ae8d 	.word	0x0800ae8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae8c:	bf00      	nop
  }

  return (USBD_OK);
 800ae8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  bufferFlag = 0;
 800aea6:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <CDC_Receive_FS+0x5c>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	701a      	strb	r2, [r3, #0]
  if (byteInBuffer>2047)
 800aeac:	4b13      	ldr	r3, [pc, #76]	; (800aefc <CDC_Receive_FS+0x60>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeb4:	d302      	bcc.n	800aebc <CDC_Receive_FS+0x20>
  {//This is a error data loss...
	  byteInBuffer = 0;
 800aeb6:	4b11      	ldr	r3, [pc, #68]	; (800aefc <CDC_Receive_FS+0x60>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
  }

  memcpy(&RxBufferFS[byteInBuffer],&Buf[0], *Len);
 800aebc:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <CDC_Receive_FS+0x60>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a0f      	ldr	r2, [pc, #60]	; (800af00 <CDC_Receive_FS+0x64>)
 800aec2:	1898      	adds	r0, r3, r2
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	f000 fcee 	bl	800b8ac <memcpy>

  byteInBuffer += *Len;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	4b09      	ldr	r3, [pc, #36]	; (800aefc <CDC_Receive_FS+0x60>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4413      	add	r3, r2
 800aeda:	4a08      	ldr	r2, [pc, #32]	; (800aefc <CDC_Receive_FS+0x60>)
 800aedc:	6013      	str	r3, [r2, #0]


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	4808      	ldr	r0, [pc, #32]	; (800af04 <CDC_Receive_FS+0x68>)
 800aee2:	f7fe f87f 	bl	8008fe4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aee6:	4807      	ldr	r0, [pc, #28]	; (800af04 <CDC_Receive_FS+0x68>)
 800aee8:	f7fe f8da 	bl	80090a0 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800aeec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20006dec 	.word	0x20006dec
 800aefc:	20006de8 	.word	0x20006de8
 800af00:	200065e8 	.word	0x200065e8
 800af04:	2000530c 	.word	0x2000530c

0800af08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800af18:	4b0d      	ldr	r3, [pc, #52]	; (800af50 <CDC_Transmit_FS+0x48>)
 800af1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e00b      	b.n	800af46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800af2e:	887b      	ldrh	r3, [r7, #2]
 800af30:	461a      	mov	r2, r3
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	4806      	ldr	r0, [pc, #24]	; (800af50 <CDC_Transmit_FS+0x48>)
 800af36:	f7fe f833 	bl	8008fa0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800af3a:	4805      	ldr	r0, [pc, #20]	; (800af50 <CDC_Transmit_FS+0x48>)
 800af3c:	f7fe f870 	bl	8009020 <USBD_CDC_TransmitPacket>
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	2000530c 	.word	0x2000530c

0800af54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	4613      	mov	r3, r2
 800af60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2212      	movs	r2, #18
 800af88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800af8a:	4b03      	ldr	r3, [pc, #12]	; (800af98 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	200046b4 	.word	0x200046b4

0800af9c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2204      	movs	r2, #4
 800afac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800afae:	4b03      	ldr	r3, [pc, #12]	; (800afbc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	200046c8 	.word	0x200046c8

0800afc0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	6039      	str	r1, [r7, #0]
 800afca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d105      	bne.n	800afde <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	4907      	ldr	r1, [pc, #28]	; (800aff4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800afd6:	4808      	ldr	r0, [pc, #32]	; (800aff8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800afd8:	f7ff fa48 	bl	800a46c <USBD_GetString>
 800afdc:	e004      	b.n	800afe8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	4904      	ldr	r1, [pc, #16]	; (800aff4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800afe2:	4805      	ldr	r0, [pc, #20]	; (800aff8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800afe4:	f7ff fa42 	bl	800a46c <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20006df0 	.word	0x20006df0
 800aff8:	08010aa8 	.word	0x08010aa8

0800affc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	4603      	mov	r3, r0
 800b004:	6039      	str	r1, [r7, #0]
 800b006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	4904      	ldr	r1, [pc, #16]	; (800b01c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b00c:	4804      	ldr	r0, [pc, #16]	; (800b020 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b00e:	f7ff fa2d 	bl	800a46c <USBD_GetString>
  return USBD_StrDesc;
 800b012:	4b02      	ldr	r3, [pc, #8]	; (800b01c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20006df0 	.word	0x20006df0
 800b020:	08010ac0 	.word	0x08010ac0

0800b024 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	6039      	str	r1, [r7, #0]
 800b02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	221a      	movs	r2, #26
 800b034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b036:	f000 f843 	bl	800b0c0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b03a:	4b02      	ldr	r3, [pc, #8]	; (800b044 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200046cc 	.word	0x200046cc

0800b048 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	6039      	str	r1, [r7, #0]
 800b052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d105      	bne.n	800b066 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4907      	ldr	r1, [pc, #28]	; (800b07c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b05e:	4808      	ldr	r0, [pc, #32]	; (800b080 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b060:	f7ff fa04 	bl	800a46c <USBD_GetString>
 800b064:	e004      	b.n	800b070 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	4904      	ldr	r1, [pc, #16]	; (800b07c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b06a:	4805      	ldr	r0, [pc, #20]	; (800b080 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b06c:	f7ff f9fe 	bl	800a46c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b070:	4b02      	ldr	r3, [pc, #8]	; (800b07c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20006df0 	.word	0x20006df0
 800b080:	08010ad4 	.word	0x08010ad4

0800b084 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	6039      	str	r1, [r7, #0]
 800b08e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b090:	79fb      	ldrb	r3, [r7, #7]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d105      	bne.n	800b0a2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4907      	ldr	r1, [pc, #28]	; (800b0b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b09a:	4808      	ldr	r0, [pc, #32]	; (800b0bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b09c:	f7ff f9e6 	bl	800a46c <USBD_GetString>
 800b0a0:	e004      	b.n	800b0ac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	4904      	ldr	r1, [pc, #16]	; (800b0b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b0a6:	4805      	ldr	r0, [pc, #20]	; (800b0bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b0a8:	f7ff f9e0 	bl	800a46c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0ac:	4b02      	ldr	r3, [pc, #8]	; (800b0b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20006df0 	.word	0x20006df0
 800b0bc:	08010ae0 	.word	0x08010ae0

0800b0c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0c6:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <Get_SerialNum+0x44>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <Get_SerialNum+0x48>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0d2:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <Get_SerialNum+0x4c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4413      	add	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d009      	beq.n	800b0fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	4909      	ldr	r1, [pc, #36]	; (800b110 <Get_SerialNum+0x50>)
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 f814 	bl	800b118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0f0:	2204      	movs	r2, #4
 800b0f2:	4908      	ldr	r1, [pc, #32]	; (800b114 <Get_SerialNum+0x54>)
 800b0f4:	68b8      	ldr	r0, [r7, #8]
 800b0f6:	f000 f80f 	bl	800b118 <IntToUnicode>
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	1fff7590 	.word	0x1fff7590
 800b108:	1fff7594 	.word	0x1fff7594
 800b10c:	1fff7598 	.word	0x1fff7598
 800b110:	200046ce 	.word	0x200046ce
 800b114:	200046de 	.word	0x200046de

0800b118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b12a:	2300      	movs	r3, #0
 800b12c:	75fb      	strb	r3, [r7, #23]
 800b12e:	e027      	b.n	800b180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	0f1b      	lsrs	r3, r3, #28
 800b134:	2b09      	cmp	r3, #9
 800b136:	d80b      	bhi.n	800b150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	0f1b      	lsrs	r3, r3, #28
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	4619      	mov	r1, r3
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	440b      	add	r3, r1
 800b148:	3230      	adds	r2, #48	; 0x30
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	701a      	strb	r2, [r3, #0]
 800b14e:	e00a      	b.n	800b166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	0f1b      	lsrs	r3, r3, #28
 800b154:	b2da      	uxtb	r2, r3
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	4619      	mov	r1, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	440b      	add	r3, r1
 800b160:	3237      	adds	r2, #55	; 0x37
 800b162:	b2d2      	uxtb	r2, r2
 800b164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	011b      	lsls	r3, r3, #4
 800b16a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	3301      	adds	r3, #1
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	4413      	add	r3, r2
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	3301      	adds	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]
 800b180:	7dfa      	ldrb	r2, [r7, #23]
 800b182:	79fb      	ldrb	r3, [r7, #7]
 800b184:	429a      	cmp	r2, r3
 800b186:	d3d3      	bcc.n	800b130 <IntToUnicode+0x18>
  }
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <LL_AHB2_GRP1_EnableClock>:
{
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b19e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b1ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
}
 800b1bc:	bf00      	nop
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <LL_APB1_GRP1_EnableClock>:
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b1d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b1e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
}
 800b1ee:	bf00      	nop
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b09c      	sub	sp, #112	; 0x70
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b204:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	605a      	str	r2, [r3, #4]
 800b20e:	609a      	str	r2, [r3, #8]
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b214:	f107 030c 	add.w	r3, r7, #12
 800b218:	2250      	movs	r2, #80	; 0x50
 800b21a:	2100      	movs	r1, #0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 fb53 	bl	800b8c8 <memset>
  if(pcdHandle->Instance==USB)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a23      	ldr	r2, [pc, #140]	; (800b2b4 <HAL_PCD_MspInit+0xb8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d13e      	bne.n	800b2aa <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b22c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b230:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800b232:	2318      	movs	r3, #24
 800b234:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800b236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b23a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800b23c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b240:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800b242:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b246:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800b248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b24c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b24e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b252:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b254:	f107 030c 	add.w	r3, r7, #12
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fa f849 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800b264:	f7f6 faae 	bl	80017c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b268:	2001      	movs	r0, #1
 800b26a:	f7ff ff94 	bl	800b196 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b26e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b272:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b274:	2302      	movs	r3, #2
 800b276:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b27c:	2300      	movs	r3, #0
 800b27e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b280:	230a      	movs	r3, #10
 800b282:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b284:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b288:	4619      	mov	r1, r3
 800b28a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b28e:	f7f6 fe59 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b292:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b296:	f7ff ff97 	bl	800b1c8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b29a:	2200      	movs	r2, #0
 800b29c:	2100      	movs	r1, #0
 800b29e:	2014      	movs	r0, #20
 800b2a0:	f7f6 fe1b 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b2a4:	2014      	movs	r0, #20
 800b2a6:	f7f6 fe32 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	3770      	adds	r7, #112	; 0x70
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	40006800 	.word	0x40006800

0800b2b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f7fd ffcf 	bl	8009272 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b2ee:	78fa      	ldrb	r2, [r7, #3]
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	440b      	add	r3, r1
 800b2fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	78fb      	ldrb	r3, [r7, #3]
 800b304:	4619      	mov	r1, r3
 800b306:	f7fe f809 	bl	800931c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b082      	sub	sp, #8
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	460b      	mov	r3, r1
 800b31c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b324:	78fa      	ldrb	r2, [r7, #3]
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	440b      	add	r3, r1
 800b332:	333c      	adds	r3, #60	; 0x3c
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	4619      	mov	r1, r3
 800b33a:	f7fe f8a2 	bl	8009482 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b354:	4618      	mov	r0, r3
 800b356:	f7fe f9dc 	bl	8009712 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b36a:	2301      	movs	r3, #1
 800b36c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d001      	beq.n	800b37a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b376:	f7f6 fa25 	bl	80017c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b380:	7bfa      	ldrb	r2, [r7, #15]
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe f980 	bl	800968a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe f928 	bl	80095e6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe f97b 	bl	80096aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3bc:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <HAL_PCD_SuspendCallback+0x30>)
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	4a03      	ldr	r2, [pc, #12]	; (800b3d0 <HAL_PCD_SuspendCallback+0x30>)
 800b3c2:	f043 0306 	orr.w	r3, r3, #6
 800b3c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	e000ed00 	.word	0xe000ed00

0800b3d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d007      	beq.n	800b3f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3e4:	4b08      	ldr	r3, [pc, #32]	; (800b408 <HAL_PCD_ResumeCallback+0x34>)
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	4a07      	ldr	r2, [pc, #28]	; (800b408 <HAL_PCD_ResumeCallback+0x34>)
 800b3ea:	f023 0306 	bic.w	r3, r3, #6
 800b3ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b3f0:	f000 f9fc 	bl	800b7ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe f971 	bl	80096e2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	e000ed00 	.word	0xe000ed00

0800b40c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b414:	4a2c      	ldr	r2, [pc, #176]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a2a      	ldr	r2, [pc, #168]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b420:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b424:	f7f8 fc60 	bl	8003ce8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800b428:	4b27      	ldr	r3, [pc, #156]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b42a:	4a28      	ldr	r2, [pc, #160]	; (800b4cc <USBD_LL_Init+0xc0>)
 800b42c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b42e:	4b26      	ldr	r3, [pc, #152]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b430:	2208      	movs	r2, #8
 800b432:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b434:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b436:	2202      	movs	r2, #2
 800b438:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b43a:	4b23      	ldr	r3, [pc, #140]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b43c:	2202      	movs	r2, #2
 800b43e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b440:	4b21      	ldr	r3, [pc, #132]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b442:	2200      	movs	r2, #0
 800b444:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b446:	4b20      	ldr	r3, [pc, #128]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b448:	2200      	movs	r2, #0
 800b44a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b44c:	4b1e      	ldr	r3, [pc, #120]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b44e:	2200      	movs	r2, #0
 800b450:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b454:	2200      	movs	r2, #0
 800b456:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b458:	481b      	ldr	r0, [pc, #108]	; (800b4c8 <USBD_LL_Init+0xbc>)
 800b45a:	f7f6 fee3 	bl	8002224 <HAL_PCD_Init>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b464:	f7f6 f9ae 	bl	80017c4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b46e:	2318      	movs	r3, #24
 800b470:	2200      	movs	r2, #0
 800b472:	2100      	movs	r1, #0
 800b474:	f7f8 fbac 	bl	8003bd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b47e:	2358      	movs	r3, #88	; 0x58
 800b480:	2200      	movs	r2, #0
 800b482:	2180      	movs	r1, #128	; 0x80
 800b484:	f7f8 fba4 	bl	8003bd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b48e:	23c0      	movs	r3, #192	; 0xc0
 800b490:	2200      	movs	r2, #0
 800b492:	2181      	movs	r1, #129	; 0x81
 800b494:	f7f8 fb9c 	bl	8003bd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b49e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	f7f8 fb93 	bl	8003bd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b4b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2182      	movs	r1, #130	; 0x82
 800b4b8:	f7f8 fb8a 	bl	8003bd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20006ff0 	.word	0x20006ff0
 800b4cc:	40006800 	.word	0x40006800

0800b4d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7f6 ff75 	bl	80023d6 <HAL_PCD_Start>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 f980 	bl	800b7f8 <USBD_Get_USB_Status>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	4608      	mov	r0, r1
 800b510:	4611      	mov	r1, r2
 800b512:	461a      	mov	r2, r3
 800b514:	4603      	mov	r3, r0
 800b516:	70fb      	strb	r3, [r7, #3]
 800b518:	460b      	mov	r3, r1
 800b51a:	70bb      	strb	r3, [r7, #2]
 800b51c:	4613      	mov	r3, r2
 800b51e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b520:	2300      	movs	r3, #0
 800b522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b52e:	78bb      	ldrb	r3, [r7, #2]
 800b530:	883a      	ldrh	r2, [r7, #0]
 800b532:	78f9      	ldrb	r1, [r7, #3]
 800b534:	f7f7 f8bd 	bl	80026b2 <HAL_PCD_EP_Open>
 800b538:	4603      	mov	r3, r0
 800b53a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 f95a 	bl	800b7f8 <USBD_Get_USB_Status>
 800b544:	4603      	mov	r3, r0
 800b546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b548:	7bbb      	ldrb	r3, [r7, #14]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b084      	sub	sp, #16
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	4611      	mov	r1, r2
 800b570:	4618      	mov	r0, r3
 800b572:	f7f7 f8fb 	bl	800276c <HAL_PCD_EP_Close>
 800b576:	4603      	mov	r3, r0
 800b578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f93b 	bl	800b7f8 <USBD_Get_USB_Status>
 800b582:	4603      	mov	r3, r0
 800b584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b586:	7bbb      	ldrb	r3, [r7, #14]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f7 f9a4 	bl	80028fc <HAL_PCD_EP_SetStall>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f91c 	bl	800b7f8 <USBD_Get_USB_Status>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5e8:	78fa      	ldrb	r2, [r7, #3]
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f7 f9d7 	bl	80029a0 <HAL_PCD_EP_ClrStall>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f8fd 	bl	800b7f8 <USBD_Get_USB_Status>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b602:	7bbb      	ldrb	r3, [r7, #14]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b61e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b624:	2b00      	cmp	r3, #0
 800b626:	da0c      	bge.n	800b642 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	4613      	mov	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	00db      	lsls	r3, r3, #3
 800b63a:	440b      	add	r3, r1
 800b63c:	3302      	adds	r3, #2
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	e00b      	b.n	800b65a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b642:	78fb      	ldrb	r3, [r7, #3]
 800b644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	440b      	add	r3, r1
 800b654:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b658:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	4611      	mov	r1, r2
 800b684:	4618      	mov	r0, r3
 800b686:	f7f6 ffef 	bl	8002668 <HAL_PCD_SetAddress>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f8b1 	bl	800b7f8 <USBD_Get_USB_Status>
 800b696:	4603      	mov	r3, r0
 800b698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6c2:	7af9      	ldrb	r1, [r7, #11]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	f7f7 f8e1 	bl	800288e <HAL_PCD_EP_Transmit>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f890 	bl	800b7f8 <USBD_Get_USB_Status>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b086      	sub	sp, #24
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	603b      	str	r3, [r7, #0]
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b704:	7af9      	ldrb	r1, [r7, #11]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	f7f7 f877 	bl	80027fc <HAL_PCD_EP_Receive>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	4618      	mov	r0, r3
 800b716:	f000 f86f 	bl	800b7f8 <USBD_Get_USB_Status>
 800b71a:	4603      	mov	r3, r0
 800b71c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b71e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b73a:	78fa      	ldrb	r2, [r7, #3]
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f7f7 f88d 	bl	800285e <HAL_PCD_EP_GetRxCount>
 800b744:	4603      	mov	r3, r0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	460b      	mov	r3, r1
 800b75a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <HAL_PCDEx_LPM_Callback+0x18>
 800b762:	2b01      	cmp	r3, #1
 800b764:	d013      	beq.n	800b78e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b766:	e023      	b.n	800b7b0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d007      	beq.n	800b780 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b770:	f000 f83c 	bl	800b7ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b774:	4b10      	ldr	r3, [pc, #64]	; (800b7b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	4a0f      	ldr	r2, [pc, #60]	; (800b7b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b77a:	f023 0306 	bic.w	r3, r3, #6
 800b77e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b786:	4618      	mov	r0, r3
 800b788:	f7fd ffab 	bl	80096e2 <USBD_LL_Resume>
    break;
 800b78c:	e010      	b.n	800b7b0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b794:	4618      	mov	r0, r3
 800b796:	f7fd ff88 	bl	80096aa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d005      	beq.n	800b7ae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7a2:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	4a04      	ldr	r2, [pc, #16]	; (800b7b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b7a8:	f043 0306 	orr.w	r3, r3, #6
 800b7ac:	6113      	str	r3, [r2, #16]
    break;
 800b7ae:	bf00      	nop
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	e000ed00 	.word	0xe000ed00

0800b7bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b7c4:	4b03      	ldr	r3, [pc, #12]	; (800b7d4 <USBD_static_malloc+0x18>)
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	200072e4 	.word	0x200072e4

0800b7d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b7f0:	f7f5 feb0 	bl	8001554 <SystemClock_Config>
}
 800b7f4:	bf00      	nop
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b806:	79fb      	ldrb	r3, [r7, #7]
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d817      	bhi.n	800b83c <USBD_Get_USB_Status+0x44>
 800b80c:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <USBD_Get_USB_Status+0x1c>)
 800b80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b812:	bf00      	nop
 800b814:	0800b825 	.word	0x0800b825
 800b818:	0800b82b 	.word	0x0800b82b
 800b81c:	0800b831 	.word	0x0800b831
 800b820:	0800b837 	.word	0x0800b837
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b824:	2300      	movs	r3, #0
 800b826:	73fb      	strb	r3, [r7, #15]
    break;
 800b828:	e00b      	b.n	800b842 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b82a:	2303      	movs	r3, #3
 800b82c:	73fb      	strb	r3, [r7, #15]
    break;
 800b82e:	e008      	b.n	800b842 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b830:	2301      	movs	r3, #1
 800b832:	73fb      	strb	r3, [r7, #15]
    break;
 800b834:	e005      	b.n	800b842 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b836:	2303      	movs	r3, #3
 800b838:	73fb      	strb	r3, [r7, #15]
    break;
 800b83a:	e002      	b.n	800b842 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b83c:	2303      	movs	r3, #3
 800b83e:	73fb      	strb	r3, [r7, #15]
    break;
 800b840:	bf00      	nop
  }
  return usb_status;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <atof>:
 800b850:	2100      	movs	r1, #0
 800b852:	f001 bd09 	b.w	800d268 <strtod>
	...

0800b858 <__errno>:
 800b858:	4b01      	ldr	r3, [pc, #4]	; (800b860 <__errno+0x8>)
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	200046e8 	.word	0x200046e8

0800b864 <__libc_init_array>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	4d0d      	ldr	r5, [pc, #52]	; (800b89c <__libc_init_array+0x38>)
 800b868:	4c0d      	ldr	r4, [pc, #52]	; (800b8a0 <__libc_init_array+0x3c>)
 800b86a:	1b64      	subs	r4, r4, r5
 800b86c:	10a4      	asrs	r4, r4, #2
 800b86e:	2600      	movs	r6, #0
 800b870:	42a6      	cmp	r6, r4
 800b872:	d109      	bne.n	800b888 <__libc_init_array+0x24>
 800b874:	4d0b      	ldr	r5, [pc, #44]	; (800b8a4 <__libc_init_array+0x40>)
 800b876:	4c0c      	ldr	r4, [pc, #48]	; (800b8a8 <__libc_init_array+0x44>)
 800b878:	f005 f860 	bl	801093c <_init>
 800b87c:	1b64      	subs	r4, r4, r5
 800b87e:	10a4      	asrs	r4, r4, #2
 800b880:	2600      	movs	r6, #0
 800b882:	42a6      	cmp	r6, r4
 800b884:	d105      	bne.n	800b892 <__libc_init_array+0x2e>
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	f855 3b04 	ldr.w	r3, [r5], #4
 800b88c:	4798      	blx	r3
 800b88e:	3601      	adds	r6, #1
 800b890:	e7ee      	b.n	800b870 <__libc_init_array+0xc>
 800b892:	f855 3b04 	ldr.w	r3, [r5], #4
 800b896:	4798      	blx	r3
 800b898:	3601      	adds	r6, #1
 800b89a:	e7f2      	b.n	800b882 <__libc_init_array+0x1e>
 800b89c:	080162a4 	.word	0x080162a4
 800b8a0:	080162a4 	.word	0x080162a4
 800b8a4:	080162a4 	.word	0x080162a4
 800b8a8:	080162a8 	.word	0x080162a8

0800b8ac <memcpy>:
 800b8ac:	440a      	add	r2, r1
 800b8ae:	4291      	cmp	r1, r2
 800b8b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8b4:	d100      	bne.n	800b8b8 <memcpy+0xc>
 800b8b6:	4770      	bx	lr
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8c2:	4291      	cmp	r1, r2
 800b8c4:	d1f9      	bne.n	800b8ba <memcpy+0xe>
 800b8c6:	bd10      	pop	{r4, pc}

0800b8c8 <memset>:
 800b8c8:	4402      	add	r2, r0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d100      	bne.n	800b8d2 <memset+0xa>
 800b8d0:	4770      	bx	lr
 800b8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b8d6:	e7f9      	b.n	800b8cc <memset+0x4>

0800b8d8 <__cvt>:
 800b8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8dc:	ec55 4b10 	vmov	r4, r5, d0
 800b8e0:	2d00      	cmp	r5, #0
 800b8e2:	460e      	mov	r6, r1
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	bfbb      	ittet	lt
 800b8ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8ee:	461d      	movlt	r5, r3
 800b8f0:	2300      	movge	r3, #0
 800b8f2:	232d      	movlt	r3, #45	; 0x2d
 800b8f4:	700b      	strb	r3, [r1, #0]
 800b8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8fc:	4691      	mov	r9, r2
 800b8fe:	f023 0820 	bic.w	r8, r3, #32
 800b902:	bfbc      	itt	lt
 800b904:	4622      	movlt	r2, r4
 800b906:	4614      	movlt	r4, r2
 800b908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b90c:	d005      	beq.n	800b91a <__cvt+0x42>
 800b90e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b912:	d100      	bne.n	800b916 <__cvt+0x3e>
 800b914:	3601      	adds	r6, #1
 800b916:	2102      	movs	r1, #2
 800b918:	e000      	b.n	800b91c <__cvt+0x44>
 800b91a:	2103      	movs	r1, #3
 800b91c:	ab03      	add	r3, sp, #12
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	ab02      	add	r3, sp, #8
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	ec45 4b10 	vmov	d0, r4, r5
 800b928:	4653      	mov	r3, sl
 800b92a:	4632      	mov	r2, r6
 800b92c:	f001 fdb8 	bl	800d4a0 <_dtoa_r>
 800b930:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b934:	4607      	mov	r7, r0
 800b936:	d102      	bne.n	800b93e <__cvt+0x66>
 800b938:	f019 0f01 	tst.w	r9, #1
 800b93c:	d022      	beq.n	800b984 <__cvt+0xac>
 800b93e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b942:	eb07 0906 	add.w	r9, r7, r6
 800b946:	d110      	bne.n	800b96a <__cvt+0x92>
 800b948:	783b      	ldrb	r3, [r7, #0]
 800b94a:	2b30      	cmp	r3, #48	; 0x30
 800b94c:	d10a      	bne.n	800b964 <__cvt+0x8c>
 800b94e:	2200      	movs	r2, #0
 800b950:	2300      	movs	r3, #0
 800b952:	4620      	mov	r0, r4
 800b954:	4629      	mov	r1, r5
 800b956:	f7f5 f88f 	bl	8000a78 <__aeabi_dcmpeq>
 800b95a:	b918      	cbnz	r0, 800b964 <__cvt+0x8c>
 800b95c:	f1c6 0601 	rsb	r6, r6, #1
 800b960:	f8ca 6000 	str.w	r6, [sl]
 800b964:	f8da 3000 	ldr.w	r3, [sl]
 800b968:	4499      	add	r9, r3
 800b96a:	2200      	movs	r2, #0
 800b96c:	2300      	movs	r3, #0
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	f7f5 f881 	bl	8000a78 <__aeabi_dcmpeq>
 800b976:	b108      	cbz	r0, 800b97c <__cvt+0xa4>
 800b978:	f8cd 900c 	str.w	r9, [sp, #12]
 800b97c:	2230      	movs	r2, #48	; 0x30
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	454b      	cmp	r3, r9
 800b982:	d307      	bcc.n	800b994 <__cvt+0xbc>
 800b984:	9b03      	ldr	r3, [sp, #12]
 800b986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b988:	1bdb      	subs	r3, r3, r7
 800b98a:	4638      	mov	r0, r7
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	b004      	add	sp, #16
 800b990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b994:	1c59      	adds	r1, r3, #1
 800b996:	9103      	str	r1, [sp, #12]
 800b998:	701a      	strb	r2, [r3, #0]
 800b99a:	e7f0      	b.n	800b97e <__cvt+0xa6>

0800b99c <__exponent>:
 800b99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	bfb8      	it	lt
 800b9a4:	4249      	neglt	r1, r1
 800b9a6:	f803 2b02 	strb.w	r2, [r3], #2
 800b9aa:	bfb4      	ite	lt
 800b9ac:	222d      	movlt	r2, #45	; 0x2d
 800b9ae:	222b      	movge	r2, #43	; 0x2b
 800b9b0:	2909      	cmp	r1, #9
 800b9b2:	7042      	strb	r2, [r0, #1]
 800b9b4:	dd2a      	ble.n	800ba0c <__exponent+0x70>
 800b9b6:	f10d 0407 	add.w	r4, sp, #7
 800b9ba:	46a4      	mov	ip, r4
 800b9bc:	270a      	movs	r7, #10
 800b9be:	46a6      	mov	lr, r4
 800b9c0:	460a      	mov	r2, r1
 800b9c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9c6:	fb07 1516 	mls	r5, r7, r6, r1
 800b9ca:	3530      	adds	r5, #48	; 0x30
 800b9cc:	2a63      	cmp	r2, #99	; 0x63
 800b9ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	dcf1      	bgt.n	800b9be <__exponent+0x22>
 800b9da:	3130      	adds	r1, #48	; 0x30
 800b9dc:	f1ae 0502 	sub.w	r5, lr, #2
 800b9e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b9e4:	1c44      	adds	r4, r0, #1
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4561      	cmp	r1, ip
 800b9ea:	d30a      	bcc.n	800ba02 <__exponent+0x66>
 800b9ec:	f10d 0209 	add.w	r2, sp, #9
 800b9f0:	eba2 020e 	sub.w	r2, r2, lr
 800b9f4:	4565      	cmp	r5, ip
 800b9f6:	bf88      	it	hi
 800b9f8:	2200      	movhi	r2, #0
 800b9fa:	4413      	add	r3, r2
 800b9fc:	1a18      	subs	r0, r3, r0
 800b9fe:	b003      	add	sp, #12
 800ba00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba06:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba0a:	e7ed      	b.n	800b9e8 <__exponent+0x4c>
 800ba0c:	2330      	movs	r3, #48	; 0x30
 800ba0e:	3130      	adds	r1, #48	; 0x30
 800ba10:	7083      	strb	r3, [r0, #2]
 800ba12:	70c1      	strb	r1, [r0, #3]
 800ba14:	1d03      	adds	r3, r0, #4
 800ba16:	e7f1      	b.n	800b9fc <__exponent+0x60>

0800ba18 <_printf_float>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	ed2d 8b02 	vpush	{d8}
 800ba20:	b08d      	sub	sp, #52	; 0x34
 800ba22:	460c      	mov	r4, r1
 800ba24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba28:	4616      	mov	r6, r2
 800ba2a:	461f      	mov	r7, r3
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	f002 fe95 	bl	800e75c <_localeconv_r>
 800ba32:	f8d0 a000 	ldr.w	sl, [r0]
 800ba36:	4650      	mov	r0, sl
 800ba38:	f7f4 fba2 	bl	8000180 <strlen>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	f8d8 3000 	ldr.w	r3, [r8]
 800ba48:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	f103 0208 	add.w	r2, r3, #8
 800ba56:	f8c8 2000 	str.w	r2, [r8]
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba6a:	9307      	str	r3, [sp, #28]
 800ba6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba70:	ee08 0a10 	vmov	s16, r0
 800ba74:	4b9f      	ldr	r3, [pc, #636]	; (800bcf4 <_printf_float+0x2dc>)
 800ba76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7e:	f7f5 f82d 	bl	8000adc <__aeabi_dcmpun>
 800ba82:	bb88      	cbnz	r0, 800bae8 <_printf_float+0xd0>
 800ba84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba88:	4b9a      	ldr	r3, [pc, #616]	; (800bcf4 <_printf_float+0x2dc>)
 800ba8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8e:	f7f5 f807 	bl	8000aa0 <__aeabi_dcmple>
 800ba92:	bb48      	cbnz	r0, 800bae8 <_printf_float+0xd0>
 800ba94:	2200      	movs	r2, #0
 800ba96:	2300      	movs	r3, #0
 800ba98:	4640      	mov	r0, r8
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	f7f4 fff6 	bl	8000a8c <__aeabi_dcmplt>
 800baa0:	b110      	cbz	r0, 800baa8 <_printf_float+0x90>
 800baa2:	232d      	movs	r3, #45	; 0x2d
 800baa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa8:	4b93      	ldr	r3, [pc, #588]	; (800bcf8 <_printf_float+0x2e0>)
 800baaa:	4894      	ldr	r0, [pc, #592]	; (800bcfc <_printf_float+0x2e4>)
 800baac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bab0:	bf94      	ite	ls
 800bab2:	4698      	movls	r8, r3
 800bab4:	4680      	movhi	r8, r0
 800bab6:	2303      	movs	r3, #3
 800bab8:	6123      	str	r3, [r4, #16]
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	f023 0204 	bic.w	r2, r3, #4
 800bac0:	6022      	str	r2, [r4, #0]
 800bac2:	f04f 0900 	mov.w	r9, #0
 800bac6:	9700      	str	r7, [sp, #0]
 800bac8:	4633      	mov	r3, r6
 800baca:	aa0b      	add	r2, sp, #44	; 0x2c
 800bacc:	4621      	mov	r1, r4
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 f9d8 	bl	800be84 <_printf_common>
 800bad4:	3001      	adds	r0, #1
 800bad6:	f040 8090 	bne.w	800bbfa <_printf_float+0x1e2>
 800bada:	f04f 30ff 	mov.w	r0, #4294967295
 800bade:	b00d      	add	sp, #52	; 0x34
 800bae0:	ecbd 8b02 	vpop	{d8}
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	4642      	mov	r2, r8
 800baea:	464b      	mov	r3, r9
 800baec:	4640      	mov	r0, r8
 800baee:	4649      	mov	r1, r9
 800baf0:	f7f4 fff4 	bl	8000adc <__aeabi_dcmpun>
 800baf4:	b140      	cbz	r0, 800bb08 <_printf_float+0xf0>
 800baf6:	464b      	mov	r3, r9
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bfbc      	itt	lt
 800bafc:	232d      	movlt	r3, #45	; 0x2d
 800bafe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb02:	487f      	ldr	r0, [pc, #508]	; (800bd00 <_printf_float+0x2e8>)
 800bb04:	4b7f      	ldr	r3, [pc, #508]	; (800bd04 <_printf_float+0x2ec>)
 800bb06:	e7d1      	b.n	800baac <_printf_float+0x94>
 800bb08:	6863      	ldr	r3, [r4, #4]
 800bb0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb0e:	9206      	str	r2, [sp, #24]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	d13f      	bne.n	800bb94 <_printf_float+0x17c>
 800bb14:	2306      	movs	r3, #6
 800bb16:	6063      	str	r3, [r4, #4]
 800bb18:	9b05      	ldr	r3, [sp, #20]
 800bb1a:	6861      	ldr	r1, [r4, #4]
 800bb1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb20:	2300      	movs	r3, #0
 800bb22:	9303      	str	r3, [sp, #12]
 800bb24:	ab0a      	add	r3, sp, #40	; 0x28
 800bb26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb2a:	ab09      	add	r3, sp, #36	; 0x24
 800bb2c:	ec49 8b10 	vmov	d0, r8, r9
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	6022      	str	r2, [r4, #0]
 800bb34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f7ff fecd 	bl	800b8d8 <__cvt>
 800bb3e:	9b06      	ldr	r3, [sp, #24]
 800bb40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb42:	2b47      	cmp	r3, #71	; 0x47
 800bb44:	4680      	mov	r8, r0
 800bb46:	d108      	bne.n	800bb5a <_printf_float+0x142>
 800bb48:	1cc8      	adds	r0, r1, #3
 800bb4a:	db02      	blt.n	800bb52 <_printf_float+0x13a>
 800bb4c:	6863      	ldr	r3, [r4, #4]
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	dd41      	ble.n	800bbd6 <_printf_float+0x1be>
 800bb52:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb56:	fa5f fb8b 	uxtb.w	fp, fp
 800bb5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb5e:	d820      	bhi.n	800bba2 <_printf_float+0x18a>
 800bb60:	3901      	subs	r1, #1
 800bb62:	465a      	mov	r2, fp
 800bb64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb68:	9109      	str	r1, [sp, #36]	; 0x24
 800bb6a:	f7ff ff17 	bl	800b99c <__exponent>
 800bb6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb70:	1813      	adds	r3, r2, r0
 800bb72:	2a01      	cmp	r2, #1
 800bb74:	4681      	mov	r9, r0
 800bb76:	6123      	str	r3, [r4, #16]
 800bb78:	dc02      	bgt.n	800bb80 <_printf_float+0x168>
 800bb7a:	6822      	ldr	r2, [r4, #0]
 800bb7c:	07d2      	lsls	r2, r2, #31
 800bb7e:	d501      	bpl.n	800bb84 <_printf_float+0x16c>
 800bb80:	3301      	adds	r3, #1
 800bb82:	6123      	str	r3, [r4, #16]
 800bb84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d09c      	beq.n	800bac6 <_printf_float+0xae>
 800bb8c:	232d      	movs	r3, #45	; 0x2d
 800bb8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb92:	e798      	b.n	800bac6 <_printf_float+0xae>
 800bb94:	9a06      	ldr	r2, [sp, #24]
 800bb96:	2a47      	cmp	r2, #71	; 0x47
 800bb98:	d1be      	bne.n	800bb18 <_printf_float+0x100>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1bc      	bne.n	800bb18 <_printf_float+0x100>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e7b9      	b.n	800bb16 <_printf_float+0xfe>
 800bba2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bba6:	d118      	bne.n	800bbda <_printf_float+0x1c2>
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	6863      	ldr	r3, [r4, #4]
 800bbac:	dd0b      	ble.n	800bbc6 <_printf_float+0x1ae>
 800bbae:	6121      	str	r1, [r4, #16]
 800bbb0:	b913      	cbnz	r3, 800bbb8 <_printf_float+0x1a0>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	07d0      	lsls	r0, r2, #31
 800bbb6:	d502      	bpl.n	800bbbe <_printf_float+0x1a6>
 800bbb8:	3301      	adds	r3, #1
 800bbba:	440b      	add	r3, r1
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbc0:	f04f 0900 	mov.w	r9, #0
 800bbc4:	e7de      	b.n	800bb84 <_printf_float+0x16c>
 800bbc6:	b913      	cbnz	r3, 800bbce <_printf_float+0x1b6>
 800bbc8:	6822      	ldr	r2, [r4, #0]
 800bbca:	07d2      	lsls	r2, r2, #31
 800bbcc:	d501      	bpl.n	800bbd2 <_printf_float+0x1ba>
 800bbce:	3302      	adds	r3, #2
 800bbd0:	e7f4      	b.n	800bbbc <_printf_float+0x1a4>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e7f2      	b.n	800bbbc <_printf_float+0x1a4>
 800bbd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	db05      	blt.n	800bbec <_printf_float+0x1d4>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	6121      	str	r1, [r4, #16]
 800bbe4:	07d8      	lsls	r0, r3, #31
 800bbe6:	d5ea      	bpl.n	800bbbe <_printf_float+0x1a6>
 800bbe8:	1c4b      	adds	r3, r1, #1
 800bbea:	e7e7      	b.n	800bbbc <_printf_float+0x1a4>
 800bbec:	2900      	cmp	r1, #0
 800bbee:	bfd4      	ite	le
 800bbf0:	f1c1 0202 	rsble	r2, r1, #2
 800bbf4:	2201      	movgt	r2, #1
 800bbf6:	4413      	add	r3, r2
 800bbf8:	e7e0      	b.n	800bbbc <_printf_float+0x1a4>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	055a      	lsls	r2, r3, #21
 800bbfe:	d407      	bmi.n	800bc10 <_printf_float+0x1f8>
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	4642      	mov	r2, r8
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d12c      	bne.n	800bc68 <_printf_float+0x250>
 800bc0e:	e764      	b.n	800bada <_printf_float+0xc2>
 800bc10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc14:	f240 80e0 	bls.w	800bdd8 <_printf_float+0x3c0>
 800bc18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f7f4 ff2a 	bl	8000a78 <__aeabi_dcmpeq>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d034      	beq.n	800bc92 <_printf_float+0x27a>
 800bc28:	4a37      	ldr	r2, [pc, #220]	; (800bd08 <_printf_float+0x2f0>)
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	f43f af51 	beq.w	800bada <_printf_float+0xc2>
 800bc38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	db02      	blt.n	800bc46 <_printf_float+0x22e>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	07d8      	lsls	r0, r3, #31
 800bc44:	d510      	bpl.n	800bc68 <_printf_float+0x250>
 800bc46:	ee18 3a10 	vmov	r3, s16
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f af41 	beq.w	800bada <_printf_float+0xc2>
 800bc58:	f04f 0800 	mov.w	r8, #0
 800bc5c:	f104 091a 	add.w	r9, r4, #26
 800bc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc62:	3b01      	subs	r3, #1
 800bc64:	4543      	cmp	r3, r8
 800bc66:	dc09      	bgt.n	800bc7c <_printf_float+0x264>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	079b      	lsls	r3, r3, #30
 800bc6c:	f100 8105 	bmi.w	800be7a <_printf_float+0x462>
 800bc70:	68e0      	ldr	r0, [r4, #12]
 800bc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc74:	4298      	cmp	r0, r3
 800bc76:	bfb8      	it	lt
 800bc78:	4618      	movlt	r0, r3
 800bc7a:	e730      	b.n	800bade <_printf_float+0xc6>
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	464a      	mov	r2, r9
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b8      	blx	r7
 800bc86:	3001      	adds	r0, #1
 800bc88:	f43f af27 	beq.w	800bada <_printf_float+0xc2>
 800bc8c:	f108 0801 	add.w	r8, r8, #1
 800bc90:	e7e6      	b.n	800bc60 <_printf_float+0x248>
 800bc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dc39      	bgt.n	800bd0c <_printf_float+0x2f4>
 800bc98:	4a1b      	ldr	r2, [pc, #108]	; (800bd08 <_printf_float+0x2f0>)
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	f43f af19 	beq.w	800bada <_printf_float+0xc2>
 800bca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcac:	4313      	orrs	r3, r2
 800bcae:	d102      	bne.n	800bcb6 <_printf_float+0x29e>
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	07d9      	lsls	r1, r3, #31
 800bcb4:	d5d8      	bpl.n	800bc68 <_printf_float+0x250>
 800bcb6:	ee18 3a10 	vmov	r3, s16
 800bcba:	4652      	mov	r2, sl
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b8      	blx	r7
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f43f af09 	beq.w	800bada <_printf_float+0xc2>
 800bcc8:	f04f 0900 	mov.w	r9, #0
 800bccc:	f104 0a1a 	add.w	sl, r4, #26
 800bcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd2:	425b      	negs	r3, r3
 800bcd4:	454b      	cmp	r3, r9
 800bcd6:	dc01      	bgt.n	800bcdc <_printf_float+0x2c4>
 800bcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcda:	e792      	b.n	800bc02 <_printf_float+0x1ea>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	4652      	mov	r2, sl
 800bce0:	4631      	mov	r1, r6
 800bce2:	4628      	mov	r0, r5
 800bce4:	47b8      	blx	r7
 800bce6:	3001      	adds	r0, #1
 800bce8:	f43f aef7 	beq.w	800bada <_printf_float+0xc2>
 800bcec:	f109 0901 	add.w	r9, r9, #1
 800bcf0:	e7ee      	b.n	800bcd0 <_printf_float+0x2b8>
 800bcf2:	bf00      	nop
 800bcf4:	7fefffff 	.word	0x7fefffff
 800bcf8:	08015dec 	.word	0x08015dec
 800bcfc:	08015df0 	.word	0x08015df0
 800bd00:	08015df8 	.word	0x08015df8
 800bd04:	08015df4 	.word	0x08015df4
 800bd08:	08015dfc 	.word	0x08015dfc
 800bd0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd10:	429a      	cmp	r2, r3
 800bd12:	bfa8      	it	ge
 800bd14:	461a      	movge	r2, r3
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	4691      	mov	r9, r2
 800bd1a:	dc37      	bgt.n	800bd8c <_printf_float+0x374>
 800bd1c:	f04f 0b00 	mov.w	fp, #0
 800bd20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd24:	f104 021a 	add.w	r2, r4, #26
 800bd28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	eba3 0309 	sub.w	r3, r3, r9
 800bd30:	455b      	cmp	r3, fp
 800bd32:	dc33      	bgt.n	800bd9c <_printf_float+0x384>
 800bd34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	db3b      	blt.n	800bdb4 <_printf_float+0x39c>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	07da      	lsls	r2, r3, #31
 800bd40:	d438      	bmi.n	800bdb4 <_printf_float+0x39c>
 800bd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd44:	9a05      	ldr	r2, [sp, #20]
 800bd46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd48:	1a9a      	subs	r2, r3, r2
 800bd4a:	eba3 0901 	sub.w	r9, r3, r1
 800bd4e:	4591      	cmp	r9, r2
 800bd50:	bfa8      	it	ge
 800bd52:	4691      	movge	r9, r2
 800bd54:	f1b9 0f00 	cmp.w	r9, #0
 800bd58:	dc35      	bgt.n	800bdc6 <_printf_float+0x3ae>
 800bd5a:	f04f 0800 	mov.w	r8, #0
 800bd5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd62:	f104 0a1a 	add.w	sl, r4, #26
 800bd66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	eba3 0309 	sub.w	r3, r3, r9
 800bd70:	4543      	cmp	r3, r8
 800bd72:	f77f af79 	ble.w	800bc68 <_printf_float+0x250>
 800bd76:	2301      	movs	r3, #1
 800bd78:	4652      	mov	r2, sl
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	f43f aeaa 	beq.w	800bada <_printf_float+0xc2>
 800bd86:	f108 0801 	add.w	r8, r8, #1
 800bd8a:	e7ec      	b.n	800bd66 <_printf_float+0x34e>
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4642      	mov	r2, r8
 800bd92:	4628      	mov	r0, r5
 800bd94:	47b8      	blx	r7
 800bd96:	3001      	adds	r0, #1
 800bd98:	d1c0      	bne.n	800bd1c <_printf_float+0x304>
 800bd9a:	e69e      	b.n	800bada <_printf_float+0xc2>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	4631      	mov	r1, r6
 800bda0:	4628      	mov	r0, r5
 800bda2:	9205      	str	r2, [sp, #20]
 800bda4:	47b8      	blx	r7
 800bda6:	3001      	adds	r0, #1
 800bda8:	f43f ae97 	beq.w	800bada <_printf_float+0xc2>
 800bdac:	9a05      	ldr	r2, [sp, #20]
 800bdae:	f10b 0b01 	add.w	fp, fp, #1
 800bdb2:	e7b9      	b.n	800bd28 <_printf_float+0x310>
 800bdb4:	ee18 3a10 	vmov	r3, s16
 800bdb8:	4652      	mov	r2, sl
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d1be      	bne.n	800bd42 <_printf_float+0x32a>
 800bdc4:	e689      	b.n	800bada <_printf_float+0xc2>
 800bdc6:	9a05      	ldr	r2, [sp, #20]
 800bdc8:	464b      	mov	r3, r9
 800bdca:	4442      	add	r2, r8
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4628      	mov	r0, r5
 800bdd0:	47b8      	blx	r7
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	d1c1      	bne.n	800bd5a <_printf_float+0x342>
 800bdd6:	e680      	b.n	800bada <_printf_float+0xc2>
 800bdd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdda:	2a01      	cmp	r2, #1
 800bddc:	dc01      	bgt.n	800bde2 <_printf_float+0x3ca>
 800bdde:	07db      	lsls	r3, r3, #31
 800bde0:	d538      	bpl.n	800be54 <_printf_float+0x43c>
 800bde2:	2301      	movs	r3, #1
 800bde4:	4642      	mov	r2, r8
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	f43f ae74 	beq.w	800bada <_printf_float+0xc2>
 800bdf2:	ee18 3a10 	vmov	r3, s16
 800bdf6:	4652      	mov	r2, sl
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	47b8      	blx	r7
 800bdfe:	3001      	adds	r0, #1
 800be00:	f43f ae6b 	beq.w	800bada <_printf_float+0xc2>
 800be04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be08:	2200      	movs	r2, #0
 800be0a:	2300      	movs	r3, #0
 800be0c:	f7f4 fe34 	bl	8000a78 <__aeabi_dcmpeq>
 800be10:	b9d8      	cbnz	r0, 800be4a <_printf_float+0x432>
 800be12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be14:	f108 0201 	add.w	r2, r8, #1
 800be18:	3b01      	subs	r3, #1
 800be1a:	4631      	mov	r1, r6
 800be1c:	4628      	mov	r0, r5
 800be1e:	47b8      	blx	r7
 800be20:	3001      	adds	r0, #1
 800be22:	d10e      	bne.n	800be42 <_printf_float+0x42a>
 800be24:	e659      	b.n	800bada <_printf_float+0xc2>
 800be26:	2301      	movs	r3, #1
 800be28:	4652      	mov	r2, sl
 800be2a:	4631      	mov	r1, r6
 800be2c:	4628      	mov	r0, r5
 800be2e:	47b8      	blx	r7
 800be30:	3001      	adds	r0, #1
 800be32:	f43f ae52 	beq.w	800bada <_printf_float+0xc2>
 800be36:	f108 0801 	add.w	r8, r8, #1
 800be3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3c:	3b01      	subs	r3, #1
 800be3e:	4543      	cmp	r3, r8
 800be40:	dcf1      	bgt.n	800be26 <_printf_float+0x40e>
 800be42:	464b      	mov	r3, r9
 800be44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be48:	e6dc      	b.n	800bc04 <_printf_float+0x1ec>
 800be4a:	f04f 0800 	mov.w	r8, #0
 800be4e:	f104 0a1a 	add.w	sl, r4, #26
 800be52:	e7f2      	b.n	800be3a <_printf_float+0x422>
 800be54:	2301      	movs	r3, #1
 800be56:	4642      	mov	r2, r8
 800be58:	e7df      	b.n	800be1a <_printf_float+0x402>
 800be5a:	2301      	movs	r3, #1
 800be5c:	464a      	mov	r2, r9
 800be5e:	4631      	mov	r1, r6
 800be60:	4628      	mov	r0, r5
 800be62:	47b8      	blx	r7
 800be64:	3001      	adds	r0, #1
 800be66:	f43f ae38 	beq.w	800bada <_printf_float+0xc2>
 800be6a:	f108 0801 	add.w	r8, r8, #1
 800be6e:	68e3      	ldr	r3, [r4, #12]
 800be70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be72:	1a5b      	subs	r3, r3, r1
 800be74:	4543      	cmp	r3, r8
 800be76:	dcf0      	bgt.n	800be5a <_printf_float+0x442>
 800be78:	e6fa      	b.n	800bc70 <_printf_float+0x258>
 800be7a:	f04f 0800 	mov.w	r8, #0
 800be7e:	f104 0919 	add.w	r9, r4, #25
 800be82:	e7f4      	b.n	800be6e <_printf_float+0x456>

0800be84 <_printf_common>:
 800be84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be88:	4616      	mov	r6, r2
 800be8a:	4699      	mov	r9, r3
 800be8c:	688a      	ldr	r2, [r1, #8]
 800be8e:	690b      	ldr	r3, [r1, #16]
 800be90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be94:	4293      	cmp	r3, r2
 800be96:	bfb8      	it	lt
 800be98:	4613      	movlt	r3, r2
 800be9a:	6033      	str	r3, [r6, #0]
 800be9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bea0:	4607      	mov	r7, r0
 800bea2:	460c      	mov	r4, r1
 800bea4:	b10a      	cbz	r2, 800beaa <_printf_common+0x26>
 800bea6:	3301      	adds	r3, #1
 800bea8:	6033      	str	r3, [r6, #0]
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	0699      	lsls	r1, r3, #26
 800beae:	bf42      	ittt	mi
 800beb0:	6833      	ldrmi	r3, [r6, #0]
 800beb2:	3302      	addmi	r3, #2
 800beb4:	6033      	strmi	r3, [r6, #0]
 800beb6:	6825      	ldr	r5, [r4, #0]
 800beb8:	f015 0506 	ands.w	r5, r5, #6
 800bebc:	d106      	bne.n	800becc <_printf_common+0x48>
 800bebe:	f104 0a19 	add.w	sl, r4, #25
 800bec2:	68e3      	ldr	r3, [r4, #12]
 800bec4:	6832      	ldr	r2, [r6, #0]
 800bec6:	1a9b      	subs	r3, r3, r2
 800bec8:	42ab      	cmp	r3, r5
 800beca:	dc26      	bgt.n	800bf1a <_printf_common+0x96>
 800becc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bed0:	1e13      	subs	r3, r2, #0
 800bed2:	6822      	ldr	r2, [r4, #0]
 800bed4:	bf18      	it	ne
 800bed6:	2301      	movne	r3, #1
 800bed8:	0692      	lsls	r2, r2, #26
 800beda:	d42b      	bmi.n	800bf34 <_printf_common+0xb0>
 800bedc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bee0:	4649      	mov	r1, r9
 800bee2:	4638      	mov	r0, r7
 800bee4:	47c0      	blx	r8
 800bee6:	3001      	adds	r0, #1
 800bee8:	d01e      	beq.n	800bf28 <_printf_common+0xa4>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	68e5      	ldr	r5, [r4, #12]
 800beee:	6832      	ldr	r2, [r6, #0]
 800bef0:	f003 0306 	and.w	r3, r3, #6
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	bf08      	it	eq
 800bef8:	1aad      	subeq	r5, r5, r2
 800befa:	68a3      	ldr	r3, [r4, #8]
 800befc:	6922      	ldr	r2, [r4, #16]
 800befe:	bf0c      	ite	eq
 800bf00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf04:	2500      	movne	r5, #0
 800bf06:	4293      	cmp	r3, r2
 800bf08:	bfc4      	itt	gt
 800bf0a:	1a9b      	subgt	r3, r3, r2
 800bf0c:	18ed      	addgt	r5, r5, r3
 800bf0e:	2600      	movs	r6, #0
 800bf10:	341a      	adds	r4, #26
 800bf12:	42b5      	cmp	r5, r6
 800bf14:	d11a      	bne.n	800bf4c <_printf_common+0xc8>
 800bf16:	2000      	movs	r0, #0
 800bf18:	e008      	b.n	800bf2c <_printf_common+0xa8>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4652      	mov	r2, sl
 800bf1e:	4649      	mov	r1, r9
 800bf20:	4638      	mov	r0, r7
 800bf22:	47c0      	blx	r8
 800bf24:	3001      	adds	r0, #1
 800bf26:	d103      	bne.n	800bf30 <_printf_common+0xac>
 800bf28:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf30:	3501      	adds	r5, #1
 800bf32:	e7c6      	b.n	800bec2 <_printf_common+0x3e>
 800bf34:	18e1      	adds	r1, r4, r3
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	2030      	movs	r0, #48	; 0x30
 800bf3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf3e:	4422      	add	r2, r4
 800bf40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf48:	3302      	adds	r3, #2
 800bf4a:	e7c7      	b.n	800bedc <_printf_common+0x58>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	4622      	mov	r2, r4
 800bf50:	4649      	mov	r1, r9
 800bf52:	4638      	mov	r0, r7
 800bf54:	47c0      	blx	r8
 800bf56:	3001      	adds	r0, #1
 800bf58:	d0e6      	beq.n	800bf28 <_printf_common+0xa4>
 800bf5a:	3601      	adds	r6, #1
 800bf5c:	e7d9      	b.n	800bf12 <_printf_common+0x8e>
	...

0800bf60 <_printf_i>:
 800bf60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	7e0f      	ldrb	r7, [r1, #24]
 800bf66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf68:	2f78      	cmp	r7, #120	; 0x78
 800bf6a:	4691      	mov	r9, r2
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	460c      	mov	r4, r1
 800bf70:	469a      	mov	sl, r3
 800bf72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf76:	d807      	bhi.n	800bf88 <_printf_i+0x28>
 800bf78:	2f62      	cmp	r7, #98	; 0x62
 800bf7a:	d80a      	bhi.n	800bf92 <_printf_i+0x32>
 800bf7c:	2f00      	cmp	r7, #0
 800bf7e:	f000 80d8 	beq.w	800c132 <_printf_i+0x1d2>
 800bf82:	2f58      	cmp	r7, #88	; 0x58
 800bf84:	f000 80a3 	beq.w	800c0ce <_printf_i+0x16e>
 800bf88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf90:	e03a      	b.n	800c008 <_printf_i+0xa8>
 800bf92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf96:	2b15      	cmp	r3, #21
 800bf98:	d8f6      	bhi.n	800bf88 <_printf_i+0x28>
 800bf9a:	a101      	add	r1, pc, #4	; (adr r1, 800bfa0 <_printf_i+0x40>)
 800bf9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfa0:	0800bff9 	.word	0x0800bff9
 800bfa4:	0800c00d 	.word	0x0800c00d
 800bfa8:	0800bf89 	.word	0x0800bf89
 800bfac:	0800bf89 	.word	0x0800bf89
 800bfb0:	0800bf89 	.word	0x0800bf89
 800bfb4:	0800bf89 	.word	0x0800bf89
 800bfb8:	0800c00d 	.word	0x0800c00d
 800bfbc:	0800bf89 	.word	0x0800bf89
 800bfc0:	0800bf89 	.word	0x0800bf89
 800bfc4:	0800bf89 	.word	0x0800bf89
 800bfc8:	0800bf89 	.word	0x0800bf89
 800bfcc:	0800c119 	.word	0x0800c119
 800bfd0:	0800c03d 	.word	0x0800c03d
 800bfd4:	0800c0fb 	.word	0x0800c0fb
 800bfd8:	0800bf89 	.word	0x0800bf89
 800bfdc:	0800bf89 	.word	0x0800bf89
 800bfe0:	0800c13b 	.word	0x0800c13b
 800bfe4:	0800bf89 	.word	0x0800bf89
 800bfe8:	0800c03d 	.word	0x0800c03d
 800bfec:	0800bf89 	.word	0x0800bf89
 800bff0:	0800bf89 	.word	0x0800bf89
 800bff4:	0800c103 	.word	0x0800c103
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	1d1a      	adds	r2, r3, #4
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	602a      	str	r2, [r5, #0]
 800c000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c008:	2301      	movs	r3, #1
 800c00a:	e0a3      	b.n	800c154 <_printf_i+0x1f4>
 800c00c:	6820      	ldr	r0, [r4, #0]
 800c00e:	6829      	ldr	r1, [r5, #0]
 800c010:	0606      	lsls	r6, r0, #24
 800c012:	f101 0304 	add.w	r3, r1, #4
 800c016:	d50a      	bpl.n	800c02e <_printf_i+0xce>
 800c018:	680e      	ldr	r6, [r1, #0]
 800c01a:	602b      	str	r3, [r5, #0]
 800c01c:	2e00      	cmp	r6, #0
 800c01e:	da03      	bge.n	800c028 <_printf_i+0xc8>
 800c020:	232d      	movs	r3, #45	; 0x2d
 800c022:	4276      	negs	r6, r6
 800c024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c028:	485e      	ldr	r0, [pc, #376]	; (800c1a4 <_printf_i+0x244>)
 800c02a:	230a      	movs	r3, #10
 800c02c:	e019      	b.n	800c062 <_printf_i+0x102>
 800c02e:	680e      	ldr	r6, [r1, #0]
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c036:	bf18      	it	ne
 800c038:	b236      	sxthne	r6, r6
 800c03a:	e7ef      	b.n	800c01c <_printf_i+0xbc>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	6820      	ldr	r0, [r4, #0]
 800c040:	1d19      	adds	r1, r3, #4
 800c042:	6029      	str	r1, [r5, #0]
 800c044:	0601      	lsls	r1, r0, #24
 800c046:	d501      	bpl.n	800c04c <_printf_i+0xec>
 800c048:	681e      	ldr	r6, [r3, #0]
 800c04a:	e002      	b.n	800c052 <_printf_i+0xf2>
 800c04c:	0646      	lsls	r6, r0, #25
 800c04e:	d5fb      	bpl.n	800c048 <_printf_i+0xe8>
 800c050:	881e      	ldrh	r6, [r3, #0]
 800c052:	4854      	ldr	r0, [pc, #336]	; (800c1a4 <_printf_i+0x244>)
 800c054:	2f6f      	cmp	r7, #111	; 0x6f
 800c056:	bf0c      	ite	eq
 800c058:	2308      	moveq	r3, #8
 800c05a:	230a      	movne	r3, #10
 800c05c:	2100      	movs	r1, #0
 800c05e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c062:	6865      	ldr	r5, [r4, #4]
 800c064:	60a5      	str	r5, [r4, #8]
 800c066:	2d00      	cmp	r5, #0
 800c068:	bfa2      	ittt	ge
 800c06a:	6821      	ldrge	r1, [r4, #0]
 800c06c:	f021 0104 	bicge.w	r1, r1, #4
 800c070:	6021      	strge	r1, [r4, #0]
 800c072:	b90e      	cbnz	r6, 800c078 <_printf_i+0x118>
 800c074:	2d00      	cmp	r5, #0
 800c076:	d04d      	beq.n	800c114 <_printf_i+0x1b4>
 800c078:	4615      	mov	r5, r2
 800c07a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c07e:	fb03 6711 	mls	r7, r3, r1, r6
 800c082:	5dc7      	ldrb	r7, [r0, r7]
 800c084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c088:	4637      	mov	r7, r6
 800c08a:	42bb      	cmp	r3, r7
 800c08c:	460e      	mov	r6, r1
 800c08e:	d9f4      	bls.n	800c07a <_printf_i+0x11a>
 800c090:	2b08      	cmp	r3, #8
 800c092:	d10b      	bne.n	800c0ac <_printf_i+0x14c>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	07de      	lsls	r6, r3, #31
 800c098:	d508      	bpl.n	800c0ac <_printf_i+0x14c>
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	6861      	ldr	r1, [r4, #4]
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	bfde      	ittt	le
 800c0a2:	2330      	movle	r3, #48	; 0x30
 800c0a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0ac:	1b52      	subs	r2, r2, r5
 800c0ae:	6122      	str	r2, [r4, #16]
 800c0b0:	f8cd a000 	str.w	sl, [sp]
 800c0b4:	464b      	mov	r3, r9
 800c0b6:	aa03      	add	r2, sp, #12
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	f7ff fee2 	bl	800be84 <_printf_common>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d14c      	bne.n	800c15e <_printf_i+0x1fe>
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	b004      	add	sp, #16
 800c0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ce:	4835      	ldr	r0, [pc, #212]	; (800c1a4 <_printf_i+0x244>)
 800c0d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0d4:	6829      	ldr	r1, [r5, #0]
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0dc:	6029      	str	r1, [r5, #0]
 800c0de:	061d      	lsls	r5, r3, #24
 800c0e0:	d514      	bpl.n	800c10c <_printf_i+0x1ac>
 800c0e2:	07df      	lsls	r7, r3, #31
 800c0e4:	bf44      	itt	mi
 800c0e6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ea:	6023      	strmi	r3, [r4, #0]
 800c0ec:	b91e      	cbnz	r6, 800c0f6 <_printf_i+0x196>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	f023 0320 	bic.w	r3, r3, #32
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	2310      	movs	r3, #16
 800c0f8:	e7b0      	b.n	800c05c <_printf_i+0xfc>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	f043 0320 	orr.w	r3, r3, #32
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	2378      	movs	r3, #120	; 0x78
 800c104:	4828      	ldr	r0, [pc, #160]	; (800c1a8 <_printf_i+0x248>)
 800c106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c10a:	e7e3      	b.n	800c0d4 <_printf_i+0x174>
 800c10c:	0659      	lsls	r1, r3, #25
 800c10e:	bf48      	it	mi
 800c110:	b2b6      	uxthmi	r6, r6
 800c112:	e7e6      	b.n	800c0e2 <_printf_i+0x182>
 800c114:	4615      	mov	r5, r2
 800c116:	e7bb      	b.n	800c090 <_printf_i+0x130>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	6826      	ldr	r6, [r4, #0]
 800c11c:	6961      	ldr	r1, [r4, #20]
 800c11e:	1d18      	adds	r0, r3, #4
 800c120:	6028      	str	r0, [r5, #0]
 800c122:	0635      	lsls	r5, r6, #24
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	d501      	bpl.n	800c12c <_printf_i+0x1cc>
 800c128:	6019      	str	r1, [r3, #0]
 800c12a:	e002      	b.n	800c132 <_printf_i+0x1d2>
 800c12c:	0670      	lsls	r0, r6, #25
 800c12e:	d5fb      	bpl.n	800c128 <_printf_i+0x1c8>
 800c130:	8019      	strh	r1, [r3, #0]
 800c132:	2300      	movs	r3, #0
 800c134:	6123      	str	r3, [r4, #16]
 800c136:	4615      	mov	r5, r2
 800c138:	e7ba      	b.n	800c0b0 <_printf_i+0x150>
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	1d1a      	adds	r2, r3, #4
 800c13e:	602a      	str	r2, [r5, #0]
 800c140:	681d      	ldr	r5, [r3, #0]
 800c142:	6862      	ldr	r2, [r4, #4]
 800c144:	2100      	movs	r1, #0
 800c146:	4628      	mov	r0, r5
 800c148:	f7f4 f822 	bl	8000190 <memchr>
 800c14c:	b108      	cbz	r0, 800c152 <_printf_i+0x1f2>
 800c14e:	1b40      	subs	r0, r0, r5
 800c150:	6060      	str	r0, [r4, #4]
 800c152:	6863      	ldr	r3, [r4, #4]
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	2300      	movs	r3, #0
 800c158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c15c:	e7a8      	b.n	800c0b0 <_printf_i+0x150>
 800c15e:	6923      	ldr	r3, [r4, #16]
 800c160:	462a      	mov	r2, r5
 800c162:	4649      	mov	r1, r9
 800c164:	4640      	mov	r0, r8
 800c166:	47d0      	blx	sl
 800c168:	3001      	adds	r0, #1
 800c16a:	d0ab      	beq.n	800c0c4 <_printf_i+0x164>
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	079b      	lsls	r3, r3, #30
 800c170:	d413      	bmi.n	800c19a <_printf_i+0x23a>
 800c172:	68e0      	ldr	r0, [r4, #12]
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	4298      	cmp	r0, r3
 800c178:	bfb8      	it	lt
 800c17a:	4618      	movlt	r0, r3
 800c17c:	e7a4      	b.n	800c0c8 <_printf_i+0x168>
 800c17e:	2301      	movs	r3, #1
 800c180:	4632      	mov	r2, r6
 800c182:	4649      	mov	r1, r9
 800c184:	4640      	mov	r0, r8
 800c186:	47d0      	blx	sl
 800c188:	3001      	adds	r0, #1
 800c18a:	d09b      	beq.n	800c0c4 <_printf_i+0x164>
 800c18c:	3501      	adds	r5, #1
 800c18e:	68e3      	ldr	r3, [r4, #12]
 800c190:	9903      	ldr	r1, [sp, #12]
 800c192:	1a5b      	subs	r3, r3, r1
 800c194:	42ab      	cmp	r3, r5
 800c196:	dcf2      	bgt.n	800c17e <_printf_i+0x21e>
 800c198:	e7eb      	b.n	800c172 <_printf_i+0x212>
 800c19a:	2500      	movs	r5, #0
 800c19c:	f104 0619 	add.w	r6, r4, #25
 800c1a0:	e7f5      	b.n	800c18e <_printf_i+0x22e>
 800c1a2:	bf00      	nop
 800c1a4:	08015dfe 	.word	0x08015dfe
 800c1a8:	08015e0f 	.word	0x08015e0f

0800c1ac <_scanf_float>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	b087      	sub	sp, #28
 800c1b2:	4617      	mov	r7, r2
 800c1b4:	9303      	str	r3, [sp, #12]
 800c1b6:	688b      	ldr	r3, [r1, #8]
 800c1b8:	1e5a      	subs	r2, r3, #1
 800c1ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1be:	bf83      	ittte	hi
 800c1c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1c4:	195b      	addhi	r3, r3, r5
 800c1c6:	9302      	strhi	r3, [sp, #8]
 800c1c8:	2300      	movls	r3, #0
 800c1ca:	bf86      	itte	hi
 800c1cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1d0:	608b      	strhi	r3, [r1, #8]
 800c1d2:	9302      	strls	r3, [sp, #8]
 800c1d4:	680b      	ldr	r3, [r1, #0]
 800c1d6:	468b      	mov	fp, r1
 800c1d8:	2500      	movs	r5, #0
 800c1da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c1de:	f84b 3b1c 	str.w	r3, [fp], #28
 800c1e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c1e6:	4680      	mov	r8, r0
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	465e      	mov	r6, fp
 800c1ec:	46aa      	mov	sl, r5
 800c1ee:	46a9      	mov	r9, r5
 800c1f0:	9501      	str	r5, [sp, #4]
 800c1f2:	68a2      	ldr	r2, [r4, #8]
 800c1f4:	b152      	cbz	r2, 800c20c <_scanf_float+0x60>
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b4e      	cmp	r3, #78	; 0x4e
 800c1fc:	d864      	bhi.n	800c2c8 <_scanf_float+0x11c>
 800c1fe:	2b40      	cmp	r3, #64	; 0x40
 800c200:	d83c      	bhi.n	800c27c <_scanf_float+0xd0>
 800c202:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c206:	b2c8      	uxtb	r0, r1
 800c208:	280e      	cmp	r0, #14
 800c20a:	d93a      	bls.n	800c282 <_scanf_float+0xd6>
 800c20c:	f1b9 0f00 	cmp.w	r9, #0
 800c210:	d003      	beq.n	800c21a <_scanf_float+0x6e>
 800c212:	6823      	ldr	r3, [r4, #0]
 800c214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c21e:	f1ba 0f01 	cmp.w	sl, #1
 800c222:	f200 8113 	bhi.w	800c44c <_scanf_float+0x2a0>
 800c226:	455e      	cmp	r6, fp
 800c228:	f200 8105 	bhi.w	800c436 <_scanf_float+0x28a>
 800c22c:	2501      	movs	r5, #1
 800c22e:	4628      	mov	r0, r5
 800c230:	b007      	add	sp, #28
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c23a:	2a0d      	cmp	r2, #13
 800c23c:	d8e6      	bhi.n	800c20c <_scanf_float+0x60>
 800c23e:	a101      	add	r1, pc, #4	; (adr r1, 800c244 <_scanf_float+0x98>)
 800c240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c244:	0800c383 	.word	0x0800c383
 800c248:	0800c20d 	.word	0x0800c20d
 800c24c:	0800c20d 	.word	0x0800c20d
 800c250:	0800c20d 	.word	0x0800c20d
 800c254:	0800c3e3 	.word	0x0800c3e3
 800c258:	0800c3bb 	.word	0x0800c3bb
 800c25c:	0800c20d 	.word	0x0800c20d
 800c260:	0800c20d 	.word	0x0800c20d
 800c264:	0800c391 	.word	0x0800c391
 800c268:	0800c20d 	.word	0x0800c20d
 800c26c:	0800c20d 	.word	0x0800c20d
 800c270:	0800c20d 	.word	0x0800c20d
 800c274:	0800c20d 	.word	0x0800c20d
 800c278:	0800c349 	.word	0x0800c349
 800c27c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c280:	e7db      	b.n	800c23a <_scanf_float+0x8e>
 800c282:	290e      	cmp	r1, #14
 800c284:	d8c2      	bhi.n	800c20c <_scanf_float+0x60>
 800c286:	a001      	add	r0, pc, #4	; (adr r0, 800c28c <_scanf_float+0xe0>)
 800c288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c28c:	0800c33b 	.word	0x0800c33b
 800c290:	0800c20d 	.word	0x0800c20d
 800c294:	0800c33b 	.word	0x0800c33b
 800c298:	0800c3cf 	.word	0x0800c3cf
 800c29c:	0800c20d 	.word	0x0800c20d
 800c2a0:	0800c2e9 	.word	0x0800c2e9
 800c2a4:	0800c325 	.word	0x0800c325
 800c2a8:	0800c325 	.word	0x0800c325
 800c2ac:	0800c325 	.word	0x0800c325
 800c2b0:	0800c325 	.word	0x0800c325
 800c2b4:	0800c325 	.word	0x0800c325
 800c2b8:	0800c325 	.word	0x0800c325
 800c2bc:	0800c325 	.word	0x0800c325
 800c2c0:	0800c325 	.word	0x0800c325
 800c2c4:	0800c325 	.word	0x0800c325
 800c2c8:	2b6e      	cmp	r3, #110	; 0x6e
 800c2ca:	d809      	bhi.n	800c2e0 <_scanf_float+0x134>
 800c2cc:	2b60      	cmp	r3, #96	; 0x60
 800c2ce:	d8b2      	bhi.n	800c236 <_scanf_float+0x8a>
 800c2d0:	2b54      	cmp	r3, #84	; 0x54
 800c2d2:	d077      	beq.n	800c3c4 <_scanf_float+0x218>
 800c2d4:	2b59      	cmp	r3, #89	; 0x59
 800c2d6:	d199      	bne.n	800c20c <_scanf_float+0x60>
 800c2d8:	2d07      	cmp	r5, #7
 800c2da:	d197      	bne.n	800c20c <_scanf_float+0x60>
 800c2dc:	2508      	movs	r5, #8
 800c2de:	e029      	b.n	800c334 <_scanf_float+0x188>
 800c2e0:	2b74      	cmp	r3, #116	; 0x74
 800c2e2:	d06f      	beq.n	800c3c4 <_scanf_float+0x218>
 800c2e4:	2b79      	cmp	r3, #121	; 0x79
 800c2e6:	e7f6      	b.n	800c2d6 <_scanf_float+0x12a>
 800c2e8:	6821      	ldr	r1, [r4, #0]
 800c2ea:	05c8      	lsls	r0, r1, #23
 800c2ec:	d51a      	bpl.n	800c324 <_scanf_float+0x178>
 800c2ee:	9b02      	ldr	r3, [sp, #8]
 800c2f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c2f4:	6021      	str	r1, [r4, #0]
 800c2f6:	f109 0901 	add.w	r9, r9, #1
 800c2fa:	b11b      	cbz	r3, 800c304 <_scanf_float+0x158>
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	3201      	adds	r2, #1
 800c300:	9302      	str	r3, [sp, #8]
 800c302:	60a2      	str	r2, [r4, #8]
 800c304:	68a3      	ldr	r3, [r4, #8]
 800c306:	3b01      	subs	r3, #1
 800c308:	60a3      	str	r3, [r4, #8]
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	3301      	adds	r3, #1
 800c30e:	6123      	str	r3, [r4, #16]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3b01      	subs	r3, #1
 800c314:	2b00      	cmp	r3, #0
 800c316:	607b      	str	r3, [r7, #4]
 800c318:	f340 8084 	ble.w	800c424 <_scanf_float+0x278>
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	3301      	adds	r3, #1
 800c320:	603b      	str	r3, [r7, #0]
 800c322:	e766      	b.n	800c1f2 <_scanf_float+0x46>
 800c324:	eb1a 0f05 	cmn.w	sl, r5
 800c328:	f47f af70 	bne.w	800c20c <_scanf_float+0x60>
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	f806 3b01 	strb.w	r3, [r6], #1
 800c338:	e7e4      	b.n	800c304 <_scanf_float+0x158>
 800c33a:	6822      	ldr	r2, [r4, #0]
 800c33c:	0610      	lsls	r0, r2, #24
 800c33e:	f57f af65 	bpl.w	800c20c <_scanf_float+0x60>
 800c342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c346:	e7f4      	b.n	800c332 <_scanf_float+0x186>
 800c348:	f1ba 0f00 	cmp.w	sl, #0
 800c34c:	d10e      	bne.n	800c36c <_scanf_float+0x1c0>
 800c34e:	f1b9 0f00 	cmp.w	r9, #0
 800c352:	d10e      	bne.n	800c372 <_scanf_float+0x1c6>
 800c354:	6822      	ldr	r2, [r4, #0]
 800c356:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c35a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c35e:	d108      	bne.n	800c372 <_scanf_float+0x1c6>
 800c360:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c364:	6022      	str	r2, [r4, #0]
 800c366:	f04f 0a01 	mov.w	sl, #1
 800c36a:	e7e3      	b.n	800c334 <_scanf_float+0x188>
 800c36c:	f1ba 0f02 	cmp.w	sl, #2
 800c370:	d055      	beq.n	800c41e <_scanf_float+0x272>
 800c372:	2d01      	cmp	r5, #1
 800c374:	d002      	beq.n	800c37c <_scanf_float+0x1d0>
 800c376:	2d04      	cmp	r5, #4
 800c378:	f47f af48 	bne.w	800c20c <_scanf_float+0x60>
 800c37c:	3501      	adds	r5, #1
 800c37e:	b2ed      	uxtb	r5, r5
 800c380:	e7d8      	b.n	800c334 <_scanf_float+0x188>
 800c382:	f1ba 0f01 	cmp.w	sl, #1
 800c386:	f47f af41 	bne.w	800c20c <_scanf_float+0x60>
 800c38a:	f04f 0a02 	mov.w	sl, #2
 800c38e:	e7d1      	b.n	800c334 <_scanf_float+0x188>
 800c390:	b97d      	cbnz	r5, 800c3b2 <_scanf_float+0x206>
 800c392:	f1b9 0f00 	cmp.w	r9, #0
 800c396:	f47f af3c 	bne.w	800c212 <_scanf_float+0x66>
 800c39a:	6822      	ldr	r2, [r4, #0]
 800c39c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c3a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c3a4:	f47f af39 	bne.w	800c21a <_scanf_float+0x6e>
 800c3a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c3ac:	6022      	str	r2, [r4, #0]
 800c3ae:	2501      	movs	r5, #1
 800c3b0:	e7c0      	b.n	800c334 <_scanf_float+0x188>
 800c3b2:	2d03      	cmp	r5, #3
 800c3b4:	d0e2      	beq.n	800c37c <_scanf_float+0x1d0>
 800c3b6:	2d05      	cmp	r5, #5
 800c3b8:	e7de      	b.n	800c378 <_scanf_float+0x1cc>
 800c3ba:	2d02      	cmp	r5, #2
 800c3bc:	f47f af26 	bne.w	800c20c <_scanf_float+0x60>
 800c3c0:	2503      	movs	r5, #3
 800c3c2:	e7b7      	b.n	800c334 <_scanf_float+0x188>
 800c3c4:	2d06      	cmp	r5, #6
 800c3c6:	f47f af21 	bne.w	800c20c <_scanf_float+0x60>
 800c3ca:	2507      	movs	r5, #7
 800c3cc:	e7b2      	b.n	800c334 <_scanf_float+0x188>
 800c3ce:	6822      	ldr	r2, [r4, #0]
 800c3d0:	0591      	lsls	r1, r2, #22
 800c3d2:	f57f af1b 	bpl.w	800c20c <_scanf_float+0x60>
 800c3d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c3da:	6022      	str	r2, [r4, #0]
 800c3dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c3e0:	e7a8      	b.n	800c334 <_scanf_float+0x188>
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c3e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c3ec:	d006      	beq.n	800c3fc <_scanf_float+0x250>
 800c3ee:	0550      	lsls	r0, r2, #21
 800c3f0:	f57f af0c 	bpl.w	800c20c <_scanf_float+0x60>
 800c3f4:	f1b9 0f00 	cmp.w	r9, #0
 800c3f8:	f43f af0f 	beq.w	800c21a <_scanf_float+0x6e>
 800c3fc:	0591      	lsls	r1, r2, #22
 800c3fe:	bf58      	it	pl
 800c400:	9901      	ldrpl	r1, [sp, #4]
 800c402:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c406:	bf58      	it	pl
 800c408:	eba9 0101 	subpl.w	r1, r9, r1
 800c40c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c410:	bf58      	it	pl
 800c412:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c416:	6022      	str	r2, [r4, #0]
 800c418:	f04f 0900 	mov.w	r9, #0
 800c41c:	e78a      	b.n	800c334 <_scanf_float+0x188>
 800c41e:	f04f 0a03 	mov.w	sl, #3
 800c422:	e787      	b.n	800c334 <_scanf_float+0x188>
 800c424:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c428:	4639      	mov	r1, r7
 800c42a:	4640      	mov	r0, r8
 800c42c:	4798      	blx	r3
 800c42e:	2800      	cmp	r0, #0
 800c430:	f43f aedf 	beq.w	800c1f2 <_scanf_float+0x46>
 800c434:	e6ea      	b.n	800c20c <_scanf_float+0x60>
 800c436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c43a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c43e:	463a      	mov	r2, r7
 800c440:	4640      	mov	r0, r8
 800c442:	4798      	blx	r3
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	3b01      	subs	r3, #1
 800c448:	6123      	str	r3, [r4, #16]
 800c44a:	e6ec      	b.n	800c226 <_scanf_float+0x7a>
 800c44c:	1e6b      	subs	r3, r5, #1
 800c44e:	2b06      	cmp	r3, #6
 800c450:	d825      	bhi.n	800c49e <_scanf_float+0x2f2>
 800c452:	2d02      	cmp	r5, #2
 800c454:	d836      	bhi.n	800c4c4 <_scanf_float+0x318>
 800c456:	455e      	cmp	r6, fp
 800c458:	f67f aee8 	bls.w	800c22c <_scanf_float+0x80>
 800c45c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c460:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c464:	463a      	mov	r2, r7
 800c466:	4640      	mov	r0, r8
 800c468:	4798      	blx	r3
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	6123      	str	r3, [r4, #16]
 800c470:	e7f1      	b.n	800c456 <_scanf_float+0x2aa>
 800c472:	9802      	ldr	r0, [sp, #8]
 800c474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c478:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c47c:	9002      	str	r0, [sp, #8]
 800c47e:	463a      	mov	r2, r7
 800c480:	4640      	mov	r0, r8
 800c482:	4798      	blx	r3
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	3b01      	subs	r3, #1
 800c488:	6123      	str	r3, [r4, #16]
 800c48a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c48e:	fa5f fa8a 	uxtb.w	sl, sl
 800c492:	f1ba 0f02 	cmp.w	sl, #2
 800c496:	d1ec      	bne.n	800c472 <_scanf_float+0x2c6>
 800c498:	3d03      	subs	r5, #3
 800c49a:	b2ed      	uxtb	r5, r5
 800c49c:	1b76      	subs	r6, r6, r5
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	05da      	lsls	r2, r3, #23
 800c4a2:	d52f      	bpl.n	800c504 <_scanf_float+0x358>
 800c4a4:	055b      	lsls	r3, r3, #21
 800c4a6:	d510      	bpl.n	800c4ca <_scanf_float+0x31e>
 800c4a8:	455e      	cmp	r6, fp
 800c4aa:	f67f aebf 	bls.w	800c22c <_scanf_float+0x80>
 800c4ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4b6:	463a      	mov	r2, r7
 800c4b8:	4640      	mov	r0, r8
 800c4ba:	4798      	blx	r3
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	6123      	str	r3, [r4, #16]
 800c4c2:	e7f1      	b.n	800c4a8 <_scanf_float+0x2fc>
 800c4c4:	46aa      	mov	sl, r5
 800c4c6:	9602      	str	r6, [sp, #8]
 800c4c8:	e7df      	b.n	800c48a <_scanf_float+0x2de>
 800c4ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	2965      	cmp	r1, #101	; 0x65
 800c4d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	d00c      	beq.n	800c4f8 <_scanf_float+0x34c>
 800c4de:	2945      	cmp	r1, #69	; 0x45
 800c4e0:	d00a      	beq.n	800c4f8 <_scanf_float+0x34c>
 800c4e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4e6:	463a      	mov	r2, r7
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4798      	blx	r3
 800c4ec:	6923      	ldr	r3, [r4, #16]
 800c4ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	1eb5      	subs	r5, r6, #2
 800c4f6:	6123      	str	r3, [r4, #16]
 800c4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4fc:	463a      	mov	r2, r7
 800c4fe:	4640      	mov	r0, r8
 800c500:	4798      	blx	r3
 800c502:	462e      	mov	r6, r5
 800c504:	6825      	ldr	r5, [r4, #0]
 800c506:	f015 0510 	ands.w	r5, r5, #16
 800c50a:	d159      	bne.n	800c5c0 <_scanf_float+0x414>
 800c50c:	7035      	strb	r5, [r6, #0]
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c518:	d11b      	bne.n	800c552 <_scanf_float+0x3a6>
 800c51a:	9b01      	ldr	r3, [sp, #4]
 800c51c:	454b      	cmp	r3, r9
 800c51e:	eba3 0209 	sub.w	r2, r3, r9
 800c522:	d123      	bne.n	800c56c <_scanf_float+0x3c0>
 800c524:	2200      	movs	r2, #0
 800c526:	4659      	mov	r1, fp
 800c528:	4640      	mov	r0, r8
 800c52a:	f000 fe97 	bl	800d25c <_strtod_r>
 800c52e:	6822      	ldr	r2, [r4, #0]
 800c530:	9b03      	ldr	r3, [sp, #12]
 800c532:	f012 0f02 	tst.w	r2, #2
 800c536:	ec57 6b10 	vmov	r6, r7, d0
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	d021      	beq.n	800c582 <_scanf_float+0x3d6>
 800c53e:	9903      	ldr	r1, [sp, #12]
 800c540:	1d1a      	adds	r2, r3, #4
 800c542:	600a      	str	r2, [r1, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	e9c3 6700 	strd	r6, r7, [r3]
 800c54a:	68e3      	ldr	r3, [r4, #12]
 800c54c:	3301      	adds	r3, #1
 800c54e:	60e3      	str	r3, [r4, #12]
 800c550:	e66d      	b.n	800c22e <_scanf_float+0x82>
 800c552:	9b04      	ldr	r3, [sp, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0e5      	beq.n	800c524 <_scanf_float+0x378>
 800c558:	9905      	ldr	r1, [sp, #20]
 800c55a:	230a      	movs	r3, #10
 800c55c:	462a      	mov	r2, r5
 800c55e:	3101      	adds	r1, #1
 800c560:	4640      	mov	r0, r8
 800c562:	f000 ff0f 	bl	800d384 <_strtol_r>
 800c566:	9b04      	ldr	r3, [sp, #16]
 800c568:	9e05      	ldr	r6, [sp, #20]
 800c56a:	1ac2      	subs	r2, r0, r3
 800c56c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c570:	429e      	cmp	r6, r3
 800c572:	bf28      	it	cs
 800c574:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c578:	4912      	ldr	r1, [pc, #72]	; (800c5c4 <_scanf_float+0x418>)
 800c57a:	4630      	mov	r0, r6
 800c57c:	f000 f82c 	bl	800c5d8 <siprintf>
 800c580:	e7d0      	b.n	800c524 <_scanf_float+0x378>
 800c582:	9903      	ldr	r1, [sp, #12]
 800c584:	f012 0f04 	tst.w	r2, #4
 800c588:	f103 0204 	add.w	r2, r3, #4
 800c58c:	600a      	str	r2, [r1, #0]
 800c58e:	d1d9      	bne.n	800c544 <_scanf_float+0x398>
 800c590:	f8d3 8000 	ldr.w	r8, [r3]
 800c594:	ee10 2a10 	vmov	r2, s0
 800c598:	ee10 0a10 	vmov	r0, s0
 800c59c:	463b      	mov	r3, r7
 800c59e:	4639      	mov	r1, r7
 800c5a0:	f7f4 fa9c 	bl	8000adc <__aeabi_dcmpun>
 800c5a4:	b128      	cbz	r0, 800c5b2 <_scanf_float+0x406>
 800c5a6:	4808      	ldr	r0, [pc, #32]	; (800c5c8 <_scanf_float+0x41c>)
 800c5a8:	f000 f810 	bl	800c5cc <nanf>
 800c5ac:	ed88 0a00 	vstr	s0, [r8]
 800c5b0:	e7cb      	b.n	800c54a <_scanf_float+0x39e>
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f7f4 faef 	bl	8000b98 <__aeabi_d2f>
 800c5ba:	f8c8 0000 	str.w	r0, [r8]
 800c5be:	e7c4      	b.n	800c54a <_scanf_float+0x39e>
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	e634      	b.n	800c22e <_scanf_float+0x82>
 800c5c4:	08015e20 	.word	0x08015e20
 800c5c8:	08016228 	.word	0x08016228

0800c5cc <nanf>:
 800c5cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c5d4 <nanf+0x8>
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	7fc00000 	.word	0x7fc00000

0800c5d8 <siprintf>:
 800c5d8:	b40e      	push	{r1, r2, r3}
 800c5da:	b500      	push	{lr}
 800c5dc:	b09c      	sub	sp, #112	; 0x70
 800c5de:	ab1d      	add	r3, sp, #116	; 0x74
 800c5e0:	9002      	str	r0, [sp, #8]
 800c5e2:	9006      	str	r0, [sp, #24]
 800c5e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5e8:	4809      	ldr	r0, [pc, #36]	; (800c610 <siprintf+0x38>)
 800c5ea:	9107      	str	r1, [sp, #28]
 800c5ec:	9104      	str	r1, [sp, #16]
 800c5ee:	4909      	ldr	r1, [pc, #36]	; (800c614 <siprintf+0x3c>)
 800c5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f4:	9105      	str	r1, [sp, #20]
 800c5f6:	6800      	ldr	r0, [r0, #0]
 800c5f8:	9301      	str	r3, [sp, #4]
 800c5fa:	a902      	add	r1, sp, #8
 800c5fc:	f002 fee0 	bl	800f3c0 <_svfiprintf_r>
 800c600:	9b02      	ldr	r3, [sp, #8]
 800c602:	2200      	movs	r2, #0
 800c604:	701a      	strb	r2, [r3, #0]
 800c606:	b01c      	add	sp, #112	; 0x70
 800c608:	f85d eb04 	ldr.w	lr, [sp], #4
 800c60c:	b003      	add	sp, #12
 800c60e:	4770      	bx	lr
 800c610:	200046e8 	.word	0x200046e8
 800c614:	ffff0208 	.word	0xffff0208

0800c618 <sulp>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	4604      	mov	r4, r0
 800c61c:	460d      	mov	r5, r1
 800c61e:	ec45 4b10 	vmov	d0, r4, r5
 800c622:	4616      	mov	r6, r2
 800c624:	f002 fc2a 	bl	800ee7c <__ulp>
 800c628:	ec51 0b10 	vmov	r0, r1, d0
 800c62c:	b17e      	cbz	r6, 800c64e <sulp+0x36>
 800c62e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c632:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c636:	2b00      	cmp	r3, #0
 800c638:	dd09      	ble.n	800c64e <sulp+0x36>
 800c63a:	051b      	lsls	r3, r3, #20
 800c63c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c640:	2400      	movs	r4, #0
 800c642:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c646:	4622      	mov	r2, r4
 800c648:	462b      	mov	r3, r5
 800c64a:	f7f3 ffad 	bl	80005a8 <__aeabi_dmul>
 800c64e:	bd70      	pop	{r4, r5, r6, pc}

0800c650 <_strtod_l>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	ed2d 8b02 	vpush	{d8}
 800c658:	b09d      	sub	sp, #116	; 0x74
 800c65a:	461f      	mov	r7, r3
 800c65c:	2300      	movs	r3, #0
 800c65e:	9318      	str	r3, [sp, #96]	; 0x60
 800c660:	4ba2      	ldr	r3, [pc, #648]	; (800c8ec <_strtod_l+0x29c>)
 800c662:	9213      	str	r2, [sp, #76]	; 0x4c
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	4604      	mov	r4, r0
 800c66a:	4618      	mov	r0, r3
 800c66c:	4688      	mov	r8, r1
 800c66e:	f7f3 fd87 	bl	8000180 <strlen>
 800c672:	f04f 0a00 	mov.w	sl, #0
 800c676:	4605      	mov	r5, r0
 800c678:	f04f 0b00 	mov.w	fp, #0
 800c67c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c682:	781a      	ldrb	r2, [r3, #0]
 800c684:	2a2b      	cmp	r2, #43	; 0x2b
 800c686:	d04e      	beq.n	800c726 <_strtod_l+0xd6>
 800c688:	d83b      	bhi.n	800c702 <_strtod_l+0xb2>
 800c68a:	2a0d      	cmp	r2, #13
 800c68c:	d834      	bhi.n	800c6f8 <_strtod_l+0xa8>
 800c68e:	2a08      	cmp	r2, #8
 800c690:	d834      	bhi.n	800c6fc <_strtod_l+0xac>
 800c692:	2a00      	cmp	r2, #0
 800c694:	d03e      	beq.n	800c714 <_strtod_l+0xc4>
 800c696:	2300      	movs	r3, #0
 800c698:	930a      	str	r3, [sp, #40]	; 0x28
 800c69a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c69c:	7833      	ldrb	r3, [r6, #0]
 800c69e:	2b30      	cmp	r3, #48	; 0x30
 800c6a0:	f040 80b0 	bne.w	800c804 <_strtod_l+0x1b4>
 800c6a4:	7873      	ldrb	r3, [r6, #1]
 800c6a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6aa:	2b58      	cmp	r3, #88	; 0x58
 800c6ac:	d168      	bne.n	800c780 <_strtod_l+0x130>
 800c6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b0:	9301      	str	r3, [sp, #4]
 800c6b2:	ab18      	add	r3, sp, #96	; 0x60
 800c6b4:	9702      	str	r7, [sp, #8]
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	4a8d      	ldr	r2, [pc, #564]	; (800c8f0 <_strtod_l+0x2a0>)
 800c6ba:	ab19      	add	r3, sp, #100	; 0x64
 800c6bc:	a917      	add	r1, sp, #92	; 0x5c
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f001 fd44 	bl	800e14c <__gethex>
 800c6c4:	f010 0707 	ands.w	r7, r0, #7
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	d005      	beq.n	800c6d8 <_strtod_l+0x88>
 800c6cc:	2f06      	cmp	r7, #6
 800c6ce:	d12c      	bne.n	800c72a <_strtod_l+0xda>
 800c6d0:	3601      	adds	r6, #1
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f040 8590 	bne.w	800d200 <_strtod_l+0xbb0>
 800c6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e2:	b1eb      	cbz	r3, 800c720 <_strtod_l+0xd0>
 800c6e4:	4652      	mov	r2, sl
 800c6e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6ea:	ec43 2b10 	vmov	d0, r2, r3
 800c6ee:	b01d      	add	sp, #116	; 0x74
 800c6f0:	ecbd 8b02 	vpop	{d8}
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	2a20      	cmp	r2, #32
 800c6fa:	d1cc      	bne.n	800c696 <_strtod_l+0x46>
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800c700:	e7be      	b.n	800c680 <_strtod_l+0x30>
 800c702:	2a2d      	cmp	r2, #45	; 0x2d
 800c704:	d1c7      	bne.n	800c696 <_strtod_l+0x46>
 800c706:	2201      	movs	r2, #1
 800c708:	920a      	str	r2, [sp, #40]	; 0x28
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c70e:	785b      	ldrb	r3, [r3, #1]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1c2      	bne.n	800c69a <_strtod_l+0x4a>
 800c714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c716:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f040 856e 	bne.w	800d1fc <_strtod_l+0xbac>
 800c720:	4652      	mov	r2, sl
 800c722:	465b      	mov	r3, fp
 800c724:	e7e1      	b.n	800c6ea <_strtod_l+0x9a>
 800c726:	2200      	movs	r2, #0
 800c728:	e7ee      	b.n	800c708 <_strtod_l+0xb8>
 800c72a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c72c:	b13a      	cbz	r2, 800c73e <_strtod_l+0xee>
 800c72e:	2135      	movs	r1, #53	; 0x35
 800c730:	a81a      	add	r0, sp, #104	; 0x68
 800c732:	f002 fcae 	bl	800f092 <__copybits>
 800c736:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c738:	4620      	mov	r0, r4
 800c73a:	f002 f86d 	bl	800e818 <_Bfree>
 800c73e:	3f01      	subs	r7, #1
 800c740:	2f04      	cmp	r7, #4
 800c742:	d806      	bhi.n	800c752 <_strtod_l+0x102>
 800c744:	e8df f007 	tbb	[pc, r7]
 800c748:	1714030a 	.word	0x1714030a
 800c74c:	0a          	.byte	0x0a
 800c74d:	00          	.byte	0x00
 800c74e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c752:	0728      	lsls	r0, r5, #28
 800c754:	d5c0      	bpl.n	800c6d8 <_strtod_l+0x88>
 800c756:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c75a:	e7bd      	b.n	800c6d8 <_strtod_l+0x88>
 800c75c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c760:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c766:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c76a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c76e:	e7f0      	b.n	800c752 <_strtod_l+0x102>
 800c770:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c8f4 <_strtod_l+0x2a4>
 800c774:	e7ed      	b.n	800c752 <_strtod_l+0x102>
 800c776:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c77a:	f04f 3aff 	mov.w	sl, #4294967295
 800c77e:	e7e8      	b.n	800c752 <_strtod_l+0x102>
 800c780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	9217      	str	r2, [sp, #92]	; 0x5c
 800c786:	785b      	ldrb	r3, [r3, #1]
 800c788:	2b30      	cmp	r3, #48	; 0x30
 800c78a:	d0f9      	beq.n	800c780 <_strtod_l+0x130>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0a3      	beq.n	800c6d8 <_strtod_l+0x88>
 800c790:	2301      	movs	r3, #1
 800c792:	f04f 0900 	mov.w	r9, #0
 800c796:	9304      	str	r3, [sp, #16]
 800c798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c79a:	9308      	str	r3, [sp, #32]
 800c79c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c7a0:	464f      	mov	r7, r9
 800c7a2:	220a      	movs	r2, #10
 800c7a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c7a6:	7806      	ldrb	r6, [r0, #0]
 800c7a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c7ac:	b2d9      	uxtb	r1, r3
 800c7ae:	2909      	cmp	r1, #9
 800c7b0:	d92a      	bls.n	800c808 <_strtod_l+0x1b8>
 800c7b2:	9905      	ldr	r1, [sp, #20]
 800c7b4:	462a      	mov	r2, r5
 800c7b6:	f002 ff1b 	bl	800f5f0 <strncmp>
 800c7ba:	b398      	cbz	r0, 800c824 <_strtod_l+0x1d4>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	4632      	mov	r2, r6
 800c7c0:	463d      	mov	r5, r7
 800c7c2:	9005      	str	r0, [sp, #20]
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2a65      	cmp	r2, #101	; 0x65
 800c7c8:	d001      	beq.n	800c7ce <_strtod_l+0x17e>
 800c7ca:	2a45      	cmp	r2, #69	; 0x45
 800c7cc:	d118      	bne.n	800c800 <_strtod_l+0x1b0>
 800c7ce:	b91d      	cbnz	r5, 800c7d8 <_strtod_l+0x188>
 800c7d0:	9a04      	ldr	r2, [sp, #16]
 800c7d2:	4302      	orrs	r2, r0
 800c7d4:	d09e      	beq.n	800c714 <_strtod_l+0xc4>
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c7dc:	f108 0201 	add.w	r2, r8, #1
 800c7e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c7e6:	2a2b      	cmp	r2, #43	; 0x2b
 800c7e8:	d075      	beq.n	800c8d6 <_strtod_l+0x286>
 800c7ea:	2a2d      	cmp	r2, #45	; 0x2d
 800c7ec:	d07b      	beq.n	800c8e6 <_strtod_l+0x296>
 800c7ee:	f04f 0c00 	mov.w	ip, #0
 800c7f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7f6:	2909      	cmp	r1, #9
 800c7f8:	f240 8082 	bls.w	800c900 <_strtod_l+0x2b0>
 800c7fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c800:	2600      	movs	r6, #0
 800c802:	e09d      	b.n	800c940 <_strtod_l+0x2f0>
 800c804:	2300      	movs	r3, #0
 800c806:	e7c4      	b.n	800c792 <_strtod_l+0x142>
 800c808:	2f08      	cmp	r7, #8
 800c80a:	bfd8      	it	le
 800c80c:	9907      	ldrle	r1, [sp, #28]
 800c80e:	f100 0001 	add.w	r0, r0, #1
 800c812:	bfda      	itte	le
 800c814:	fb02 3301 	mlale	r3, r2, r1, r3
 800c818:	9307      	strle	r3, [sp, #28]
 800c81a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c81e:	3701      	adds	r7, #1
 800c820:	9017      	str	r0, [sp, #92]	; 0x5c
 800c822:	e7bf      	b.n	800c7a4 <_strtod_l+0x154>
 800c824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c826:	195a      	adds	r2, r3, r5
 800c828:	9217      	str	r2, [sp, #92]	; 0x5c
 800c82a:	5d5a      	ldrb	r2, [r3, r5]
 800c82c:	2f00      	cmp	r7, #0
 800c82e:	d037      	beq.n	800c8a0 <_strtod_l+0x250>
 800c830:	9005      	str	r0, [sp, #20]
 800c832:	463d      	mov	r5, r7
 800c834:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c838:	2b09      	cmp	r3, #9
 800c83a:	d912      	bls.n	800c862 <_strtod_l+0x212>
 800c83c:	2301      	movs	r3, #1
 800c83e:	e7c2      	b.n	800c7c6 <_strtod_l+0x176>
 800c840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	9217      	str	r2, [sp, #92]	; 0x5c
 800c846:	785a      	ldrb	r2, [r3, #1]
 800c848:	3001      	adds	r0, #1
 800c84a:	2a30      	cmp	r2, #48	; 0x30
 800c84c:	d0f8      	beq.n	800c840 <_strtod_l+0x1f0>
 800c84e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c852:	2b08      	cmp	r3, #8
 800c854:	f200 84d9 	bhi.w	800d20a <_strtod_l+0xbba>
 800c858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c85a:	9005      	str	r0, [sp, #20]
 800c85c:	2000      	movs	r0, #0
 800c85e:	9308      	str	r3, [sp, #32]
 800c860:	4605      	mov	r5, r0
 800c862:	3a30      	subs	r2, #48	; 0x30
 800c864:	f100 0301 	add.w	r3, r0, #1
 800c868:	d014      	beq.n	800c894 <_strtod_l+0x244>
 800c86a:	9905      	ldr	r1, [sp, #20]
 800c86c:	4419      	add	r1, r3
 800c86e:	9105      	str	r1, [sp, #20]
 800c870:	462b      	mov	r3, r5
 800c872:	eb00 0e05 	add.w	lr, r0, r5
 800c876:	210a      	movs	r1, #10
 800c878:	4573      	cmp	r3, lr
 800c87a:	d113      	bne.n	800c8a4 <_strtod_l+0x254>
 800c87c:	182b      	adds	r3, r5, r0
 800c87e:	2b08      	cmp	r3, #8
 800c880:	f105 0501 	add.w	r5, r5, #1
 800c884:	4405      	add	r5, r0
 800c886:	dc1c      	bgt.n	800c8c2 <_strtod_l+0x272>
 800c888:	9907      	ldr	r1, [sp, #28]
 800c88a:	230a      	movs	r3, #10
 800c88c:	fb03 2301 	mla	r3, r3, r1, r2
 800c890:	9307      	str	r3, [sp, #28]
 800c892:	2300      	movs	r3, #0
 800c894:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c896:	1c51      	adds	r1, r2, #1
 800c898:	9117      	str	r1, [sp, #92]	; 0x5c
 800c89a:	7852      	ldrb	r2, [r2, #1]
 800c89c:	4618      	mov	r0, r3
 800c89e:	e7c9      	b.n	800c834 <_strtod_l+0x1e4>
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	e7d2      	b.n	800c84a <_strtod_l+0x1fa>
 800c8a4:	2b08      	cmp	r3, #8
 800c8a6:	dc04      	bgt.n	800c8b2 <_strtod_l+0x262>
 800c8a8:	9e07      	ldr	r6, [sp, #28]
 800c8aa:	434e      	muls	r6, r1
 800c8ac:	9607      	str	r6, [sp, #28]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	e7e2      	b.n	800c878 <_strtod_l+0x228>
 800c8b2:	f103 0c01 	add.w	ip, r3, #1
 800c8b6:	f1bc 0f10 	cmp.w	ip, #16
 800c8ba:	bfd8      	it	le
 800c8bc:	fb01 f909 	mulle.w	r9, r1, r9
 800c8c0:	e7f5      	b.n	800c8ae <_strtod_l+0x25e>
 800c8c2:	2d10      	cmp	r5, #16
 800c8c4:	bfdc      	itt	le
 800c8c6:	230a      	movle	r3, #10
 800c8c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c8cc:	e7e1      	b.n	800c892 <_strtod_l+0x242>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9305      	str	r3, [sp, #20]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e77c      	b.n	800c7d0 <_strtod_l+0x180>
 800c8d6:	f04f 0c00 	mov.w	ip, #0
 800c8da:	f108 0202 	add.w	r2, r8, #2
 800c8de:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c8e4:	e785      	b.n	800c7f2 <_strtod_l+0x1a2>
 800c8e6:	f04f 0c01 	mov.w	ip, #1
 800c8ea:	e7f6      	b.n	800c8da <_strtod_l+0x28a>
 800c8ec:	08016070 	.word	0x08016070
 800c8f0:	08015e28 	.word	0x08015e28
 800c8f4:	7ff00000 	.word	0x7ff00000
 800c8f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8fa:	1c51      	adds	r1, r2, #1
 800c8fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8fe:	7852      	ldrb	r2, [r2, #1]
 800c900:	2a30      	cmp	r2, #48	; 0x30
 800c902:	d0f9      	beq.n	800c8f8 <_strtod_l+0x2a8>
 800c904:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c908:	2908      	cmp	r1, #8
 800c90a:	f63f af79 	bhi.w	800c800 <_strtod_l+0x1b0>
 800c90e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c914:	9206      	str	r2, [sp, #24]
 800c916:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c918:	1c51      	adds	r1, r2, #1
 800c91a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c91c:	7852      	ldrb	r2, [r2, #1]
 800c91e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c922:	2e09      	cmp	r6, #9
 800c924:	d937      	bls.n	800c996 <_strtod_l+0x346>
 800c926:	9e06      	ldr	r6, [sp, #24]
 800c928:	1b89      	subs	r1, r1, r6
 800c92a:	2908      	cmp	r1, #8
 800c92c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c930:	dc02      	bgt.n	800c938 <_strtod_l+0x2e8>
 800c932:	4576      	cmp	r6, lr
 800c934:	bfa8      	it	ge
 800c936:	4676      	movge	r6, lr
 800c938:	f1bc 0f00 	cmp.w	ip, #0
 800c93c:	d000      	beq.n	800c940 <_strtod_l+0x2f0>
 800c93e:	4276      	negs	r6, r6
 800c940:	2d00      	cmp	r5, #0
 800c942:	d14d      	bne.n	800c9e0 <_strtod_l+0x390>
 800c944:	9904      	ldr	r1, [sp, #16]
 800c946:	4301      	orrs	r1, r0
 800c948:	f47f aec6 	bne.w	800c6d8 <_strtod_l+0x88>
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f47f aee1 	bne.w	800c714 <_strtod_l+0xc4>
 800c952:	2a69      	cmp	r2, #105	; 0x69
 800c954:	d027      	beq.n	800c9a6 <_strtod_l+0x356>
 800c956:	dc24      	bgt.n	800c9a2 <_strtod_l+0x352>
 800c958:	2a49      	cmp	r2, #73	; 0x49
 800c95a:	d024      	beq.n	800c9a6 <_strtod_l+0x356>
 800c95c:	2a4e      	cmp	r2, #78	; 0x4e
 800c95e:	f47f aed9 	bne.w	800c714 <_strtod_l+0xc4>
 800c962:	499f      	ldr	r1, [pc, #636]	; (800cbe0 <_strtod_l+0x590>)
 800c964:	a817      	add	r0, sp, #92	; 0x5c
 800c966:	f001 fe49 	bl	800e5fc <__match>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f43f aed2 	beq.w	800c714 <_strtod_l+0xc4>
 800c970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b28      	cmp	r3, #40	; 0x28
 800c976:	d12d      	bne.n	800c9d4 <_strtod_l+0x384>
 800c978:	499a      	ldr	r1, [pc, #616]	; (800cbe4 <_strtod_l+0x594>)
 800c97a:	aa1a      	add	r2, sp, #104	; 0x68
 800c97c:	a817      	add	r0, sp, #92	; 0x5c
 800c97e:	f001 fe51 	bl	800e624 <__hexnan>
 800c982:	2805      	cmp	r0, #5
 800c984:	d126      	bne.n	800c9d4 <_strtod_l+0x384>
 800c986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c988:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c98c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c990:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c994:	e6a0      	b.n	800c6d8 <_strtod_l+0x88>
 800c996:	210a      	movs	r1, #10
 800c998:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c99c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c9a0:	e7b9      	b.n	800c916 <_strtod_l+0x2c6>
 800c9a2:	2a6e      	cmp	r2, #110	; 0x6e
 800c9a4:	e7db      	b.n	800c95e <_strtod_l+0x30e>
 800c9a6:	4990      	ldr	r1, [pc, #576]	; (800cbe8 <_strtod_l+0x598>)
 800c9a8:	a817      	add	r0, sp, #92	; 0x5c
 800c9aa:	f001 fe27 	bl	800e5fc <__match>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f aeb0 	beq.w	800c714 <_strtod_l+0xc4>
 800c9b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9b6:	498d      	ldr	r1, [pc, #564]	; (800cbec <_strtod_l+0x59c>)
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	a817      	add	r0, sp, #92	; 0x5c
 800c9bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9be:	f001 fe1d 	bl	800e5fc <__match>
 800c9c2:	b910      	cbnz	r0, 800c9ca <_strtod_l+0x37a>
 800c9c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cbfc <_strtod_l+0x5ac>
 800c9ce:	f04f 0a00 	mov.w	sl, #0
 800c9d2:	e681      	b.n	800c6d8 <_strtod_l+0x88>
 800c9d4:	4886      	ldr	r0, [pc, #536]	; (800cbf0 <_strtod_l+0x5a0>)
 800c9d6:	f002 fdf3 	bl	800f5c0 <nan>
 800c9da:	ec5b ab10 	vmov	sl, fp, d0
 800c9de:	e67b      	b.n	800c6d8 <_strtod_l+0x88>
 800c9e0:	9b05      	ldr	r3, [sp, #20]
 800c9e2:	9807      	ldr	r0, [sp, #28]
 800c9e4:	1af3      	subs	r3, r6, r3
 800c9e6:	2f00      	cmp	r7, #0
 800c9e8:	bf08      	it	eq
 800c9ea:	462f      	moveq	r7, r5
 800c9ec:	2d10      	cmp	r5, #16
 800c9ee:	9306      	str	r3, [sp, #24]
 800c9f0:	46a8      	mov	r8, r5
 800c9f2:	bfa8      	it	ge
 800c9f4:	f04f 0810 	movge.w	r8, #16
 800c9f8:	f7f3 fd5c 	bl	80004b4 <__aeabi_ui2d>
 800c9fc:	2d09      	cmp	r5, #9
 800c9fe:	4682      	mov	sl, r0
 800ca00:	468b      	mov	fp, r1
 800ca02:	dd13      	ble.n	800ca2c <_strtod_l+0x3dc>
 800ca04:	4b7b      	ldr	r3, [pc, #492]	; (800cbf4 <_strtod_l+0x5a4>)
 800ca06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ca0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ca0e:	f7f3 fdcb 	bl	80005a8 <__aeabi_dmul>
 800ca12:	4682      	mov	sl, r0
 800ca14:	4648      	mov	r0, r9
 800ca16:	468b      	mov	fp, r1
 800ca18:	f7f3 fd4c 	bl	80004b4 <__aeabi_ui2d>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4650      	mov	r0, sl
 800ca22:	4659      	mov	r1, fp
 800ca24:	f7f3 fc0a 	bl	800023c <__adddf3>
 800ca28:	4682      	mov	sl, r0
 800ca2a:	468b      	mov	fp, r1
 800ca2c:	2d0f      	cmp	r5, #15
 800ca2e:	dc38      	bgt.n	800caa2 <_strtod_l+0x452>
 800ca30:	9b06      	ldr	r3, [sp, #24]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f43f ae50 	beq.w	800c6d8 <_strtod_l+0x88>
 800ca38:	dd24      	ble.n	800ca84 <_strtod_l+0x434>
 800ca3a:	2b16      	cmp	r3, #22
 800ca3c:	dc0b      	bgt.n	800ca56 <_strtod_l+0x406>
 800ca3e:	496d      	ldr	r1, [pc, #436]	; (800cbf4 <_strtod_l+0x5a4>)
 800ca40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca48:	4652      	mov	r2, sl
 800ca4a:	465b      	mov	r3, fp
 800ca4c:	f7f3 fdac 	bl	80005a8 <__aeabi_dmul>
 800ca50:	4682      	mov	sl, r0
 800ca52:	468b      	mov	fp, r1
 800ca54:	e640      	b.n	800c6d8 <_strtod_l+0x88>
 800ca56:	9a06      	ldr	r2, [sp, #24]
 800ca58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	db20      	blt.n	800caa2 <_strtod_l+0x452>
 800ca60:	4c64      	ldr	r4, [pc, #400]	; (800cbf4 <_strtod_l+0x5a4>)
 800ca62:	f1c5 050f 	rsb	r5, r5, #15
 800ca66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca6a:	4652      	mov	r2, sl
 800ca6c:	465b      	mov	r3, fp
 800ca6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca72:	f7f3 fd99 	bl	80005a8 <__aeabi_dmul>
 800ca76:	9b06      	ldr	r3, [sp, #24]
 800ca78:	1b5d      	subs	r5, r3, r5
 800ca7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca82:	e7e3      	b.n	800ca4c <_strtod_l+0x3fc>
 800ca84:	9b06      	ldr	r3, [sp, #24]
 800ca86:	3316      	adds	r3, #22
 800ca88:	db0b      	blt.n	800caa2 <_strtod_l+0x452>
 800ca8a:	9b05      	ldr	r3, [sp, #20]
 800ca8c:	1b9e      	subs	r6, r3, r6
 800ca8e:	4b59      	ldr	r3, [pc, #356]	; (800cbf4 <_strtod_l+0x5a4>)
 800ca90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ca94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca98:	4650      	mov	r0, sl
 800ca9a:	4659      	mov	r1, fp
 800ca9c:	f7f3 feae 	bl	80007fc <__aeabi_ddiv>
 800caa0:	e7d6      	b.n	800ca50 <_strtod_l+0x400>
 800caa2:	9b06      	ldr	r3, [sp, #24]
 800caa4:	eba5 0808 	sub.w	r8, r5, r8
 800caa8:	4498      	add	r8, r3
 800caaa:	f1b8 0f00 	cmp.w	r8, #0
 800caae:	dd74      	ble.n	800cb9a <_strtod_l+0x54a>
 800cab0:	f018 030f 	ands.w	r3, r8, #15
 800cab4:	d00a      	beq.n	800cacc <_strtod_l+0x47c>
 800cab6:	494f      	ldr	r1, [pc, #316]	; (800cbf4 <_strtod_l+0x5a4>)
 800cab8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cabc:	4652      	mov	r2, sl
 800cabe:	465b      	mov	r3, fp
 800cac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac4:	f7f3 fd70 	bl	80005a8 <__aeabi_dmul>
 800cac8:	4682      	mov	sl, r0
 800caca:	468b      	mov	fp, r1
 800cacc:	f038 080f 	bics.w	r8, r8, #15
 800cad0:	d04f      	beq.n	800cb72 <_strtod_l+0x522>
 800cad2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cad6:	dd22      	ble.n	800cb1e <_strtod_l+0x4ce>
 800cad8:	2500      	movs	r5, #0
 800cada:	462e      	mov	r6, r5
 800cadc:	9507      	str	r5, [sp, #28]
 800cade:	9505      	str	r5, [sp, #20]
 800cae0:	2322      	movs	r3, #34	; 0x22
 800cae2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cbfc <_strtod_l+0x5ac>
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	f04f 0a00 	mov.w	sl, #0
 800caec:	9b07      	ldr	r3, [sp, #28]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f43f adf2 	beq.w	800c6d8 <_strtod_l+0x88>
 800caf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800caf6:	4620      	mov	r0, r4
 800caf8:	f001 fe8e 	bl	800e818 <_Bfree>
 800cafc:	9905      	ldr	r1, [sp, #20]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f001 fe8a 	bl	800e818 <_Bfree>
 800cb04:	4631      	mov	r1, r6
 800cb06:	4620      	mov	r0, r4
 800cb08:	f001 fe86 	bl	800e818 <_Bfree>
 800cb0c:	9907      	ldr	r1, [sp, #28]
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f001 fe82 	bl	800e818 <_Bfree>
 800cb14:	4629      	mov	r1, r5
 800cb16:	4620      	mov	r0, r4
 800cb18:	f001 fe7e 	bl	800e818 <_Bfree>
 800cb1c:	e5dc      	b.n	800c6d8 <_strtod_l+0x88>
 800cb1e:	4b36      	ldr	r3, [pc, #216]	; (800cbf8 <_strtod_l+0x5a8>)
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	2300      	movs	r3, #0
 800cb24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cb28:	4650      	mov	r0, sl
 800cb2a:	4659      	mov	r1, fp
 800cb2c:	4699      	mov	r9, r3
 800cb2e:	f1b8 0f01 	cmp.w	r8, #1
 800cb32:	dc21      	bgt.n	800cb78 <_strtod_l+0x528>
 800cb34:	b10b      	cbz	r3, 800cb3a <_strtod_l+0x4ea>
 800cb36:	4682      	mov	sl, r0
 800cb38:	468b      	mov	fp, r1
 800cb3a:	4b2f      	ldr	r3, [pc, #188]	; (800cbf8 <_strtod_l+0x5a8>)
 800cb3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cb40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cb44:	4652      	mov	r2, sl
 800cb46:	465b      	mov	r3, fp
 800cb48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cb4c:	f7f3 fd2c 	bl	80005a8 <__aeabi_dmul>
 800cb50:	4b2a      	ldr	r3, [pc, #168]	; (800cbfc <_strtod_l+0x5ac>)
 800cb52:	460a      	mov	r2, r1
 800cb54:	400b      	ands	r3, r1
 800cb56:	492a      	ldr	r1, [pc, #168]	; (800cc00 <_strtod_l+0x5b0>)
 800cb58:	428b      	cmp	r3, r1
 800cb5a:	4682      	mov	sl, r0
 800cb5c:	d8bc      	bhi.n	800cad8 <_strtod_l+0x488>
 800cb5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb62:	428b      	cmp	r3, r1
 800cb64:	bf86      	itte	hi
 800cb66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cc04 <_strtod_l+0x5b4>
 800cb6a:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cb72:	2300      	movs	r3, #0
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	e084      	b.n	800cc82 <_strtod_l+0x632>
 800cb78:	f018 0f01 	tst.w	r8, #1
 800cb7c:	d005      	beq.n	800cb8a <_strtod_l+0x53a>
 800cb7e:	9b04      	ldr	r3, [sp, #16]
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fd10 	bl	80005a8 <__aeabi_dmul>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	9a04      	ldr	r2, [sp, #16]
 800cb8c:	3208      	adds	r2, #8
 800cb8e:	f109 0901 	add.w	r9, r9, #1
 800cb92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb96:	9204      	str	r2, [sp, #16]
 800cb98:	e7c9      	b.n	800cb2e <_strtod_l+0x4de>
 800cb9a:	d0ea      	beq.n	800cb72 <_strtod_l+0x522>
 800cb9c:	f1c8 0800 	rsb	r8, r8, #0
 800cba0:	f018 020f 	ands.w	r2, r8, #15
 800cba4:	d00a      	beq.n	800cbbc <_strtod_l+0x56c>
 800cba6:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <_strtod_l+0x5a4>)
 800cba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbac:	4650      	mov	r0, sl
 800cbae:	4659      	mov	r1, fp
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f7f3 fe22 	bl	80007fc <__aeabi_ddiv>
 800cbb8:	4682      	mov	sl, r0
 800cbba:	468b      	mov	fp, r1
 800cbbc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cbc0:	d0d7      	beq.n	800cb72 <_strtod_l+0x522>
 800cbc2:	f1b8 0f1f 	cmp.w	r8, #31
 800cbc6:	dd1f      	ble.n	800cc08 <_strtod_l+0x5b8>
 800cbc8:	2500      	movs	r5, #0
 800cbca:	462e      	mov	r6, r5
 800cbcc:	9507      	str	r5, [sp, #28]
 800cbce:	9505      	str	r5, [sp, #20]
 800cbd0:	2322      	movs	r3, #34	; 0x22
 800cbd2:	f04f 0a00 	mov.w	sl, #0
 800cbd6:	f04f 0b00 	mov.w	fp, #0
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	e786      	b.n	800caec <_strtod_l+0x49c>
 800cbde:	bf00      	nop
 800cbe0:	08015df9 	.word	0x08015df9
 800cbe4:	08015e3c 	.word	0x08015e3c
 800cbe8:	08015df1 	.word	0x08015df1
 800cbec:	08015f7c 	.word	0x08015f7c
 800cbf0:	08016228 	.word	0x08016228
 800cbf4:	08016108 	.word	0x08016108
 800cbf8:	080160e0 	.word	0x080160e0
 800cbfc:	7ff00000 	.word	0x7ff00000
 800cc00:	7ca00000 	.word	0x7ca00000
 800cc04:	7fefffff 	.word	0x7fefffff
 800cc08:	f018 0310 	ands.w	r3, r8, #16
 800cc0c:	bf18      	it	ne
 800cc0e:	236a      	movne	r3, #106	; 0x6a
 800cc10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cfc0 <_strtod_l+0x970>
 800cc14:	9304      	str	r3, [sp, #16]
 800cc16:	4650      	mov	r0, sl
 800cc18:	4659      	mov	r1, fp
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f018 0f01 	tst.w	r8, #1
 800cc20:	d004      	beq.n	800cc2c <_strtod_l+0x5dc>
 800cc22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cc26:	f7f3 fcbf 	bl	80005a8 <__aeabi_dmul>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cc30:	f109 0908 	add.w	r9, r9, #8
 800cc34:	d1f2      	bne.n	800cc1c <_strtod_l+0x5cc>
 800cc36:	b10b      	cbz	r3, 800cc3c <_strtod_l+0x5ec>
 800cc38:	4682      	mov	sl, r0
 800cc3a:	468b      	mov	fp, r1
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	b1c3      	cbz	r3, 800cc72 <_strtod_l+0x622>
 800cc40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	dd11      	ble.n	800cc72 <_strtod_l+0x622>
 800cc4e:	2b1f      	cmp	r3, #31
 800cc50:	f340 8124 	ble.w	800ce9c <_strtod_l+0x84c>
 800cc54:	2b34      	cmp	r3, #52	; 0x34
 800cc56:	bfde      	ittt	le
 800cc58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc5c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc60:	fa03 f202 	lslle.w	r2, r3, r2
 800cc64:	f04f 0a00 	mov.w	sl, #0
 800cc68:	bfcc      	ite	gt
 800cc6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cc6e:	ea02 0b01 	andle.w	fp, r2, r1
 800cc72:	2200      	movs	r2, #0
 800cc74:	2300      	movs	r3, #0
 800cc76:	4650      	mov	r0, sl
 800cc78:	4659      	mov	r1, fp
 800cc7a:	f7f3 fefd 	bl	8000a78 <__aeabi_dcmpeq>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d1a2      	bne.n	800cbc8 <_strtod_l+0x578>
 800cc82:	9b07      	ldr	r3, [sp, #28]
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	9908      	ldr	r1, [sp, #32]
 800cc88:	462b      	mov	r3, r5
 800cc8a:	463a      	mov	r2, r7
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f001 fe2b 	bl	800e8e8 <__s2b>
 800cc92:	9007      	str	r0, [sp, #28]
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f43f af1f 	beq.w	800cad8 <_strtod_l+0x488>
 800cc9a:	9b05      	ldr	r3, [sp, #20]
 800cc9c:	1b9e      	subs	r6, r3, r6
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bfb4      	ite	lt
 800cca4:	4633      	movlt	r3, r6
 800cca6:	2300      	movge	r3, #0
 800cca8:	930c      	str	r3, [sp, #48]	; 0x30
 800ccaa:	9b06      	ldr	r3, [sp, #24]
 800ccac:	2500      	movs	r5, #0
 800ccae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccb2:	9312      	str	r3, [sp, #72]	; 0x48
 800ccb4:	462e      	mov	r6, r5
 800ccb6:	9b07      	ldr	r3, [sp, #28]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	6859      	ldr	r1, [r3, #4]
 800ccbc:	f001 fd6c 	bl	800e798 <_Balloc>
 800ccc0:	9005      	str	r0, [sp, #20]
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	f43f af0c 	beq.w	800cae0 <_strtod_l+0x490>
 800ccc8:	9b07      	ldr	r3, [sp, #28]
 800ccca:	691a      	ldr	r2, [r3, #16]
 800cccc:	3202      	adds	r2, #2
 800ccce:	f103 010c 	add.w	r1, r3, #12
 800ccd2:	0092      	lsls	r2, r2, #2
 800ccd4:	300c      	adds	r0, #12
 800ccd6:	f7fe fde9 	bl	800b8ac <memcpy>
 800ccda:	ec4b ab10 	vmov	d0, sl, fp
 800ccde:	aa1a      	add	r2, sp, #104	; 0x68
 800cce0:	a919      	add	r1, sp, #100	; 0x64
 800cce2:	4620      	mov	r0, r4
 800cce4:	f002 f946 	bl	800ef74 <__d2b>
 800cce8:	ec4b ab18 	vmov	d8, sl, fp
 800ccec:	9018      	str	r0, [sp, #96]	; 0x60
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f43f aef6 	beq.w	800cae0 <_strtod_l+0x490>
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f001 fe90 	bl	800ea1c <__i2b>
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f43f aeee 	beq.w	800cae0 <_strtod_l+0x490>
 800cd04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd06:	9904      	ldr	r1, [sp, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfab      	itete	ge
 800cd0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cd0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cd10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cd12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cd16:	bfac      	ite	ge
 800cd18:	eb03 0902 	addge.w	r9, r3, r2
 800cd1c:	1ad7      	sublt	r7, r2, r3
 800cd1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd20:	eba3 0801 	sub.w	r8, r3, r1
 800cd24:	4490      	add	r8, r2
 800cd26:	4ba1      	ldr	r3, [pc, #644]	; (800cfac <_strtod_l+0x95c>)
 800cd28:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd2c:	4598      	cmp	r8, r3
 800cd2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cd32:	f280 80c7 	bge.w	800cec4 <_strtod_l+0x874>
 800cd36:	eba3 0308 	sub.w	r3, r3, r8
 800cd3a:	2b1f      	cmp	r3, #31
 800cd3c:	eba2 0203 	sub.w	r2, r2, r3
 800cd40:	f04f 0101 	mov.w	r1, #1
 800cd44:	f300 80b1 	bgt.w	800ceaa <_strtod_l+0x85a>
 800cd48:	fa01 f303 	lsl.w	r3, r1, r3
 800cd4c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9308      	str	r3, [sp, #32]
 800cd52:	eb09 0802 	add.w	r8, r9, r2
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	45c1      	cmp	r9, r8
 800cd5a:	4417      	add	r7, r2
 800cd5c:	441f      	add	r7, r3
 800cd5e:	464b      	mov	r3, r9
 800cd60:	bfa8      	it	ge
 800cd62:	4643      	movge	r3, r8
 800cd64:	42bb      	cmp	r3, r7
 800cd66:	bfa8      	it	ge
 800cd68:	463b      	movge	r3, r7
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bfc2      	ittt	gt
 800cd6e:	eba8 0803 	subgt.w	r8, r8, r3
 800cd72:	1aff      	subgt	r7, r7, r3
 800cd74:	eba9 0903 	subgt.w	r9, r9, r3
 800cd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd17      	ble.n	800cdae <_strtod_l+0x75e>
 800cd7e:	4631      	mov	r1, r6
 800cd80:	461a      	mov	r2, r3
 800cd82:	4620      	mov	r0, r4
 800cd84:	f001 ff0a 	bl	800eb9c <__pow5mult>
 800cd88:	4606      	mov	r6, r0
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	f43f aea8 	beq.w	800cae0 <_strtod_l+0x490>
 800cd90:	4601      	mov	r1, r0
 800cd92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd94:	4620      	mov	r0, r4
 800cd96:	f001 fe57 	bl	800ea48 <__multiply>
 800cd9a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	f43f ae9f 	beq.w	800cae0 <_strtod_l+0x490>
 800cda2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cda4:	4620      	mov	r0, r4
 800cda6:	f001 fd37 	bl	800e818 <_Bfree>
 800cdaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdac:	9318      	str	r3, [sp, #96]	; 0x60
 800cdae:	f1b8 0f00 	cmp.w	r8, #0
 800cdb2:	f300 808c 	bgt.w	800cece <_strtod_l+0x87e>
 800cdb6:	9b06      	ldr	r3, [sp, #24]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	dd08      	ble.n	800cdce <_strtod_l+0x77e>
 800cdbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdbe:	9905      	ldr	r1, [sp, #20]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f001 feeb 	bl	800eb9c <__pow5mult>
 800cdc6:	9005      	str	r0, [sp, #20]
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f ae89 	beq.w	800cae0 <_strtod_l+0x490>
 800cdce:	2f00      	cmp	r7, #0
 800cdd0:	dd08      	ble.n	800cde4 <_strtod_l+0x794>
 800cdd2:	9905      	ldr	r1, [sp, #20]
 800cdd4:	463a      	mov	r2, r7
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f001 ff3a 	bl	800ec50 <__lshift>
 800cddc:	9005      	str	r0, [sp, #20]
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f43f ae7e 	beq.w	800cae0 <_strtod_l+0x490>
 800cde4:	f1b9 0f00 	cmp.w	r9, #0
 800cde8:	dd08      	ble.n	800cdfc <_strtod_l+0x7ac>
 800cdea:	4631      	mov	r1, r6
 800cdec:	464a      	mov	r2, r9
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f001 ff2e 	bl	800ec50 <__lshift>
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f43f ae72 	beq.w	800cae0 <_strtod_l+0x490>
 800cdfc:	9a05      	ldr	r2, [sp, #20]
 800cdfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce00:	4620      	mov	r0, r4
 800ce02:	f001 ffb1 	bl	800ed68 <__mdiff>
 800ce06:	4605      	mov	r5, r0
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	f43f ae69 	beq.w	800cae0 <_strtod_l+0x490>
 800ce0e:	68c3      	ldr	r3, [r0, #12]
 800ce10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce12:	2300      	movs	r3, #0
 800ce14:	60c3      	str	r3, [r0, #12]
 800ce16:	4631      	mov	r1, r6
 800ce18:	f001 ff8a 	bl	800ed30 <__mcmp>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	da60      	bge.n	800cee2 <_strtod_l+0x892>
 800ce20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce22:	ea53 030a 	orrs.w	r3, r3, sl
 800ce26:	f040 8082 	bne.w	800cf2e <_strtod_l+0x8de>
 800ce2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d17d      	bne.n	800cf2e <_strtod_l+0x8de>
 800ce32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce36:	0d1b      	lsrs	r3, r3, #20
 800ce38:	051b      	lsls	r3, r3, #20
 800ce3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce3e:	d976      	bls.n	800cf2e <_strtod_l+0x8de>
 800ce40:	696b      	ldr	r3, [r5, #20]
 800ce42:	b913      	cbnz	r3, 800ce4a <_strtod_l+0x7fa>
 800ce44:	692b      	ldr	r3, [r5, #16]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	dd71      	ble.n	800cf2e <_strtod_l+0x8de>
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f001 fefe 	bl	800ec50 <__lshift>
 800ce54:	4631      	mov	r1, r6
 800ce56:	4605      	mov	r5, r0
 800ce58:	f001 ff6a 	bl	800ed30 <__mcmp>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	dd66      	ble.n	800cf2e <_strtod_l+0x8de>
 800ce60:	9904      	ldr	r1, [sp, #16]
 800ce62:	4a53      	ldr	r2, [pc, #332]	; (800cfb0 <_strtod_l+0x960>)
 800ce64:	465b      	mov	r3, fp
 800ce66:	2900      	cmp	r1, #0
 800ce68:	f000 8081 	beq.w	800cf6e <_strtod_l+0x91e>
 800ce6c:	ea02 010b 	and.w	r1, r2, fp
 800ce70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce74:	dc7b      	bgt.n	800cf6e <_strtod_l+0x91e>
 800ce76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce7a:	f77f aea9 	ble.w	800cbd0 <_strtod_l+0x580>
 800ce7e:	4b4d      	ldr	r3, [pc, #308]	; (800cfb4 <_strtod_l+0x964>)
 800ce80:	4650      	mov	r0, sl
 800ce82:	4659      	mov	r1, fp
 800ce84:	2200      	movs	r2, #0
 800ce86:	f7f3 fb8f 	bl	80005a8 <__aeabi_dmul>
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4303      	orrs	r3, r0
 800ce8e:	bf08      	it	eq
 800ce90:	2322      	moveq	r3, #34	; 0x22
 800ce92:	4682      	mov	sl, r0
 800ce94:	468b      	mov	fp, r1
 800ce96:	bf08      	it	eq
 800ce98:	6023      	streq	r3, [r4, #0]
 800ce9a:	e62b      	b.n	800caf4 <_strtod_l+0x4a4>
 800ce9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cea0:	fa02 f303 	lsl.w	r3, r2, r3
 800cea4:	ea03 0a0a 	and.w	sl, r3, sl
 800cea8:	e6e3      	b.n	800cc72 <_strtod_l+0x622>
 800ceaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ceae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ceb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ceb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ceba:	fa01 f308 	lsl.w	r3, r1, r8
 800cebe:	9308      	str	r3, [sp, #32]
 800cec0:	910d      	str	r1, [sp, #52]	; 0x34
 800cec2:	e746      	b.n	800cd52 <_strtod_l+0x702>
 800cec4:	2300      	movs	r3, #0
 800cec6:	9308      	str	r3, [sp, #32]
 800cec8:	2301      	movs	r3, #1
 800ceca:	930d      	str	r3, [sp, #52]	; 0x34
 800cecc:	e741      	b.n	800cd52 <_strtod_l+0x702>
 800cece:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ced0:	4642      	mov	r2, r8
 800ced2:	4620      	mov	r0, r4
 800ced4:	f001 febc 	bl	800ec50 <__lshift>
 800ced8:	9018      	str	r0, [sp, #96]	; 0x60
 800ceda:	2800      	cmp	r0, #0
 800cedc:	f47f af6b 	bne.w	800cdb6 <_strtod_l+0x766>
 800cee0:	e5fe      	b.n	800cae0 <_strtod_l+0x490>
 800cee2:	465f      	mov	r7, fp
 800cee4:	d16e      	bne.n	800cfc4 <_strtod_l+0x974>
 800cee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cee8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceec:	b342      	cbz	r2, 800cf40 <_strtod_l+0x8f0>
 800ceee:	4a32      	ldr	r2, [pc, #200]	; (800cfb8 <_strtod_l+0x968>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d128      	bne.n	800cf46 <_strtod_l+0x8f6>
 800cef4:	9b04      	ldr	r3, [sp, #16]
 800cef6:	4651      	mov	r1, sl
 800cef8:	b1eb      	cbz	r3, 800cf36 <_strtod_l+0x8e6>
 800cefa:	4b2d      	ldr	r3, [pc, #180]	; (800cfb0 <_strtod_l+0x960>)
 800cefc:	403b      	ands	r3, r7
 800cefe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf02:	f04f 32ff 	mov.w	r2, #4294967295
 800cf06:	d819      	bhi.n	800cf3c <_strtod_l+0x8ec>
 800cf08:	0d1b      	lsrs	r3, r3, #20
 800cf0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf12:	4299      	cmp	r1, r3
 800cf14:	d117      	bne.n	800cf46 <_strtod_l+0x8f6>
 800cf16:	4b29      	ldr	r3, [pc, #164]	; (800cfbc <_strtod_l+0x96c>)
 800cf18:	429f      	cmp	r7, r3
 800cf1a:	d102      	bne.n	800cf22 <_strtod_l+0x8d2>
 800cf1c:	3101      	adds	r1, #1
 800cf1e:	f43f addf 	beq.w	800cae0 <_strtod_l+0x490>
 800cf22:	4b23      	ldr	r3, [pc, #140]	; (800cfb0 <_strtod_l+0x960>)
 800cf24:	403b      	ands	r3, r7
 800cf26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cf2a:	f04f 0a00 	mov.w	sl, #0
 800cf2e:	9b04      	ldr	r3, [sp, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1a4      	bne.n	800ce7e <_strtod_l+0x82e>
 800cf34:	e5de      	b.n	800caf4 <_strtod_l+0x4a4>
 800cf36:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3a:	e7ea      	b.n	800cf12 <_strtod_l+0x8c2>
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	e7e8      	b.n	800cf12 <_strtod_l+0x8c2>
 800cf40:	ea53 030a 	orrs.w	r3, r3, sl
 800cf44:	d08c      	beq.n	800ce60 <_strtod_l+0x810>
 800cf46:	9b08      	ldr	r3, [sp, #32]
 800cf48:	b1db      	cbz	r3, 800cf82 <_strtod_l+0x932>
 800cf4a:	423b      	tst	r3, r7
 800cf4c:	d0ef      	beq.n	800cf2e <_strtod_l+0x8de>
 800cf4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf50:	9a04      	ldr	r2, [sp, #16]
 800cf52:	4650      	mov	r0, sl
 800cf54:	4659      	mov	r1, fp
 800cf56:	b1c3      	cbz	r3, 800cf8a <_strtod_l+0x93a>
 800cf58:	f7ff fb5e 	bl	800c618 <sulp>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	ec51 0b18 	vmov	r0, r1, d8
 800cf64:	f7f3 f96a 	bl	800023c <__adddf3>
 800cf68:	4682      	mov	sl, r0
 800cf6a:	468b      	mov	fp, r1
 800cf6c:	e7df      	b.n	800cf2e <_strtod_l+0x8de>
 800cf6e:	4013      	ands	r3, r2
 800cf70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf7c:	f04f 3aff 	mov.w	sl, #4294967295
 800cf80:	e7d5      	b.n	800cf2e <_strtod_l+0x8de>
 800cf82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf84:	ea13 0f0a 	tst.w	r3, sl
 800cf88:	e7e0      	b.n	800cf4c <_strtod_l+0x8fc>
 800cf8a:	f7ff fb45 	bl	800c618 <sulp>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	ec51 0b18 	vmov	r0, r1, d8
 800cf96:	f7f3 f94f 	bl	8000238 <__aeabi_dsub>
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4682      	mov	sl, r0
 800cfa0:	468b      	mov	fp, r1
 800cfa2:	f7f3 fd69 	bl	8000a78 <__aeabi_dcmpeq>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d0c1      	beq.n	800cf2e <_strtod_l+0x8de>
 800cfaa:	e611      	b.n	800cbd0 <_strtod_l+0x580>
 800cfac:	fffffc02 	.word	0xfffffc02
 800cfb0:	7ff00000 	.word	0x7ff00000
 800cfb4:	39500000 	.word	0x39500000
 800cfb8:	000fffff 	.word	0x000fffff
 800cfbc:	7fefffff 	.word	0x7fefffff
 800cfc0:	08015e50 	.word	0x08015e50
 800cfc4:	4631      	mov	r1, r6
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f002 f830 	bl	800f02c <__ratio>
 800cfcc:	ec59 8b10 	vmov	r8, r9, d0
 800cfd0:	ee10 0a10 	vmov	r0, s0
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfda:	4649      	mov	r1, r9
 800cfdc:	f7f3 fd60 	bl	8000aa0 <__aeabi_dcmple>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d07a      	beq.n	800d0da <_strtod_l+0xa8a>
 800cfe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d04a      	beq.n	800d080 <_strtod_l+0xa30>
 800cfea:	4b95      	ldr	r3, [pc, #596]	; (800d240 <_strtod_l+0xbf0>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cff2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d240 <_strtod_l+0xbf0>
 800cff6:	f04f 0800 	mov.w	r8, #0
 800cffa:	4b92      	ldr	r3, [pc, #584]	; (800d244 <_strtod_l+0xbf4>)
 800cffc:	403b      	ands	r3, r7
 800cffe:	930d      	str	r3, [sp, #52]	; 0x34
 800d000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d002:	4b91      	ldr	r3, [pc, #580]	; (800d248 <_strtod_l+0xbf8>)
 800d004:	429a      	cmp	r2, r3
 800d006:	f040 80b0 	bne.w	800d16a <_strtod_l+0xb1a>
 800d00a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d00e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d012:	ec4b ab10 	vmov	d0, sl, fp
 800d016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d01a:	f001 ff2f 	bl	800ee7c <__ulp>
 800d01e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d022:	ec53 2b10 	vmov	r2, r3, d0
 800d026:	f7f3 fabf 	bl	80005a8 <__aeabi_dmul>
 800d02a:	4652      	mov	r2, sl
 800d02c:	465b      	mov	r3, fp
 800d02e:	f7f3 f905 	bl	800023c <__adddf3>
 800d032:	460b      	mov	r3, r1
 800d034:	4983      	ldr	r1, [pc, #524]	; (800d244 <_strtod_l+0xbf4>)
 800d036:	4a85      	ldr	r2, [pc, #532]	; (800d24c <_strtod_l+0xbfc>)
 800d038:	4019      	ands	r1, r3
 800d03a:	4291      	cmp	r1, r2
 800d03c:	4682      	mov	sl, r0
 800d03e:	d960      	bls.n	800d102 <_strtod_l+0xab2>
 800d040:	ee18 3a90 	vmov	r3, s17
 800d044:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d048:	4293      	cmp	r3, r2
 800d04a:	d104      	bne.n	800d056 <_strtod_l+0xa06>
 800d04c:	ee18 3a10 	vmov	r3, s16
 800d050:	3301      	adds	r3, #1
 800d052:	f43f ad45 	beq.w	800cae0 <_strtod_l+0x490>
 800d056:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d258 <_strtod_l+0xc08>
 800d05a:	f04f 3aff 	mov.w	sl, #4294967295
 800d05e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d060:	4620      	mov	r0, r4
 800d062:	f001 fbd9 	bl	800e818 <_Bfree>
 800d066:	9905      	ldr	r1, [sp, #20]
 800d068:	4620      	mov	r0, r4
 800d06a:	f001 fbd5 	bl	800e818 <_Bfree>
 800d06e:	4631      	mov	r1, r6
 800d070:	4620      	mov	r0, r4
 800d072:	f001 fbd1 	bl	800e818 <_Bfree>
 800d076:	4629      	mov	r1, r5
 800d078:	4620      	mov	r0, r4
 800d07a:	f001 fbcd 	bl	800e818 <_Bfree>
 800d07e:	e61a      	b.n	800ccb6 <_strtod_l+0x666>
 800d080:	f1ba 0f00 	cmp.w	sl, #0
 800d084:	d11b      	bne.n	800d0be <_strtod_l+0xa6e>
 800d086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d08a:	b9f3      	cbnz	r3, 800d0ca <_strtod_l+0xa7a>
 800d08c:	4b6c      	ldr	r3, [pc, #432]	; (800d240 <_strtod_l+0xbf0>)
 800d08e:	2200      	movs	r2, #0
 800d090:	4640      	mov	r0, r8
 800d092:	4649      	mov	r1, r9
 800d094:	f7f3 fcfa 	bl	8000a8c <__aeabi_dcmplt>
 800d098:	b9d0      	cbnz	r0, 800d0d0 <_strtod_l+0xa80>
 800d09a:	4640      	mov	r0, r8
 800d09c:	4649      	mov	r1, r9
 800d09e:	4b6c      	ldr	r3, [pc, #432]	; (800d250 <_strtod_l+0xc00>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f7f3 fa81 	bl	80005a8 <__aeabi_dmul>
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	4689      	mov	r9, r1
 800d0aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d0b2:	9315      	str	r3, [sp, #84]	; 0x54
 800d0b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d0b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d0bc:	e79d      	b.n	800cffa <_strtod_l+0x9aa>
 800d0be:	f1ba 0f01 	cmp.w	sl, #1
 800d0c2:	d102      	bne.n	800d0ca <_strtod_l+0xa7a>
 800d0c4:	2f00      	cmp	r7, #0
 800d0c6:	f43f ad83 	beq.w	800cbd0 <_strtod_l+0x580>
 800d0ca:	4b62      	ldr	r3, [pc, #392]	; (800d254 <_strtod_l+0xc04>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	e78e      	b.n	800cfee <_strtod_l+0x99e>
 800d0d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d250 <_strtod_l+0xc00>
 800d0d4:	f04f 0800 	mov.w	r8, #0
 800d0d8:	e7e7      	b.n	800d0aa <_strtod_l+0xa5a>
 800d0da:	4b5d      	ldr	r3, [pc, #372]	; (800d250 <_strtod_l+0xc00>)
 800d0dc:	4640      	mov	r0, r8
 800d0de:	4649      	mov	r1, r9
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f7f3 fa61 	bl	80005a8 <__aeabi_dmul>
 800d0e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0e8:	4680      	mov	r8, r0
 800d0ea:	4689      	mov	r9, r1
 800d0ec:	b933      	cbnz	r3, 800d0fc <_strtod_l+0xaac>
 800d0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0f2:	900e      	str	r0, [sp, #56]	; 0x38
 800d0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0fa:	e7dd      	b.n	800d0b8 <_strtod_l+0xa68>
 800d0fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d100:	e7f9      	b.n	800d0f6 <_strtod_l+0xaa6>
 800d102:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d106:	9b04      	ldr	r3, [sp, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1a8      	bne.n	800d05e <_strtod_l+0xa0e>
 800d10c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d112:	0d1b      	lsrs	r3, r3, #20
 800d114:	051b      	lsls	r3, r3, #20
 800d116:	429a      	cmp	r2, r3
 800d118:	d1a1      	bne.n	800d05e <_strtod_l+0xa0e>
 800d11a:	4640      	mov	r0, r8
 800d11c:	4649      	mov	r1, r9
 800d11e:	f7f3 fd8b 	bl	8000c38 <__aeabi_d2lz>
 800d122:	f7f3 fa13 	bl	800054c <__aeabi_l2d>
 800d126:	4602      	mov	r2, r0
 800d128:	460b      	mov	r3, r1
 800d12a:	4640      	mov	r0, r8
 800d12c:	4649      	mov	r1, r9
 800d12e:	f7f3 f883 	bl	8000238 <__aeabi_dsub>
 800d132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d138:	ea43 030a 	orr.w	r3, r3, sl
 800d13c:	4313      	orrs	r3, r2
 800d13e:	4680      	mov	r8, r0
 800d140:	4689      	mov	r9, r1
 800d142:	d055      	beq.n	800d1f0 <_strtod_l+0xba0>
 800d144:	a336      	add	r3, pc, #216	; (adr r3, 800d220 <_strtod_l+0xbd0>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7f3 fc9f 	bl	8000a8c <__aeabi_dcmplt>
 800d14e:	2800      	cmp	r0, #0
 800d150:	f47f acd0 	bne.w	800caf4 <_strtod_l+0x4a4>
 800d154:	a334      	add	r3, pc, #208	; (adr r3, 800d228 <_strtod_l+0xbd8>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	4640      	mov	r0, r8
 800d15c:	4649      	mov	r1, r9
 800d15e:	f7f3 fcb3 	bl	8000ac8 <__aeabi_dcmpgt>
 800d162:	2800      	cmp	r0, #0
 800d164:	f43f af7b 	beq.w	800d05e <_strtod_l+0xa0e>
 800d168:	e4c4      	b.n	800caf4 <_strtod_l+0x4a4>
 800d16a:	9b04      	ldr	r3, [sp, #16]
 800d16c:	b333      	cbz	r3, 800d1bc <_strtod_l+0xb6c>
 800d16e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d170:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d174:	d822      	bhi.n	800d1bc <_strtod_l+0xb6c>
 800d176:	a32e      	add	r3, pc, #184	; (adr r3, 800d230 <_strtod_l+0xbe0>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	4640      	mov	r0, r8
 800d17e:	4649      	mov	r1, r9
 800d180:	f7f3 fc8e 	bl	8000aa0 <__aeabi_dcmple>
 800d184:	b1a0      	cbz	r0, 800d1b0 <_strtod_l+0xb60>
 800d186:	4649      	mov	r1, r9
 800d188:	4640      	mov	r0, r8
 800d18a:	f7f3 fce5 	bl	8000b58 <__aeabi_d2uiz>
 800d18e:	2801      	cmp	r0, #1
 800d190:	bf38      	it	cc
 800d192:	2001      	movcc	r0, #1
 800d194:	f7f3 f98e 	bl	80004b4 <__aeabi_ui2d>
 800d198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d19a:	4680      	mov	r8, r0
 800d19c:	4689      	mov	r9, r1
 800d19e:	bb23      	cbnz	r3, 800d1ea <_strtod_l+0xb9a>
 800d1a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1a4:	9010      	str	r0, [sp, #64]	; 0x40
 800d1a6:	9311      	str	r3, [sp, #68]	; 0x44
 800d1a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d1bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1c0:	eeb0 0a48 	vmov.f32	s0, s16
 800d1c4:	eef0 0a68 	vmov.f32	s1, s17
 800d1c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1cc:	f001 fe56 	bl	800ee7c <__ulp>
 800d1d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1d4:	ec53 2b10 	vmov	r2, r3, d0
 800d1d8:	f7f3 f9e6 	bl	80005a8 <__aeabi_dmul>
 800d1dc:	ec53 2b18 	vmov	r2, r3, d8
 800d1e0:	f7f3 f82c 	bl	800023c <__adddf3>
 800d1e4:	4682      	mov	sl, r0
 800d1e6:	468b      	mov	fp, r1
 800d1e8:	e78d      	b.n	800d106 <_strtod_l+0xab6>
 800d1ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d1ee:	e7db      	b.n	800d1a8 <_strtod_l+0xb58>
 800d1f0:	a311      	add	r3, pc, #68	; (adr r3, 800d238 <_strtod_l+0xbe8>)
 800d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f6:	f7f3 fc49 	bl	8000a8c <__aeabi_dcmplt>
 800d1fa:	e7b2      	b.n	800d162 <_strtod_l+0xb12>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	f7ff ba6b 	b.w	800c6e0 <_strtod_l+0x90>
 800d20a:	2a65      	cmp	r2, #101	; 0x65
 800d20c:	f43f ab5f 	beq.w	800c8ce <_strtod_l+0x27e>
 800d210:	2a45      	cmp	r2, #69	; 0x45
 800d212:	f43f ab5c 	beq.w	800c8ce <_strtod_l+0x27e>
 800d216:	2301      	movs	r3, #1
 800d218:	f7ff bb94 	b.w	800c944 <_strtod_l+0x2f4>
 800d21c:	f3af 8000 	nop.w
 800d220:	94a03595 	.word	0x94a03595
 800d224:	3fdfffff 	.word	0x3fdfffff
 800d228:	35afe535 	.word	0x35afe535
 800d22c:	3fe00000 	.word	0x3fe00000
 800d230:	ffc00000 	.word	0xffc00000
 800d234:	41dfffff 	.word	0x41dfffff
 800d238:	94a03595 	.word	0x94a03595
 800d23c:	3fcfffff 	.word	0x3fcfffff
 800d240:	3ff00000 	.word	0x3ff00000
 800d244:	7ff00000 	.word	0x7ff00000
 800d248:	7fe00000 	.word	0x7fe00000
 800d24c:	7c9fffff 	.word	0x7c9fffff
 800d250:	3fe00000 	.word	0x3fe00000
 800d254:	bff00000 	.word	0xbff00000
 800d258:	7fefffff 	.word	0x7fefffff

0800d25c <_strtod_r>:
 800d25c:	4b01      	ldr	r3, [pc, #4]	; (800d264 <_strtod_r+0x8>)
 800d25e:	f7ff b9f7 	b.w	800c650 <_strtod_l>
 800d262:	bf00      	nop
 800d264:	20004750 	.word	0x20004750

0800d268 <strtod>:
 800d268:	460a      	mov	r2, r1
 800d26a:	4601      	mov	r1, r0
 800d26c:	4802      	ldr	r0, [pc, #8]	; (800d278 <strtod+0x10>)
 800d26e:	4b03      	ldr	r3, [pc, #12]	; (800d27c <strtod+0x14>)
 800d270:	6800      	ldr	r0, [r0, #0]
 800d272:	f7ff b9ed 	b.w	800c650 <_strtod_l>
 800d276:	bf00      	nop
 800d278:	200046e8 	.word	0x200046e8
 800d27c:	20004750 	.word	0x20004750

0800d280 <_strtol_l.constprop.0>:
 800d280:	2b01      	cmp	r3, #1
 800d282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d286:	d001      	beq.n	800d28c <_strtol_l.constprop.0+0xc>
 800d288:	2b24      	cmp	r3, #36	; 0x24
 800d28a:	d906      	bls.n	800d29a <_strtol_l.constprop.0+0x1a>
 800d28c:	f7fe fae4 	bl	800b858 <__errno>
 800d290:	2316      	movs	r3, #22
 800d292:	6003      	str	r3, [r0, #0]
 800d294:	2000      	movs	r0, #0
 800d296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d29a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d380 <_strtol_l.constprop.0+0x100>
 800d29e:	460d      	mov	r5, r1
 800d2a0:	462e      	mov	r6, r5
 800d2a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d2aa:	f017 0708 	ands.w	r7, r7, #8
 800d2ae:	d1f7      	bne.n	800d2a0 <_strtol_l.constprop.0+0x20>
 800d2b0:	2c2d      	cmp	r4, #45	; 0x2d
 800d2b2:	d132      	bne.n	800d31a <_strtol_l.constprop.0+0x9a>
 800d2b4:	782c      	ldrb	r4, [r5, #0]
 800d2b6:	2701      	movs	r7, #1
 800d2b8:	1cb5      	adds	r5, r6, #2
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d05b      	beq.n	800d376 <_strtol_l.constprop.0+0xf6>
 800d2be:	2b10      	cmp	r3, #16
 800d2c0:	d109      	bne.n	800d2d6 <_strtol_l.constprop.0+0x56>
 800d2c2:	2c30      	cmp	r4, #48	; 0x30
 800d2c4:	d107      	bne.n	800d2d6 <_strtol_l.constprop.0+0x56>
 800d2c6:	782c      	ldrb	r4, [r5, #0]
 800d2c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d2cc:	2c58      	cmp	r4, #88	; 0x58
 800d2ce:	d14d      	bne.n	800d36c <_strtol_l.constprop.0+0xec>
 800d2d0:	786c      	ldrb	r4, [r5, #1]
 800d2d2:	2310      	movs	r3, #16
 800d2d4:	3502      	adds	r5, #2
 800d2d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d2da:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2de:	f04f 0c00 	mov.w	ip, #0
 800d2e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800d2e6:	4666      	mov	r6, ip
 800d2e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800d2ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d2f0:	f1be 0f09 	cmp.w	lr, #9
 800d2f4:	d816      	bhi.n	800d324 <_strtol_l.constprop.0+0xa4>
 800d2f6:	4674      	mov	r4, lr
 800d2f8:	42a3      	cmp	r3, r4
 800d2fa:	dd24      	ble.n	800d346 <_strtol_l.constprop.0+0xc6>
 800d2fc:	f1bc 0f00 	cmp.w	ip, #0
 800d300:	db1e      	blt.n	800d340 <_strtol_l.constprop.0+0xc0>
 800d302:	45b1      	cmp	r9, r6
 800d304:	d31c      	bcc.n	800d340 <_strtol_l.constprop.0+0xc0>
 800d306:	d101      	bne.n	800d30c <_strtol_l.constprop.0+0x8c>
 800d308:	45a2      	cmp	sl, r4
 800d30a:	db19      	blt.n	800d340 <_strtol_l.constprop.0+0xc0>
 800d30c:	fb06 4603 	mla	r6, r6, r3, r4
 800d310:	f04f 0c01 	mov.w	ip, #1
 800d314:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d318:	e7e8      	b.n	800d2ec <_strtol_l.constprop.0+0x6c>
 800d31a:	2c2b      	cmp	r4, #43	; 0x2b
 800d31c:	bf04      	itt	eq
 800d31e:	782c      	ldrbeq	r4, [r5, #0]
 800d320:	1cb5      	addeq	r5, r6, #2
 800d322:	e7ca      	b.n	800d2ba <_strtol_l.constprop.0+0x3a>
 800d324:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d328:	f1be 0f19 	cmp.w	lr, #25
 800d32c:	d801      	bhi.n	800d332 <_strtol_l.constprop.0+0xb2>
 800d32e:	3c37      	subs	r4, #55	; 0x37
 800d330:	e7e2      	b.n	800d2f8 <_strtol_l.constprop.0+0x78>
 800d332:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d336:	f1be 0f19 	cmp.w	lr, #25
 800d33a:	d804      	bhi.n	800d346 <_strtol_l.constprop.0+0xc6>
 800d33c:	3c57      	subs	r4, #87	; 0x57
 800d33e:	e7db      	b.n	800d2f8 <_strtol_l.constprop.0+0x78>
 800d340:	f04f 3cff 	mov.w	ip, #4294967295
 800d344:	e7e6      	b.n	800d314 <_strtol_l.constprop.0+0x94>
 800d346:	f1bc 0f00 	cmp.w	ip, #0
 800d34a:	da05      	bge.n	800d358 <_strtol_l.constprop.0+0xd8>
 800d34c:	2322      	movs	r3, #34	; 0x22
 800d34e:	6003      	str	r3, [r0, #0]
 800d350:	4646      	mov	r6, r8
 800d352:	b942      	cbnz	r2, 800d366 <_strtol_l.constprop.0+0xe6>
 800d354:	4630      	mov	r0, r6
 800d356:	e79e      	b.n	800d296 <_strtol_l.constprop.0+0x16>
 800d358:	b107      	cbz	r7, 800d35c <_strtol_l.constprop.0+0xdc>
 800d35a:	4276      	negs	r6, r6
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	d0f9      	beq.n	800d354 <_strtol_l.constprop.0+0xd4>
 800d360:	f1bc 0f00 	cmp.w	ip, #0
 800d364:	d000      	beq.n	800d368 <_strtol_l.constprop.0+0xe8>
 800d366:	1e69      	subs	r1, r5, #1
 800d368:	6011      	str	r1, [r2, #0]
 800d36a:	e7f3      	b.n	800d354 <_strtol_l.constprop.0+0xd4>
 800d36c:	2430      	movs	r4, #48	; 0x30
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1b1      	bne.n	800d2d6 <_strtol_l.constprop.0+0x56>
 800d372:	2308      	movs	r3, #8
 800d374:	e7af      	b.n	800d2d6 <_strtol_l.constprop.0+0x56>
 800d376:	2c30      	cmp	r4, #48	; 0x30
 800d378:	d0a5      	beq.n	800d2c6 <_strtol_l.constprop.0+0x46>
 800d37a:	230a      	movs	r3, #10
 800d37c:	e7ab      	b.n	800d2d6 <_strtol_l.constprop.0+0x56>
 800d37e:	bf00      	nop
 800d380:	08015e79 	.word	0x08015e79

0800d384 <_strtol_r>:
 800d384:	f7ff bf7c 	b.w	800d280 <_strtol_l.constprop.0>

0800d388 <quorem>:
 800d388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	6903      	ldr	r3, [r0, #16]
 800d38e:	690c      	ldr	r4, [r1, #16]
 800d390:	42a3      	cmp	r3, r4
 800d392:	4607      	mov	r7, r0
 800d394:	f2c0 8081 	blt.w	800d49a <quorem+0x112>
 800d398:	3c01      	subs	r4, #1
 800d39a:	f101 0814 	add.w	r8, r1, #20
 800d39e:	f100 0514 	add.w	r5, r0, #20
 800d3a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3c0:	d331      	bcc.n	800d426 <quorem+0x9e>
 800d3c2:	f04f 0e00 	mov.w	lr, #0
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	46ac      	mov	ip, r5
 800d3ca:	46f2      	mov	sl, lr
 800d3cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3d0:	b293      	uxth	r3, r2
 800d3d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d3d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d3e0:	f8dc a000 	ldr.w	sl, [ip]
 800d3e4:	0c12      	lsrs	r2, r2, #16
 800d3e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d3ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	9b00      	ldr	r3, [sp, #0]
 800d3f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3f6:	b292      	uxth	r2, r2
 800d3f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d400:	f8bd 3000 	ldrh.w	r3, [sp]
 800d404:	4581      	cmp	r9, r0
 800d406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d40a:	f84c 3b04 	str.w	r3, [ip], #4
 800d40e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d412:	d2db      	bcs.n	800d3cc <quorem+0x44>
 800d414:	f855 300b 	ldr.w	r3, [r5, fp]
 800d418:	b92b      	cbnz	r3, 800d426 <quorem+0x9e>
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	3b04      	subs	r3, #4
 800d41e:	429d      	cmp	r5, r3
 800d420:	461a      	mov	r2, r3
 800d422:	d32e      	bcc.n	800d482 <quorem+0xfa>
 800d424:	613c      	str	r4, [r7, #16]
 800d426:	4638      	mov	r0, r7
 800d428:	f001 fc82 	bl	800ed30 <__mcmp>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	db24      	blt.n	800d47a <quorem+0xf2>
 800d430:	3601      	adds	r6, #1
 800d432:	4628      	mov	r0, r5
 800d434:	f04f 0c00 	mov.w	ip, #0
 800d438:	f858 2b04 	ldr.w	r2, [r8], #4
 800d43c:	f8d0 e000 	ldr.w	lr, [r0]
 800d440:	b293      	uxth	r3, r2
 800d442:	ebac 0303 	sub.w	r3, ip, r3
 800d446:	0c12      	lsrs	r2, r2, #16
 800d448:	fa13 f38e 	uxtah	r3, r3, lr
 800d44c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d454:	b29b      	uxth	r3, r3
 800d456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d45a:	45c1      	cmp	r9, r8
 800d45c:	f840 3b04 	str.w	r3, [r0], #4
 800d460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d464:	d2e8      	bcs.n	800d438 <quorem+0xb0>
 800d466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d46a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d46e:	b922      	cbnz	r2, 800d47a <quorem+0xf2>
 800d470:	3b04      	subs	r3, #4
 800d472:	429d      	cmp	r5, r3
 800d474:	461a      	mov	r2, r3
 800d476:	d30a      	bcc.n	800d48e <quorem+0x106>
 800d478:	613c      	str	r4, [r7, #16]
 800d47a:	4630      	mov	r0, r6
 800d47c:	b003      	add	sp, #12
 800d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d482:	6812      	ldr	r2, [r2, #0]
 800d484:	3b04      	subs	r3, #4
 800d486:	2a00      	cmp	r2, #0
 800d488:	d1cc      	bne.n	800d424 <quorem+0x9c>
 800d48a:	3c01      	subs	r4, #1
 800d48c:	e7c7      	b.n	800d41e <quorem+0x96>
 800d48e:	6812      	ldr	r2, [r2, #0]
 800d490:	3b04      	subs	r3, #4
 800d492:	2a00      	cmp	r2, #0
 800d494:	d1f0      	bne.n	800d478 <quorem+0xf0>
 800d496:	3c01      	subs	r4, #1
 800d498:	e7eb      	b.n	800d472 <quorem+0xea>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e7ee      	b.n	800d47c <quorem+0xf4>
	...

0800d4a0 <_dtoa_r>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	ed2d 8b04 	vpush	{d8-d9}
 800d4a8:	ec57 6b10 	vmov	r6, r7, d0
 800d4ac:	b093      	sub	sp, #76	; 0x4c
 800d4ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4b4:	9106      	str	r1, [sp, #24]
 800d4b6:	ee10 aa10 	vmov	sl, s0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4be:	930c      	str	r3, [sp, #48]	; 0x30
 800d4c0:	46bb      	mov	fp, r7
 800d4c2:	b975      	cbnz	r5, 800d4e2 <_dtoa_r+0x42>
 800d4c4:	2010      	movs	r0, #16
 800d4c6:	f001 f94d 	bl	800e764 <malloc>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ce:	b920      	cbnz	r0, 800d4da <_dtoa_r+0x3a>
 800d4d0:	4ba7      	ldr	r3, [pc, #668]	; (800d770 <_dtoa_r+0x2d0>)
 800d4d2:	21ea      	movs	r1, #234	; 0xea
 800d4d4:	48a7      	ldr	r0, [pc, #668]	; (800d774 <_dtoa_r+0x2d4>)
 800d4d6:	f002 f8ad 	bl	800f634 <__assert_func>
 800d4da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4de:	6005      	str	r5, [r0, #0]
 800d4e0:	60c5      	str	r5, [r0, #12]
 800d4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	b151      	cbz	r1, 800d4fe <_dtoa_r+0x5e>
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	604a      	str	r2, [r1, #4]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4093      	lsls	r3, r2
 800d4f0:	608b      	str	r3, [r1, #8]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f001 f990 	bl	800e818 <_Bfree>
 800d4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	1e3b      	subs	r3, r7, #0
 800d500:	bfaa      	itet	ge
 800d502:	2300      	movge	r3, #0
 800d504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d508:	f8c8 3000 	strge.w	r3, [r8]
 800d50c:	4b9a      	ldr	r3, [pc, #616]	; (800d778 <_dtoa_r+0x2d8>)
 800d50e:	bfbc      	itt	lt
 800d510:	2201      	movlt	r2, #1
 800d512:	f8c8 2000 	strlt.w	r2, [r8]
 800d516:	ea33 030b 	bics.w	r3, r3, fp
 800d51a:	d11b      	bne.n	800d554 <_dtoa_r+0xb4>
 800d51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d51e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d528:	4333      	orrs	r3, r6
 800d52a:	f000 8592 	beq.w	800e052 <_dtoa_r+0xbb2>
 800d52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d530:	b963      	cbnz	r3, 800d54c <_dtoa_r+0xac>
 800d532:	4b92      	ldr	r3, [pc, #584]	; (800d77c <_dtoa_r+0x2dc>)
 800d534:	e022      	b.n	800d57c <_dtoa_r+0xdc>
 800d536:	4b92      	ldr	r3, [pc, #584]	; (800d780 <_dtoa_r+0x2e0>)
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	3308      	adds	r3, #8
 800d53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	9801      	ldr	r0, [sp, #4]
 800d542:	b013      	add	sp, #76	; 0x4c
 800d544:	ecbd 8b04 	vpop	{d8-d9}
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	4b8b      	ldr	r3, [pc, #556]	; (800d77c <_dtoa_r+0x2dc>)
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	3303      	adds	r3, #3
 800d552:	e7f3      	b.n	800d53c <_dtoa_r+0x9c>
 800d554:	2200      	movs	r2, #0
 800d556:	2300      	movs	r3, #0
 800d558:	4650      	mov	r0, sl
 800d55a:	4659      	mov	r1, fp
 800d55c:	f7f3 fa8c 	bl	8000a78 <__aeabi_dcmpeq>
 800d560:	ec4b ab19 	vmov	d9, sl, fp
 800d564:	4680      	mov	r8, r0
 800d566:	b158      	cbz	r0, 800d580 <_dtoa_r+0xe0>
 800d568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d56a:	2301      	movs	r3, #1
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 856b 	beq.w	800e04c <_dtoa_r+0xbac>
 800d576:	4883      	ldr	r0, [pc, #524]	; (800d784 <_dtoa_r+0x2e4>)
 800d578:	6018      	str	r0, [r3, #0]
 800d57a:	1e43      	subs	r3, r0, #1
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	e7df      	b.n	800d540 <_dtoa_r+0xa0>
 800d580:	ec4b ab10 	vmov	d0, sl, fp
 800d584:	aa10      	add	r2, sp, #64	; 0x40
 800d586:	a911      	add	r1, sp, #68	; 0x44
 800d588:	4620      	mov	r0, r4
 800d58a:	f001 fcf3 	bl	800ef74 <__d2b>
 800d58e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d592:	ee08 0a10 	vmov	s16, r0
 800d596:	2d00      	cmp	r5, #0
 800d598:	f000 8084 	beq.w	800d6a4 <_dtoa_r+0x204>
 800d59c:	ee19 3a90 	vmov	r3, s19
 800d5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5a8:	4656      	mov	r6, sl
 800d5aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5b6:	4b74      	ldr	r3, [pc, #464]	; (800d788 <_dtoa_r+0x2e8>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	4639      	mov	r1, r7
 800d5be:	f7f2 fe3b 	bl	8000238 <__aeabi_dsub>
 800d5c2:	a365      	add	r3, pc, #404	; (adr r3, 800d758 <_dtoa_r+0x2b8>)
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	f7f2 ffee 	bl	80005a8 <__aeabi_dmul>
 800d5cc:	a364      	add	r3, pc, #400	; (adr r3, 800d760 <_dtoa_r+0x2c0>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f2 fe33 	bl	800023c <__adddf3>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	4628      	mov	r0, r5
 800d5da:	460f      	mov	r7, r1
 800d5dc:	f7f2 ff7a 	bl	80004d4 <__aeabi_i2d>
 800d5e0:	a361      	add	r3, pc, #388	; (adr r3, 800d768 <_dtoa_r+0x2c8>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f2 ffdf 	bl	80005a8 <__aeabi_dmul>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	f7f2 fe23 	bl	800023c <__adddf3>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	460f      	mov	r7, r1
 800d5fa:	f7f3 fa85 	bl	8000b08 <__aeabi_d2iz>
 800d5fe:	2200      	movs	r2, #0
 800d600:	9000      	str	r0, [sp, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	4630      	mov	r0, r6
 800d606:	4639      	mov	r1, r7
 800d608:	f7f3 fa40 	bl	8000a8c <__aeabi_dcmplt>
 800d60c:	b150      	cbz	r0, 800d624 <_dtoa_r+0x184>
 800d60e:	9800      	ldr	r0, [sp, #0]
 800d610:	f7f2 ff60 	bl	80004d4 <__aeabi_i2d>
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	f7f3 fa2e 	bl	8000a78 <__aeabi_dcmpeq>
 800d61c:	b910      	cbnz	r0, 800d624 <_dtoa_r+0x184>
 800d61e:	9b00      	ldr	r3, [sp, #0]
 800d620:	3b01      	subs	r3, #1
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	9b00      	ldr	r3, [sp, #0]
 800d626:	2b16      	cmp	r3, #22
 800d628:	d85a      	bhi.n	800d6e0 <_dtoa_r+0x240>
 800d62a:	9a00      	ldr	r2, [sp, #0]
 800d62c:	4b57      	ldr	r3, [pc, #348]	; (800d78c <_dtoa_r+0x2ec>)
 800d62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	ec51 0b19 	vmov	r0, r1, d9
 800d63a:	f7f3 fa27 	bl	8000a8c <__aeabi_dcmplt>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d050      	beq.n	800d6e4 <_dtoa_r+0x244>
 800d642:	9b00      	ldr	r3, [sp, #0]
 800d644:	3b01      	subs	r3, #1
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2300      	movs	r3, #0
 800d64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d64e:	1b5d      	subs	r5, r3, r5
 800d650:	1e6b      	subs	r3, r5, #1
 800d652:	9305      	str	r3, [sp, #20]
 800d654:	bf45      	ittet	mi
 800d656:	f1c5 0301 	rsbmi	r3, r5, #1
 800d65a:	9304      	strmi	r3, [sp, #16]
 800d65c:	2300      	movpl	r3, #0
 800d65e:	2300      	movmi	r3, #0
 800d660:	bf4c      	ite	mi
 800d662:	9305      	strmi	r3, [sp, #20]
 800d664:	9304      	strpl	r3, [sp, #16]
 800d666:	9b00      	ldr	r3, [sp, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	db3d      	blt.n	800d6e8 <_dtoa_r+0x248>
 800d66c:	9b05      	ldr	r3, [sp, #20]
 800d66e:	9a00      	ldr	r2, [sp, #0]
 800d670:	920a      	str	r2, [sp, #40]	; 0x28
 800d672:	4413      	add	r3, r2
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	2300      	movs	r3, #0
 800d678:	9307      	str	r3, [sp, #28]
 800d67a:	9b06      	ldr	r3, [sp, #24]
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	f200 8089 	bhi.w	800d794 <_dtoa_r+0x2f4>
 800d682:	2b05      	cmp	r3, #5
 800d684:	bfc4      	itt	gt
 800d686:	3b04      	subgt	r3, #4
 800d688:	9306      	strgt	r3, [sp, #24]
 800d68a:	9b06      	ldr	r3, [sp, #24]
 800d68c:	f1a3 0302 	sub.w	r3, r3, #2
 800d690:	bfcc      	ite	gt
 800d692:	2500      	movgt	r5, #0
 800d694:	2501      	movle	r5, #1
 800d696:	2b03      	cmp	r3, #3
 800d698:	f200 8087 	bhi.w	800d7aa <_dtoa_r+0x30a>
 800d69c:	e8df f003 	tbb	[pc, r3]
 800d6a0:	59383a2d 	.word	0x59383a2d
 800d6a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6a8:	441d      	add	r5, r3
 800d6aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6ae:	2b20      	cmp	r3, #32
 800d6b0:	bfc1      	itttt	gt
 800d6b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6c2:	bfda      	itte	le
 800d6c4:	f1c3 0320 	rsble	r3, r3, #32
 800d6c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d6cc:	4318      	orrgt	r0, r3
 800d6ce:	f7f2 fef1 	bl	80004b4 <__aeabi_ui2d>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6da:	3d01      	subs	r5, #1
 800d6dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6de:	e76a      	b.n	800d5b6 <_dtoa_r+0x116>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e7b2      	b.n	800d64a <_dtoa_r+0x1aa>
 800d6e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6e6:	e7b1      	b.n	800d64c <_dtoa_r+0x1ac>
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	9a00      	ldr	r2, [sp, #0]
 800d6ec:	1a9b      	subs	r3, r3, r2
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	4253      	negs	r3, r2
 800d6f2:	9307      	str	r3, [sp, #28]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6f8:	e7bf      	b.n	800d67a <_dtoa_r+0x1da>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9308      	str	r3, [sp, #32]
 800d6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d700:	2b00      	cmp	r3, #0
 800d702:	dc55      	bgt.n	800d7b0 <_dtoa_r+0x310>
 800d704:	2301      	movs	r3, #1
 800d706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d70a:	461a      	mov	r2, r3
 800d70c:	9209      	str	r2, [sp, #36]	; 0x24
 800d70e:	e00c      	b.n	800d72a <_dtoa_r+0x28a>
 800d710:	2301      	movs	r3, #1
 800d712:	e7f3      	b.n	800d6fc <_dtoa_r+0x25c>
 800d714:	2300      	movs	r3, #0
 800d716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d718:	9308      	str	r3, [sp, #32]
 800d71a:	9b00      	ldr	r3, [sp, #0]
 800d71c:	4413      	add	r3, r2
 800d71e:	9302      	str	r3, [sp, #8]
 800d720:	3301      	adds	r3, #1
 800d722:	2b01      	cmp	r3, #1
 800d724:	9303      	str	r3, [sp, #12]
 800d726:	bfb8      	it	lt
 800d728:	2301      	movlt	r3, #1
 800d72a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d72c:	2200      	movs	r2, #0
 800d72e:	6042      	str	r2, [r0, #4]
 800d730:	2204      	movs	r2, #4
 800d732:	f102 0614 	add.w	r6, r2, #20
 800d736:	429e      	cmp	r6, r3
 800d738:	6841      	ldr	r1, [r0, #4]
 800d73a:	d93d      	bls.n	800d7b8 <_dtoa_r+0x318>
 800d73c:	4620      	mov	r0, r4
 800d73e:	f001 f82b 	bl	800e798 <_Balloc>
 800d742:	9001      	str	r0, [sp, #4]
 800d744:	2800      	cmp	r0, #0
 800d746:	d13b      	bne.n	800d7c0 <_dtoa_r+0x320>
 800d748:	4b11      	ldr	r3, [pc, #68]	; (800d790 <_dtoa_r+0x2f0>)
 800d74a:	4602      	mov	r2, r0
 800d74c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d750:	e6c0      	b.n	800d4d4 <_dtoa_r+0x34>
 800d752:	2301      	movs	r3, #1
 800d754:	e7df      	b.n	800d716 <_dtoa_r+0x276>
 800d756:	bf00      	nop
 800d758:	636f4361 	.word	0x636f4361
 800d75c:	3fd287a7 	.word	0x3fd287a7
 800d760:	8b60c8b3 	.word	0x8b60c8b3
 800d764:	3fc68a28 	.word	0x3fc68a28
 800d768:	509f79fb 	.word	0x509f79fb
 800d76c:	3fd34413 	.word	0x3fd34413
 800d770:	08015f86 	.word	0x08015f86
 800d774:	08015f9d 	.word	0x08015f9d
 800d778:	7ff00000 	.word	0x7ff00000
 800d77c:	08015f82 	.word	0x08015f82
 800d780:	08015f79 	.word	0x08015f79
 800d784:	08015dfd 	.word	0x08015dfd
 800d788:	3ff80000 	.word	0x3ff80000
 800d78c:	08016108 	.word	0x08016108
 800d790:	08015ff8 	.word	0x08015ff8
 800d794:	2501      	movs	r5, #1
 800d796:	2300      	movs	r3, #0
 800d798:	9306      	str	r3, [sp, #24]
 800d79a:	9508      	str	r5, [sp, #32]
 800d79c:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2312      	movs	r3, #18
 800d7a8:	e7b0      	b.n	800d70c <_dtoa_r+0x26c>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	9308      	str	r3, [sp, #32]
 800d7ae:	e7f5      	b.n	800d79c <_dtoa_r+0x2fc>
 800d7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7b6:	e7b8      	b.n	800d72a <_dtoa_r+0x28a>
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	6041      	str	r1, [r0, #4]
 800d7bc:	0052      	lsls	r2, r2, #1
 800d7be:	e7b8      	b.n	800d732 <_dtoa_r+0x292>
 800d7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c2:	9a01      	ldr	r2, [sp, #4]
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	9b03      	ldr	r3, [sp, #12]
 800d7c8:	2b0e      	cmp	r3, #14
 800d7ca:	f200 809d 	bhi.w	800d908 <_dtoa_r+0x468>
 800d7ce:	2d00      	cmp	r5, #0
 800d7d0:	f000 809a 	beq.w	800d908 <_dtoa_r+0x468>
 800d7d4:	9b00      	ldr	r3, [sp, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	dd32      	ble.n	800d840 <_dtoa_r+0x3a0>
 800d7da:	4ab7      	ldr	r2, [pc, #732]	; (800dab8 <_dtoa_r+0x618>)
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7e8:	9b00      	ldr	r3, [sp, #0]
 800d7ea:	05d8      	lsls	r0, r3, #23
 800d7ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7f0:	d516      	bpl.n	800d820 <_dtoa_r+0x380>
 800d7f2:	4bb2      	ldr	r3, [pc, #712]	; (800dabc <_dtoa_r+0x61c>)
 800d7f4:	ec51 0b19 	vmov	r0, r1, d9
 800d7f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7fc:	f7f2 fffe 	bl	80007fc <__aeabi_ddiv>
 800d800:	f007 070f 	and.w	r7, r7, #15
 800d804:	4682      	mov	sl, r0
 800d806:	468b      	mov	fp, r1
 800d808:	2503      	movs	r5, #3
 800d80a:	4eac      	ldr	r6, [pc, #688]	; (800dabc <_dtoa_r+0x61c>)
 800d80c:	b957      	cbnz	r7, 800d824 <_dtoa_r+0x384>
 800d80e:	4642      	mov	r2, r8
 800d810:	464b      	mov	r3, r9
 800d812:	4650      	mov	r0, sl
 800d814:	4659      	mov	r1, fp
 800d816:	f7f2 fff1 	bl	80007fc <__aeabi_ddiv>
 800d81a:	4682      	mov	sl, r0
 800d81c:	468b      	mov	fp, r1
 800d81e:	e028      	b.n	800d872 <_dtoa_r+0x3d2>
 800d820:	2502      	movs	r5, #2
 800d822:	e7f2      	b.n	800d80a <_dtoa_r+0x36a>
 800d824:	07f9      	lsls	r1, r7, #31
 800d826:	d508      	bpl.n	800d83a <_dtoa_r+0x39a>
 800d828:	4640      	mov	r0, r8
 800d82a:	4649      	mov	r1, r9
 800d82c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d830:	f7f2 feba 	bl	80005a8 <__aeabi_dmul>
 800d834:	3501      	adds	r5, #1
 800d836:	4680      	mov	r8, r0
 800d838:	4689      	mov	r9, r1
 800d83a:	107f      	asrs	r7, r7, #1
 800d83c:	3608      	adds	r6, #8
 800d83e:	e7e5      	b.n	800d80c <_dtoa_r+0x36c>
 800d840:	f000 809b 	beq.w	800d97a <_dtoa_r+0x4da>
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	4f9d      	ldr	r7, [pc, #628]	; (800dabc <_dtoa_r+0x61c>)
 800d848:	425e      	negs	r6, r3
 800d84a:	4b9b      	ldr	r3, [pc, #620]	; (800dab8 <_dtoa_r+0x618>)
 800d84c:	f006 020f 	and.w	r2, r6, #15
 800d850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	ec51 0b19 	vmov	r0, r1, d9
 800d85c:	f7f2 fea4 	bl	80005a8 <__aeabi_dmul>
 800d860:	1136      	asrs	r6, r6, #4
 800d862:	4682      	mov	sl, r0
 800d864:	468b      	mov	fp, r1
 800d866:	2300      	movs	r3, #0
 800d868:	2502      	movs	r5, #2
 800d86a:	2e00      	cmp	r6, #0
 800d86c:	d17a      	bne.n	800d964 <_dtoa_r+0x4c4>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d3      	bne.n	800d81a <_dtoa_r+0x37a>
 800d872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 8082 	beq.w	800d97e <_dtoa_r+0x4de>
 800d87a:	4b91      	ldr	r3, [pc, #580]	; (800dac0 <_dtoa_r+0x620>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	4650      	mov	r0, sl
 800d880:	4659      	mov	r1, fp
 800d882:	f7f3 f903 	bl	8000a8c <__aeabi_dcmplt>
 800d886:	2800      	cmp	r0, #0
 800d888:	d079      	beq.n	800d97e <_dtoa_r+0x4de>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d076      	beq.n	800d97e <_dtoa_r+0x4de>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	dd36      	ble.n	800d904 <_dtoa_r+0x464>
 800d896:	9b00      	ldr	r3, [sp, #0]
 800d898:	4650      	mov	r0, sl
 800d89a:	4659      	mov	r1, fp
 800d89c:	1e5f      	subs	r7, r3, #1
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4b88      	ldr	r3, [pc, #544]	; (800dac4 <_dtoa_r+0x624>)
 800d8a2:	f7f2 fe81 	bl	80005a8 <__aeabi_dmul>
 800d8a6:	9e02      	ldr	r6, [sp, #8]
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	468b      	mov	fp, r1
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f7f2 fe10 	bl	80004d4 <__aeabi_i2d>
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	465b      	mov	r3, fp
 800d8b8:	f7f2 fe76 	bl	80005a8 <__aeabi_dmul>
 800d8bc:	4b82      	ldr	r3, [pc, #520]	; (800dac8 <_dtoa_r+0x628>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f7f2 fcbc 	bl	800023c <__adddf3>
 800d8c4:	46d0      	mov	r8, sl
 800d8c6:	46d9      	mov	r9, fp
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8ce:	2e00      	cmp	r6, #0
 800d8d0:	d158      	bne.n	800d984 <_dtoa_r+0x4e4>
 800d8d2:	4b7e      	ldr	r3, [pc, #504]	; (800dacc <_dtoa_r+0x62c>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	4649      	mov	r1, r9
 800d8da:	f7f2 fcad 	bl	8000238 <__aeabi_dsub>
 800d8de:	4652      	mov	r2, sl
 800d8e0:	465b      	mov	r3, fp
 800d8e2:	4680      	mov	r8, r0
 800d8e4:	4689      	mov	r9, r1
 800d8e6:	f7f3 f8ef 	bl	8000ac8 <__aeabi_dcmpgt>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f040 8295 	bne.w	800de1a <_dtoa_r+0x97a>
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	f7f3 f8c7 	bl	8000a8c <__aeabi_dcmplt>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f040 8289 	bne.w	800de16 <_dtoa_r+0x976>
 800d904:	ec5b ab19 	vmov	sl, fp, d9
 800d908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f2c0 8148 	blt.w	800dba0 <_dtoa_r+0x700>
 800d910:	9a00      	ldr	r2, [sp, #0]
 800d912:	2a0e      	cmp	r2, #14
 800d914:	f300 8144 	bgt.w	800dba0 <_dtoa_r+0x700>
 800d918:	4b67      	ldr	r3, [pc, #412]	; (800dab8 <_dtoa_r+0x618>)
 800d91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d91e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	f280 80d5 	bge.w	800dad4 <_dtoa_r+0x634>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f300 80d1 	bgt.w	800dad4 <_dtoa_r+0x634>
 800d932:	f040 826f 	bne.w	800de14 <_dtoa_r+0x974>
 800d936:	4b65      	ldr	r3, [pc, #404]	; (800dacc <_dtoa_r+0x62c>)
 800d938:	2200      	movs	r2, #0
 800d93a:	4640      	mov	r0, r8
 800d93c:	4649      	mov	r1, r9
 800d93e:	f7f2 fe33 	bl	80005a8 <__aeabi_dmul>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f3 f8b5 	bl	8000ab4 <__aeabi_dcmpge>
 800d94a:	9e03      	ldr	r6, [sp, #12]
 800d94c:	4637      	mov	r7, r6
 800d94e:	2800      	cmp	r0, #0
 800d950:	f040 8245 	bne.w	800ddde <_dtoa_r+0x93e>
 800d954:	9d01      	ldr	r5, [sp, #4]
 800d956:	2331      	movs	r3, #49	; 0x31
 800d958:	f805 3b01 	strb.w	r3, [r5], #1
 800d95c:	9b00      	ldr	r3, [sp, #0]
 800d95e:	3301      	adds	r3, #1
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	e240      	b.n	800dde6 <_dtoa_r+0x946>
 800d964:	07f2      	lsls	r2, r6, #31
 800d966:	d505      	bpl.n	800d974 <_dtoa_r+0x4d4>
 800d968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d96c:	f7f2 fe1c 	bl	80005a8 <__aeabi_dmul>
 800d970:	3501      	adds	r5, #1
 800d972:	2301      	movs	r3, #1
 800d974:	1076      	asrs	r6, r6, #1
 800d976:	3708      	adds	r7, #8
 800d978:	e777      	b.n	800d86a <_dtoa_r+0x3ca>
 800d97a:	2502      	movs	r5, #2
 800d97c:	e779      	b.n	800d872 <_dtoa_r+0x3d2>
 800d97e:	9f00      	ldr	r7, [sp, #0]
 800d980:	9e03      	ldr	r6, [sp, #12]
 800d982:	e794      	b.n	800d8ae <_dtoa_r+0x40e>
 800d984:	9901      	ldr	r1, [sp, #4]
 800d986:	4b4c      	ldr	r3, [pc, #304]	; (800dab8 <_dtoa_r+0x618>)
 800d988:	4431      	add	r1, r6
 800d98a:	910d      	str	r1, [sp, #52]	; 0x34
 800d98c:	9908      	ldr	r1, [sp, #32]
 800d98e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d996:	2900      	cmp	r1, #0
 800d998:	d043      	beq.n	800da22 <_dtoa_r+0x582>
 800d99a:	494d      	ldr	r1, [pc, #308]	; (800dad0 <_dtoa_r+0x630>)
 800d99c:	2000      	movs	r0, #0
 800d99e:	f7f2 ff2d 	bl	80007fc <__aeabi_ddiv>
 800d9a2:	4652      	mov	r2, sl
 800d9a4:	465b      	mov	r3, fp
 800d9a6:	f7f2 fc47 	bl	8000238 <__aeabi_dsub>
 800d9aa:	9d01      	ldr	r5, [sp, #4]
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	468b      	mov	fp, r1
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f7f3 f8a8 	bl	8000b08 <__aeabi_d2iz>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	f7f2 fd8b 	bl	80004d4 <__aeabi_i2d>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	f7f2 fc37 	bl	8000238 <__aeabi_dsub>
 800d9ca:	3630      	adds	r6, #48	; 0x30
 800d9cc:	f805 6b01 	strb.w	r6, [r5], #1
 800d9d0:	4652      	mov	r2, sl
 800d9d2:	465b      	mov	r3, fp
 800d9d4:	4680      	mov	r8, r0
 800d9d6:	4689      	mov	r9, r1
 800d9d8:	f7f3 f858 	bl	8000a8c <__aeabi_dcmplt>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d163      	bne.n	800daa8 <_dtoa_r+0x608>
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	4936      	ldr	r1, [pc, #216]	; (800dac0 <_dtoa_r+0x620>)
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f7f2 fc26 	bl	8000238 <__aeabi_dsub>
 800d9ec:	4652      	mov	r2, sl
 800d9ee:	465b      	mov	r3, fp
 800d9f0:	f7f3 f84c 	bl	8000a8c <__aeabi_dcmplt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f040 80b5 	bne.w	800db64 <_dtoa_r+0x6c4>
 800d9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	d081      	beq.n	800d904 <_dtoa_r+0x464>
 800da00:	4b30      	ldr	r3, [pc, #192]	; (800dac4 <_dtoa_r+0x624>)
 800da02:	2200      	movs	r2, #0
 800da04:	4650      	mov	r0, sl
 800da06:	4659      	mov	r1, fp
 800da08:	f7f2 fdce 	bl	80005a8 <__aeabi_dmul>
 800da0c:	4b2d      	ldr	r3, [pc, #180]	; (800dac4 <_dtoa_r+0x624>)
 800da0e:	4682      	mov	sl, r0
 800da10:	468b      	mov	fp, r1
 800da12:	4640      	mov	r0, r8
 800da14:	4649      	mov	r1, r9
 800da16:	2200      	movs	r2, #0
 800da18:	f7f2 fdc6 	bl	80005a8 <__aeabi_dmul>
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	e7c6      	b.n	800d9b0 <_dtoa_r+0x510>
 800da22:	4650      	mov	r0, sl
 800da24:	4659      	mov	r1, fp
 800da26:	f7f2 fdbf 	bl	80005a8 <__aeabi_dmul>
 800da2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da2c:	9d01      	ldr	r5, [sp, #4]
 800da2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da30:	4682      	mov	sl, r0
 800da32:	468b      	mov	fp, r1
 800da34:	4649      	mov	r1, r9
 800da36:	4640      	mov	r0, r8
 800da38:	f7f3 f866 	bl	8000b08 <__aeabi_d2iz>
 800da3c:	4606      	mov	r6, r0
 800da3e:	f7f2 fd49 	bl	80004d4 <__aeabi_i2d>
 800da42:	3630      	adds	r6, #48	; 0x30
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fbf4 	bl	8000238 <__aeabi_dsub>
 800da50:	f805 6b01 	strb.w	r6, [r5], #1
 800da54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da56:	429d      	cmp	r5, r3
 800da58:	4680      	mov	r8, r0
 800da5a:	4689      	mov	r9, r1
 800da5c:	f04f 0200 	mov.w	r2, #0
 800da60:	d124      	bne.n	800daac <_dtoa_r+0x60c>
 800da62:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <_dtoa_r+0x630>)
 800da64:	4650      	mov	r0, sl
 800da66:	4659      	mov	r1, fp
 800da68:	f7f2 fbe8 	bl	800023c <__adddf3>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4640      	mov	r0, r8
 800da72:	4649      	mov	r1, r9
 800da74:	f7f3 f828 	bl	8000ac8 <__aeabi_dcmpgt>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d173      	bne.n	800db64 <_dtoa_r+0x6c4>
 800da7c:	4652      	mov	r2, sl
 800da7e:	465b      	mov	r3, fp
 800da80:	4913      	ldr	r1, [pc, #76]	; (800dad0 <_dtoa_r+0x630>)
 800da82:	2000      	movs	r0, #0
 800da84:	f7f2 fbd8 	bl	8000238 <__aeabi_dsub>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4640      	mov	r0, r8
 800da8e:	4649      	mov	r1, r9
 800da90:	f7f2 fffc 	bl	8000a8c <__aeabi_dcmplt>
 800da94:	2800      	cmp	r0, #0
 800da96:	f43f af35 	beq.w	800d904 <_dtoa_r+0x464>
 800da9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da9c:	1e6b      	subs	r3, r5, #1
 800da9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800daa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800daa4:	2b30      	cmp	r3, #48	; 0x30
 800daa6:	d0f8      	beq.n	800da9a <_dtoa_r+0x5fa>
 800daa8:	9700      	str	r7, [sp, #0]
 800daaa:	e049      	b.n	800db40 <_dtoa_r+0x6a0>
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <_dtoa_r+0x624>)
 800daae:	f7f2 fd7b 	bl	80005a8 <__aeabi_dmul>
 800dab2:	4680      	mov	r8, r0
 800dab4:	4689      	mov	r9, r1
 800dab6:	e7bd      	b.n	800da34 <_dtoa_r+0x594>
 800dab8:	08016108 	.word	0x08016108
 800dabc:	080160e0 	.word	0x080160e0
 800dac0:	3ff00000 	.word	0x3ff00000
 800dac4:	40240000 	.word	0x40240000
 800dac8:	401c0000 	.word	0x401c0000
 800dacc:	40140000 	.word	0x40140000
 800dad0:	3fe00000 	.word	0x3fe00000
 800dad4:	9d01      	ldr	r5, [sp, #4]
 800dad6:	4656      	mov	r6, sl
 800dad8:	465f      	mov	r7, fp
 800dada:	4642      	mov	r2, r8
 800dadc:	464b      	mov	r3, r9
 800dade:	4630      	mov	r0, r6
 800dae0:	4639      	mov	r1, r7
 800dae2:	f7f2 fe8b 	bl	80007fc <__aeabi_ddiv>
 800dae6:	f7f3 f80f 	bl	8000b08 <__aeabi_d2iz>
 800daea:	4682      	mov	sl, r0
 800daec:	f7f2 fcf2 	bl	80004d4 <__aeabi_i2d>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	f7f2 fd58 	bl	80005a8 <__aeabi_dmul>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4630      	mov	r0, r6
 800dafe:	4639      	mov	r1, r7
 800db00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db04:	f7f2 fb98 	bl	8000238 <__aeabi_dsub>
 800db08:	f805 6b01 	strb.w	r6, [r5], #1
 800db0c:	9e01      	ldr	r6, [sp, #4]
 800db0e:	9f03      	ldr	r7, [sp, #12]
 800db10:	1bae      	subs	r6, r5, r6
 800db12:	42b7      	cmp	r7, r6
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	d135      	bne.n	800db86 <_dtoa_r+0x6e6>
 800db1a:	f7f2 fb8f 	bl	800023c <__adddf3>
 800db1e:	4642      	mov	r2, r8
 800db20:	464b      	mov	r3, r9
 800db22:	4606      	mov	r6, r0
 800db24:	460f      	mov	r7, r1
 800db26:	f7f2 ffcf 	bl	8000ac8 <__aeabi_dcmpgt>
 800db2a:	b9d0      	cbnz	r0, 800db62 <_dtoa_r+0x6c2>
 800db2c:	4642      	mov	r2, r8
 800db2e:	464b      	mov	r3, r9
 800db30:	4630      	mov	r0, r6
 800db32:	4639      	mov	r1, r7
 800db34:	f7f2 ffa0 	bl	8000a78 <__aeabi_dcmpeq>
 800db38:	b110      	cbz	r0, 800db40 <_dtoa_r+0x6a0>
 800db3a:	f01a 0f01 	tst.w	sl, #1
 800db3e:	d110      	bne.n	800db62 <_dtoa_r+0x6c2>
 800db40:	4620      	mov	r0, r4
 800db42:	ee18 1a10 	vmov	r1, s16
 800db46:	f000 fe67 	bl	800e818 <_Bfree>
 800db4a:	2300      	movs	r3, #0
 800db4c:	9800      	ldr	r0, [sp, #0]
 800db4e:	702b      	strb	r3, [r5, #0]
 800db50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db52:	3001      	adds	r0, #1
 800db54:	6018      	str	r0, [r3, #0]
 800db56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f acf1 	beq.w	800d540 <_dtoa_r+0xa0>
 800db5e:	601d      	str	r5, [r3, #0]
 800db60:	e4ee      	b.n	800d540 <_dtoa_r+0xa0>
 800db62:	9f00      	ldr	r7, [sp, #0]
 800db64:	462b      	mov	r3, r5
 800db66:	461d      	mov	r5, r3
 800db68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db6c:	2a39      	cmp	r2, #57	; 0x39
 800db6e:	d106      	bne.n	800db7e <_dtoa_r+0x6de>
 800db70:	9a01      	ldr	r2, [sp, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d1f7      	bne.n	800db66 <_dtoa_r+0x6c6>
 800db76:	9901      	ldr	r1, [sp, #4]
 800db78:	2230      	movs	r2, #48	; 0x30
 800db7a:	3701      	adds	r7, #1
 800db7c:	700a      	strb	r2, [r1, #0]
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	3201      	adds	r2, #1
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	e790      	b.n	800daa8 <_dtoa_r+0x608>
 800db86:	4ba6      	ldr	r3, [pc, #664]	; (800de20 <_dtoa_r+0x980>)
 800db88:	2200      	movs	r2, #0
 800db8a:	f7f2 fd0d 	bl	80005a8 <__aeabi_dmul>
 800db8e:	2200      	movs	r2, #0
 800db90:	2300      	movs	r3, #0
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	f7f2 ff6f 	bl	8000a78 <__aeabi_dcmpeq>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d09d      	beq.n	800dada <_dtoa_r+0x63a>
 800db9e:	e7cf      	b.n	800db40 <_dtoa_r+0x6a0>
 800dba0:	9a08      	ldr	r2, [sp, #32]
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	f000 80d7 	beq.w	800dd56 <_dtoa_r+0x8b6>
 800dba8:	9a06      	ldr	r2, [sp, #24]
 800dbaa:	2a01      	cmp	r2, #1
 800dbac:	f300 80ba 	bgt.w	800dd24 <_dtoa_r+0x884>
 800dbb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	f000 80b2 	beq.w	800dd1c <_dtoa_r+0x87c>
 800dbb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbbc:	9e07      	ldr	r6, [sp, #28]
 800dbbe:	9d04      	ldr	r5, [sp, #16]
 800dbc0:	9a04      	ldr	r2, [sp, #16]
 800dbc2:	441a      	add	r2, r3
 800dbc4:	9204      	str	r2, [sp, #16]
 800dbc6:	9a05      	ldr	r2, [sp, #20]
 800dbc8:	2101      	movs	r1, #1
 800dbca:	441a      	add	r2, r3
 800dbcc:	4620      	mov	r0, r4
 800dbce:	9205      	str	r2, [sp, #20]
 800dbd0:	f000 ff24 	bl	800ea1c <__i2b>
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	dd0c      	ble.n	800dbf4 <_dtoa_r+0x754>
 800dbda:	9b05      	ldr	r3, [sp, #20]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	dd09      	ble.n	800dbf4 <_dtoa_r+0x754>
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	bfa8      	it	ge
 800dbe6:	462b      	movge	r3, r5
 800dbe8:	1ad2      	subs	r2, r2, r3
 800dbea:	9204      	str	r2, [sp, #16]
 800dbec:	9a05      	ldr	r2, [sp, #20]
 800dbee:	1aed      	subs	r5, r5, r3
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	9305      	str	r3, [sp, #20]
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	b31b      	cbz	r3, 800dc40 <_dtoa_r+0x7a0>
 800dbf8:	9b08      	ldr	r3, [sp, #32]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 80af 	beq.w	800dd5e <_dtoa_r+0x8be>
 800dc00:	2e00      	cmp	r6, #0
 800dc02:	dd13      	ble.n	800dc2c <_dtoa_r+0x78c>
 800dc04:	4639      	mov	r1, r7
 800dc06:	4632      	mov	r2, r6
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f000 ffc7 	bl	800eb9c <__pow5mult>
 800dc0e:	ee18 2a10 	vmov	r2, s16
 800dc12:	4601      	mov	r1, r0
 800dc14:	4607      	mov	r7, r0
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 ff16 	bl	800ea48 <__multiply>
 800dc1c:	ee18 1a10 	vmov	r1, s16
 800dc20:	4680      	mov	r8, r0
 800dc22:	4620      	mov	r0, r4
 800dc24:	f000 fdf8 	bl	800e818 <_Bfree>
 800dc28:	ee08 8a10 	vmov	s16, r8
 800dc2c:	9b07      	ldr	r3, [sp, #28]
 800dc2e:	1b9a      	subs	r2, r3, r6
 800dc30:	d006      	beq.n	800dc40 <_dtoa_r+0x7a0>
 800dc32:	ee18 1a10 	vmov	r1, s16
 800dc36:	4620      	mov	r0, r4
 800dc38:	f000 ffb0 	bl	800eb9c <__pow5mult>
 800dc3c:	ee08 0a10 	vmov	s16, r0
 800dc40:	2101      	movs	r1, #1
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 feea 	bl	800ea1c <__i2b>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	f340 8088 	ble.w	800dd62 <_dtoa_r+0x8c2>
 800dc52:	461a      	mov	r2, r3
 800dc54:	4601      	mov	r1, r0
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 ffa0 	bl	800eb9c <__pow5mult>
 800dc5c:	9b06      	ldr	r3, [sp, #24]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	4606      	mov	r6, r0
 800dc62:	f340 8081 	ble.w	800dd68 <_dtoa_r+0x8c8>
 800dc66:	f04f 0800 	mov.w	r8, #0
 800dc6a:	6933      	ldr	r3, [r6, #16]
 800dc6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc70:	6918      	ldr	r0, [r3, #16]
 800dc72:	f000 fe83 	bl	800e97c <__hi0bits>
 800dc76:	f1c0 0020 	rsb	r0, r0, #32
 800dc7a:	9b05      	ldr	r3, [sp, #20]
 800dc7c:	4418      	add	r0, r3
 800dc7e:	f010 001f 	ands.w	r0, r0, #31
 800dc82:	f000 8092 	beq.w	800ddaa <_dtoa_r+0x90a>
 800dc86:	f1c0 0320 	rsb	r3, r0, #32
 800dc8a:	2b04      	cmp	r3, #4
 800dc8c:	f340 808a 	ble.w	800dda4 <_dtoa_r+0x904>
 800dc90:	f1c0 001c 	rsb	r0, r0, #28
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	4403      	add	r3, r0
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	4403      	add	r3, r0
 800dc9e:	4405      	add	r5, r0
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	9b04      	ldr	r3, [sp, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dd07      	ble.n	800dcb8 <_dtoa_r+0x818>
 800dca8:	ee18 1a10 	vmov	r1, s16
 800dcac:	461a      	mov	r2, r3
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 ffce 	bl	800ec50 <__lshift>
 800dcb4:	ee08 0a10 	vmov	s16, r0
 800dcb8:	9b05      	ldr	r3, [sp, #20]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd05      	ble.n	800dcca <_dtoa_r+0x82a>
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 ffc4 	bl	800ec50 <__lshift>
 800dcc8:	4606      	mov	r6, r0
 800dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d06e      	beq.n	800ddae <_dtoa_r+0x90e>
 800dcd0:	ee18 0a10 	vmov	r0, s16
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	f001 f82b 	bl	800ed30 <__mcmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	da67      	bge.n	800ddae <_dtoa_r+0x90e>
 800dcde:	9b00      	ldr	r3, [sp, #0]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	ee18 1a10 	vmov	r1, s16
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	220a      	movs	r2, #10
 800dcea:	2300      	movs	r3, #0
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 fdb5 	bl	800e85c <__multadd>
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	ee08 0a10 	vmov	s16, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 81b1 	beq.w	800e060 <_dtoa_r+0xbc0>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	4639      	mov	r1, r7
 800dd02:	220a      	movs	r2, #10
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fda9 	bl	800e85c <__multadd>
 800dd0a:	9b02      	ldr	r3, [sp, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	4607      	mov	r7, r0
 800dd10:	f300 808e 	bgt.w	800de30 <_dtoa_r+0x990>
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	dc51      	bgt.n	800ddbe <_dtoa_r+0x91e>
 800dd1a:	e089      	b.n	800de30 <_dtoa_r+0x990>
 800dd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd22:	e74b      	b.n	800dbbc <_dtoa_r+0x71c>
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	1e5e      	subs	r6, r3, #1
 800dd28:	9b07      	ldr	r3, [sp, #28]
 800dd2a:	42b3      	cmp	r3, r6
 800dd2c:	bfbf      	itttt	lt
 800dd2e:	9b07      	ldrlt	r3, [sp, #28]
 800dd30:	9607      	strlt	r6, [sp, #28]
 800dd32:	1af2      	sublt	r2, r6, r3
 800dd34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd36:	bfb6      	itet	lt
 800dd38:	189b      	addlt	r3, r3, r2
 800dd3a:	1b9e      	subge	r6, r3, r6
 800dd3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd3e:	9b03      	ldr	r3, [sp, #12]
 800dd40:	bfb8      	it	lt
 800dd42:	2600      	movlt	r6, #0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	bfb7      	itett	lt
 800dd48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd50:	1a9d      	sublt	r5, r3, r2
 800dd52:	2300      	movlt	r3, #0
 800dd54:	e734      	b.n	800dbc0 <_dtoa_r+0x720>
 800dd56:	9e07      	ldr	r6, [sp, #28]
 800dd58:	9d04      	ldr	r5, [sp, #16]
 800dd5a:	9f08      	ldr	r7, [sp, #32]
 800dd5c:	e73b      	b.n	800dbd6 <_dtoa_r+0x736>
 800dd5e:	9a07      	ldr	r2, [sp, #28]
 800dd60:	e767      	b.n	800dc32 <_dtoa_r+0x792>
 800dd62:	9b06      	ldr	r3, [sp, #24]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	dc18      	bgt.n	800dd9a <_dtoa_r+0x8fa>
 800dd68:	f1ba 0f00 	cmp.w	sl, #0
 800dd6c:	d115      	bne.n	800dd9a <_dtoa_r+0x8fa>
 800dd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd72:	b993      	cbnz	r3, 800dd9a <_dtoa_r+0x8fa>
 800dd74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd78:	0d1b      	lsrs	r3, r3, #20
 800dd7a:	051b      	lsls	r3, r3, #20
 800dd7c:	b183      	cbz	r3, 800dda0 <_dtoa_r+0x900>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	9b05      	ldr	r3, [sp, #20]
 800dd86:	3301      	adds	r3, #1
 800dd88:	9305      	str	r3, [sp, #20]
 800dd8a:	f04f 0801 	mov.w	r8, #1
 800dd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f47f af6a 	bne.w	800dc6a <_dtoa_r+0x7ca>
 800dd96:	2001      	movs	r0, #1
 800dd98:	e76f      	b.n	800dc7a <_dtoa_r+0x7da>
 800dd9a:	f04f 0800 	mov.w	r8, #0
 800dd9e:	e7f6      	b.n	800dd8e <_dtoa_r+0x8ee>
 800dda0:	4698      	mov	r8, r3
 800dda2:	e7f4      	b.n	800dd8e <_dtoa_r+0x8ee>
 800dda4:	f43f af7d 	beq.w	800dca2 <_dtoa_r+0x802>
 800dda8:	4618      	mov	r0, r3
 800ddaa:	301c      	adds	r0, #28
 800ddac:	e772      	b.n	800dc94 <_dtoa_r+0x7f4>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dc37      	bgt.n	800de24 <_dtoa_r+0x984>
 800ddb4:	9b06      	ldr	r3, [sp, #24]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	dd34      	ble.n	800de24 <_dtoa_r+0x984>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	9302      	str	r3, [sp, #8]
 800ddbe:	9b02      	ldr	r3, [sp, #8]
 800ddc0:	b96b      	cbnz	r3, 800ddde <_dtoa_r+0x93e>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 fd48 	bl	800e85c <__multadd>
 800ddcc:	4601      	mov	r1, r0
 800ddce:	4606      	mov	r6, r0
 800ddd0:	ee18 0a10 	vmov	r0, s16
 800ddd4:	f000 ffac 	bl	800ed30 <__mcmp>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	f73f adbb 	bgt.w	800d954 <_dtoa_r+0x4b4>
 800ddde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde0:	9d01      	ldr	r5, [sp, #4]
 800dde2:	43db      	mvns	r3, r3
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	4631      	mov	r1, r6
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 fd13 	bl	800e818 <_Bfree>
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	f43f aea4 	beq.w	800db40 <_dtoa_r+0x6a0>
 800ddf8:	f1b8 0f00 	cmp.w	r8, #0
 800ddfc:	d005      	beq.n	800de0a <_dtoa_r+0x96a>
 800ddfe:	45b8      	cmp	r8, r7
 800de00:	d003      	beq.n	800de0a <_dtoa_r+0x96a>
 800de02:	4641      	mov	r1, r8
 800de04:	4620      	mov	r0, r4
 800de06:	f000 fd07 	bl	800e818 <_Bfree>
 800de0a:	4639      	mov	r1, r7
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 fd03 	bl	800e818 <_Bfree>
 800de12:	e695      	b.n	800db40 <_dtoa_r+0x6a0>
 800de14:	2600      	movs	r6, #0
 800de16:	4637      	mov	r7, r6
 800de18:	e7e1      	b.n	800ddde <_dtoa_r+0x93e>
 800de1a:	9700      	str	r7, [sp, #0]
 800de1c:	4637      	mov	r7, r6
 800de1e:	e599      	b.n	800d954 <_dtoa_r+0x4b4>
 800de20:	40240000 	.word	0x40240000
 800de24:	9b08      	ldr	r3, [sp, #32]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 80ca 	beq.w	800dfc0 <_dtoa_r+0xb20>
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	2d00      	cmp	r5, #0
 800de32:	dd05      	ble.n	800de40 <_dtoa_r+0x9a0>
 800de34:	4639      	mov	r1, r7
 800de36:	462a      	mov	r2, r5
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 ff09 	bl	800ec50 <__lshift>
 800de3e:	4607      	mov	r7, r0
 800de40:	f1b8 0f00 	cmp.w	r8, #0
 800de44:	d05b      	beq.n	800defe <_dtoa_r+0xa5e>
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	4620      	mov	r0, r4
 800de4a:	f000 fca5 	bl	800e798 <_Balloc>
 800de4e:	4605      	mov	r5, r0
 800de50:	b928      	cbnz	r0, 800de5e <_dtoa_r+0x9be>
 800de52:	4b87      	ldr	r3, [pc, #540]	; (800e070 <_dtoa_r+0xbd0>)
 800de54:	4602      	mov	r2, r0
 800de56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de5a:	f7ff bb3b 	b.w	800d4d4 <_dtoa_r+0x34>
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	3202      	adds	r2, #2
 800de62:	0092      	lsls	r2, r2, #2
 800de64:	f107 010c 	add.w	r1, r7, #12
 800de68:	300c      	adds	r0, #12
 800de6a:	f7fd fd1f 	bl	800b8ac <memcpy>
 800de6e:	2201      	movs	r2, #1
 800de70:	4629      	mov	r1, r5
 800de72:	4620      	mov	r0, r4
 800de74:	f000 feec 	bl	800ec50 <__lshift>
 800de78:	9b01      	ldr	r3, [sp, #4]
 800de7a:	f103 0901 	add.w	r9, r3, #1
 800de7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de82:	4413      	add	r3, r2
 800de84:	9305      	str	r3, [sp, #20]
 800de86:	f00a 0301 	and.w	r3, sl, #1
 800de8a:	46b8      	mov	r8, r7
 800de8c:	9304      	str	r3, [sp, #16]
 800de8e:	4607      	mov	r7, r0
 800de90:	4631      	mov	r1, r6
 800de92:	ee18 0a10 	vmov	r0, s16
 800de96:	f7ff fa77 	bl	800d388 <quorem>
 800de9a:	4641      	mov	r1, r8
 800de9c:	9002      	str	r0, [sp, #8]
 800de9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dea2:	ee18 0a10 	vmov	r0, s16
 800dea6:	f000 ff43 	bl	800ed30 <__mcmp>
 800deaa:	463a      	mov	r2, r7
 800deac:	9003      	str	r0, [sp, #12]
 800deae:	4631      	mov	r1, r6
 800deb0:	4620      	mov	r0, r4
 800deb2:	f000 ff59 	bl	800ed68 <__mdiff>
 800deb6:	68c2      	ldr	r2, [r0, #12]
 800deb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800debc:	4605      	mov	r5, r0
 800debe:	bb02      	cbnz	r2, 800df02 <_dtoa_r+0xa62>
 800dec0:	4601      	mov	r1, r0
 800dec2:	ee18 0a10 	vmov	r0, s16
 800dec6:	f000 ff33 	bl	800ed30 <__mcmp>
 800deca:	4602      	mov	r2, r0
 800decc:	4629      	mov	r1, r5
 800dece:	4620      	mov	r0, r4
 800ded0:	9207      	str	r2, [sp, #28]
 800ded2:	f000 fca1 	bl	800e818 <_Bfree>
 800ded6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800deda:	ea43 0102 	orr.w	r1, r3, r2
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	430b      	orrs	r3, r1
 800dee2:	464d      	mov	r5, r9
 800dee4:	d10f      	bne.n	800df06 <_dtoa_r+0xa66>
 800dee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800deea:	d02a      	beq.n	800df42 <_dtoa_r+0xaa2>
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	dd02      	ble.n	800def8 <_dtoa_r+0xa58>
 800def2:	9b02      	ldr	r3, [sp, #8]
 800def4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800def8:	f88b a000 	strb.w	sl, [fp]
 800defc:	e775      	b.n	800ddea <_dtoa_r+0x94a>
 800defe:	4638      	mov	r0, r7
 800df00:	e7ba      	b.n	800de78 <_dtoa_r+0x9d8>
 800df02:	2201      	movs	r2, #1
 800df04:	e7e2      	b.n	800decc <_dtoa_r+0xa2c>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	db04      	blt.n	800df16 <_dtoa_r+0xa76>
 800df0c:	9906      	ldr	r1, [sp, #24]
 800df0e:	430b      	orrs	r3, r1
 800df10:	9904      	ldr	r1, [sp, #16]
 800df12:	430b      	orrs	r3, r1
 800df14:	d122      	bne.n	800df5c <_dtoa_r+0xabc>
 800df16:	2a00      	cmp	r2, #0
 800df18:	ddee      	ble.n	800def8 <_dtoa_r+0xa58>
 800df1a:	ee18 1a10 	vmov	r1, s16
 800df1e:	2201      	movs	r2, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fe95 	bl	800ec50 <__lshift>
 800df26:	4631      	mov	r1, r6
 800df28:	ee08 0a10 	vmov	s16, r0
 800df2c:	f000 ff00 	bl	800ed30 <__mcmp>
 800df30:	2800      	cmp	r0, #0
 800df32:	dc03      	bgt.n	800df3c <_dtoa_r+0xa9c>
 800df34:	d1e0      	bne.n	800def8 <_dtoa_r+0xa58>
 800df36:	f01a 0f01 	tst.w	sl, #1
 800df3a:	d0dd      	beq.n	800def8 <_dtoa_r+0xa58>
 800df3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df40:	d1d7      	bne.n	800def2 <_dtoa_r+0xa52>
 800df42:	2339      	movs	r3, #57	; 0x39
 800df44:	f88b 3000 	strb.w	r3, [fp]
 800df48:	462b      	mov	r3, r5
 800df4a:	461d      	mov	r5, r3
 800df4c:	3b01      	subs	r3, #1
 800df4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df52:	2a39      	cmp	r2, #57	; 0x39
 800df54:	d071      	beq.n	800e03a <_dtoa_r+0xb9a>
 800df56:	3201      	adds	r2, #1
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	e746      	b.n	800ddea <_dtoa_r+0x94a>
 800df5c:	2a00      	cmp	r2, #0
 800df5e:	dd07      	ble.n	800df70 <_dtoa_r+0xad0>
 800df60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df64:	d0ed      	beq.n	800df42 <_dtoa_r+0xaa2>
 800df66:	f10a 0301 	add.w	r3, sl, #1
 800df6a:	f88b 3000 	strb.w	r3, [fp]
 800df6e:	e73c      	b.n	800ddea <_dtoa_r+0x94a>
 800df70:	9b05      	ldr	r3, [sp, #20]
 800df72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df76:	4599      	cmp	r9, r3
 800df78:	d047      	beq.n	800e00a <_dtoa_r+0xb6a>
 800df7a:	ee18 1a10 	vmov	r1, s16
 800df7e:	2300      	movs	r3, #0
 800df80:	220a      	movs	r2, #10
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fc6a 	bl	800e85c <__multadd>
 800df88:	45b8      	cmp	r8, r7
 800df8a:	ee08 0a10 	vmov	s16, r0
 800df8e:	f04f 0300 	mov.w	r3, #0
 800df92:	f04f 020a 	mov.w	r2, #10
 800df96:	4641      	mov	r1, r8
 800df98:	4620      	mov	r0, r4
 800df9a:	d106      	bne.n	800dfaa <_dtoa_r+0xb0a>
 800df9c:	f000 fc5e 	bl	800e85c <__multadd>
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	f109 0901 	add.w	r9, r9, #1
 800dfa8:	e772      	b.n	800de90 <_dtoa_r+0x9f0>
 800dfaa:	f000 fc57 	bl	800e85c <__multadd>
 800dfae:	4639      	mov	r1, r7
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	220a      	movs	r2, #10
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 fc50 	bl	800e85c <__multadd>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	e7f1      	b.n	800dfa4 <_dtoa_r+0xb04>
 800dfc0:	9b03      	ldr	r3, [sp, #12]
 800dfc2:	9302      	str	r3, [sp, #8]
 800dfc4:	9d01      	ldr	r5, [sp, #4]
 800dfc6:	ee18 0a10 	vmov	r0, s16
 800dfca:	4631      	mov	r1, r6
 800dfcc:	f7ff f9dc 	bl	800d388 <quorem>
 800dfd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	f805 ab01 	strb.w	sl, [r5], #1
 800dfda:	1aea      	subs	r2, r5, r3
 800dfdc:	9b02      	ldr	r3, [sp, #8]
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	dd09      	ble.n	800dff6 <_dtoa_r+0xb56>
 800dfe2:	ee18 1a10 	vmov	r1, s16
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	220a      	movs	r2, #10
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fc36 	bl	800e85c <__multadd>
 800dff0:	ee08 0a10 	vmov	s16, r0
 800dff4:	e7e7      	b.n	800dfc6 <_dtoa_r+0xb26>
 800dff6:	9b02      	ldr	r3, [sp, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bfc8      	it	gt
 800dffc:	461d      	movgt	r5, r3
 800dffe:	9b01      	ldr	r3, [sp, #4]
 800e000:	bfd8      	it	le
 800e002:	2501      	movle	r5, #1
 800e004:	441d      	add	r5, r3
 800e006:	f04f 0800 	mov.w	r8, #0
 800e00a:	ee18 1a10 	vmov	r1, s16
 800e00e:	2201      	movs	r2, #1
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fe1d 	bl	800ec50 <__lshift>
 800e016:	4631      	mov	r1, r6
 800e018:	ee08 0a10 	vmov	s16, r0
 800e01c:	f000 fe88 	bl	800ed30 <__mcmp>
 800e020:	2800      	cmp	r0, #0
 800e022:	dc91      	bgt.n	800df48 <_dtoa_r+0xaa8>
 800e024:	d102      	bne.n	800e02c <_dtoa_r+0xb8c>
 800e026:	f01a 0f01 	tst.w	sl, #1
 800e02a:	d18d      	bne.n	800df48 <_dtoa_r+0xaa8>
 800e02c:	462b      	mov	r3, r5
 800e02e:	461d      	mov	r5, r3
 800e030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e034:	2a30      	cmp	r2, #48	; 0x30
 800e036:	d0fa      	beq.n	800e02e <_dtoa_r+0xb8e>
 800e038:	e6d7      	b.n	800ddea <_dtoa_r+0x94a>
 800e03a:	9a01      	ldr	r2, [sp, #4]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d184      	bne.n	800df4a <_dtoa_r+0xaaa>
 800e040:	9b00      	ldr	r3, [sp, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	2331      	movs	r3, #49	; 0x31
 800e048:	7013      	strb	r3, [r2, #0]
 800e04a:	e6ce      	b.n	800ddea <_dtoa_r+0x94a>
 800e04c:	4b09      	ldr	r3, [pc, #36]	; (800e074 <_dtoa_r+0xbd4>)
 800e04e:	f7ff ba95 	b.w	800d57c <_dtoa_r+0xdc>
 800e052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e054:	2b00      	cmp	r3, #0
 800e056:	f47f aa6e 	bne.w	800d536 <_dtoa_r+0x96>
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <_dtoa_r+0xbd8>)
 800e05c:	f7ff ba8e 	b.w	800d57c <_dtoa_r+0xdc>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	dcae      	bgt.n	800dfc4 <_dtoa_r+0xb24>
 800e066:	9b06      	ldr	r3, [sp, #24]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	f73f aea8 	bgt.w	800ddbe <_dtoa_r+0x91e>
 800e06e:	e7a9      	b.n	800dfc4 <_dtoa_r+0xb24>
 800e070:	08015ff8 	.word	0x08015ff8
 800e074:	08015dfc 	.word	0x08015dfc
 800e078:	08015f79 	.word	0x08015f79

0800e07c <rshift>:
 800e07c:	6903      	ldr	r3, [r0, #16]
 800e07e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e08a:	f100 0414 	add.w	r4, r0, #20
 800e08e:	dd45      	ble.n	800e11c <rshift+0xa0>
 800e090:	f011 011f 	ands.w	r1, r1, #31
 800e094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e09c:	d10c      	bne.n	800e0b8 <rshift+0x3c>
 800e09e:	f100 0710 	add.w	r7, r0, #16
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	42b1      	cmp	r1, r6
 800e0a6:	d334      	bcc.n	800e112 <rshift+0x96>
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	1eea      	subs	r2, r5, #3
 800e0ae:	4296      	cmp	r6, r2
 800e0b0:	bf38      	it	cc
 800e0b2:	2300      	movcc	r3, #0
 800e0b4:	4423      	add	r3, r4
 800e0b6:	e015      	b.n	800e0e4 <rshift+0x68>
 800e0b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e0bc:	f1c1 0820 	rsb	r8, r1, #32
 800e0c0:	40cf      	lsrs	r7, r1
 800e0c2:	f105 0e04 	add.w	lr, r5, #4
 800e0c6:	46a1      	mov	r9, r4
 800e0c8:	4576      	cmp	r6, lr
 800e0ca:	46f4      	mov	ip, lr
 800e0cc:	d815      	bhi.n	800e0fa <rshift+0x7e>
 800e0ce:	1a9a      	subs	r2, r3, r2
 800e0d0:	0092      	lsls	r2, r2, #2
 800e0d2:	3a04      	subs	r2, #4
 800e0d4:	3501      	adds	r5, #1
 800e0d6:	42ae      	cmp	r6, r5
 800e0d8:	bf38      	it	cc
 800e0da:	2200      	movcc	r2, #0
 800e0dc:	18a3      	adds	r3, r4, r2
 800e0de:	50a7      	str	r7, [r4, r2]
 800e0e0:	b107      	cbz	r7, 800e0e4 <rshift+0x68>
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	1b1a      	subs	r2, r3, r4
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0ec:	bf08      	it	eq
 800e0ee:	2300      	moveq	r3, #0
 800e0f0:	6102      	str	r2, [r0, #16]
 800e0f2:	bf08      	it	eq
 800e0f4:	6143      	streq	r3, [r0, #20]
 800e0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0fa:	f8dc c000 	ldr.w	ip, [ip]
 800e0fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800e102:	ea4c 0707 	orr.w	r7, ip, r7
 800e106:	f849 7b04 	str.w	r7, [r9], #4
 800e10a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e10e:	40cf      	lsrs	r7, r1
 800e110:	e7da      	b.n	800e0c8 <rshift+0x4c>
 800e112:	f851 cb04 	ldr.w	ip, [r1], #4
 800e116:	f847 cf04 	str.w	ip, [r7, #4]!
 800e11a:	e7c3      	b.n	800e0a4 <rshift+0x28>
 800e11c:	4623      	mov	r3, r4
 800e11e:	e7e1      	b.n	800e0e4 <rshift+0x68>

0800e120 <__hexdig_fun>:
 800e120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e124:	2b09      	cmp	r3, #9
 800e126:	d802      	bhi.n	800e12e <__hexdig_fun+0xe>
 800e128:	3820      	subs	r0, #32
 800e12a:	b2c0      	uxtb	r0, r0
 800e12c:	4770      	bx	lr
 800e12e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e132:	2b05      	cmp	r3, #5
 800e134:	d801      	bhi.n	800e13a <__hexdig_fun+0x1a>
 800e136:	3847      	subs	r0, #71	; 0x47
 800e138:	e7f7      	b.n	800e12a <__hexdig_fun+0xa>
 800e13a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e13e:	2b05      	cmp	r3, #5
 800e140:	d801      	bhi.n	800e146 <__hexdig_fun+0x26>
 800e142:	3827      	subs	r0, #39	; 0x27
 800e144:	e7f1      	b.n	800e12a <__hexdig_fun+0xa>
 800e146:	2000      	movs	r0, #0
 800e148:	4770      	bx	lr
	...

0800e14c <__gethex>:
 800e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	ed2d 8b02 	vpush	{d8}
 800e154:	b089      	sub	sp, #36	; 0x24
 800e156:	ee08 0a10 	vmov	s16, r0
 800e15a:	9304      	str	r3, [sp, #16]
 800e15c:	4bb4      	ldr	r3, [pc, #720]	; (800e430 <__gethex+0x2e4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	4618      	mov	r0, r3
 800e164:	468b      	mov	fp, r1
 800e166:	4690      	mov	r8, r2
 800e168:	f7f2 f80a 	bl	8000180 <strlen>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	f8db 2000 	ldr.w	r2, [fp]
 800e172:	4403      	add	r3, r0
 800e174:	4682      	mov	sl, r0
 800e176:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e17a:	9305      	str	r3, [sp, #20]
 800e17c:	1c93      	adds	r3, r2, #2
 800e17e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e186:	32fe      	adds	r2, #254	; 0xfe
 800e188:	18d1      	adds	r1, r2, r3
 800e18a:	461f      	mov	r7, r3
 800e18c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e190:	9100      	str	r1, [sp, #0]
 800e192:	2830      	cmp	r0, #48	; 0x30
 800e194:	d0f8      	beq.n	800e188 <__gethex+0x3c>
 800e196:	f7ff ffc3 	bl	800e120 <__hexdig_fun>
 800e19a:	4604      	mov	r4, r0
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d13a      	bne.n	800e216 <__gethex+0xca>
 800e1a0:	9901      	ldr	r1, [sp, #4]
 800e1a2:	4652      	mov	r2, sl
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f001 fa23 	bl	800f5f0 <strncmp>
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d168      	bne.n	800e282 <__gethex+0x136>
 800e1b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e1b4:	eb07 060a 	add.w	r6, r7, sl
 800e1b8:	f7ff ffb2 	bl	800e120 <__hexdig_fun>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d062      	beq.n	800e286 <__gethex+0x13a>
 800e1c0:	4633      	mov	r3, r6
 800e1c2:	7818      	ldrb	r0, [r3, #0]
 800e1c4:	2830      	cmp	r0, #48	; 0x30
 800e1c6:	461f      	mov	r7, r3
 800e1c8:	f103 0301 	add.w	r3, r3, #1
 800e1cc:	d0f9      	beq.n	800e1c2 <__gethex+0x76>
 800e1ce:	f7ff ffa7 	bl	800e120 <__hexdig_fun>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	fab0 f480 	clz	r4, r0
 800e1d8:	0964      	lsrs	r4, r4, #5
 800e1da:	4635      	mov	r5, r6
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	463a      	mov	r2, r7
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	7830      	ldrb	r0, [r6, #0]
 800e1e6:	f7ff ff9b 	bl	800e120 <__hexdig_fun>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d1f8      	bne.n	800e1e0 <__gethex+0x94>
 800e1ee:	9901      	ldr	r1, [sp, #4]
 800e1f0:	4652      	mov	r2, sl
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f001 f9fc 	bl	800f5f0 <strncmp>
 800e1f8:	b980      	cbnz	r0, 800e21c <__gethex+0xd0>
 800e1fa:	b94d      	cbnz	r5, 800e210 <__gethex+0xc4>
 800e1fc:	eb06 050a 	add.w	r5, r6, sl
 800e200:	462a      	mov	r2, r5
 800e202:	4616      	mov	r6, r2
 800e204:	3201      	adds	r2, #1
 800e206:	7830      	ldrb	r0, [r6, #0]
 800e208:	f7ff ff8a 	bl	800e120 <__hexdig_fun>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d1f8      	bne.n	800e202 <__gethex+0xb6>
 800e210:	1bad      	subs	r5, r5, r6
 800e212:	00ad      	lsls	r5, r5, #2
 800e214:	e004      	b.n	800e220 <__gethex+0xd4>
 800e216:	2400      	movs	r4, #0
 800e218:	4625      	mov	r5, r4
 800e21a:	e7e0      	b.n	800e1de <__gethex+0x92>
 800e21c:	2d00      	cmp	r5, #0
 800e21e:	d1f7      	bne.n	800e210 <__gethex+0xc4>
 800e220:	7833      	ldrb	r3, [r6, #0]
 800e222:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e226:	2b50      	cmp	r3, #80	; 0x50
 800e228:	d13b      	bne.n	800e2a2 <__gethex+0x156>
 800e22a:	7873      	ldrb	r3, [r6, #1]
 800e22c:	2b2b      	cmp	r3, #43	; 0x2b
 800e22e:	d02c      	beq.n	800e28a <__gethex+0x13e>
 800e230:	2b2d      	cmp	r3, #45	; 0x2d
 800e232:	d02e      	beq.n	800e292 <__gethex+0x146>
 800e234:	1c71      	adds	r1, r6, #1
 800e236:	f04f 0900 	mov.w	r9, #0
 800e23a:	7808      	ldrb	r0, [r1, #0]
 800e23c:	f7ff ff70 	bl	800e120 <__hexdig_fun>
 800e240:	1e43      	subs	r3, r0, #1
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b18      	cmp	r3, #24
 800e246:	d82c      	bhi.n	800e2a2 <__gethex+0x156>
 800e248:	f1a0 0210 	sub.w	r2, r0, #16
 800e24c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e250:	f7ff ff66 	bl	800e120 <__hexdig_fun>
 800e254:	1e43      	subs	r3, r0, #1
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b18      	cmp	r3, #24
 800e25a:	d91d      	bls.n	800e298 <__gethex+0x14c>
 800e25c:	f1b9 0f00 	cmp.w	r9, #0
 800e260:	d000      	beq.n	800e264 <__gethex+0x118>
 800e262:	4252      	negs	r2, r2
 800e264:	4415      	add	r5, r2
 800e266:	f8cb 1000 	str.w	r1, [fp]
 800e26a:	b1e4      	cbz	r4, 800e2a6 <__gethex+0x15a>
 800e26c:	9b00      	ldr	r3, [sp, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	bf14      	ite	ne
 800e272:	2700      	movne	r7, #0
 800e274:	2706      	moveq	r7, #6
 800e276:	4638      	mov	r0, r7
 800e278:	b009      	add	sp, #36	; 0x24
 800e27a:	ecbd 8b02 	vpop	{d8}
 800e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e282:	463e      	mov	r6, r7
 800e284:	4625      	mov	r5, r4
 800e286:	2401      	movs	r4, #1
 800e288:	e7ca      	b.n	800e220 <__gethex+0xd4>
 800e28a:	f04f 0900 	mov.w	r9, #0
 800e28e:	1cb1      	adds	r1, r6, #2
 800e290:	e7d3      	b.n	800e23a <__gethex+0xee>
 800e292:	f04f 0901 	mov.w	r9, #1
 800e296:	e7fa      	b.n	800e28e <__gethex+0x142>
 800e298:	230a      	movs	r3, #10
 800e29a:	fb03 0202 	mla	r2, r3, r2, r0
 800e29e:	3a10      	subs	r2, #16
 800e2a0:	e7d4      	b.n	800e24c <__gethex+0x100>
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	e7df      	b.n	800e266 <__gethex+0x11a>
 800e2a6:	1bf3      	subs	r3, r6, r7
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	2b07      	cmp	r3, #7
 800e2ae:	dc0b      	bgt.n	800e2c8 <__gethex+0x17c>
 800e2b0:	ee18 0a10 	vmov	r0, s16
 800e2b4:	f000 fa70 	bl	800e798 <_Balloc>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	b940      	cbnz	r0, 800e2ce <__gethex+0x182>
 800e2bc:	4b5d      	ldr	r3, [pc, #372]	; (800e434 <__gethex+0x2e8>)
 800e2be:	4602      	mov	r2, r0
 800e2c0:	21de      	movs	r1, #222	; 0xde
 800e2c2:	485d      	ldr	r0, [pc, #372]	; (800e438 <__gethex+0x2ec>)
 800e2c4:	f001 f9b6 	bl	800f634 <__assert_func>
 800e2c8:	3101      	adds	r1, #1
 800e2ca:	105b      	asrs	r3, r3, #1
 800e2cc:	e7ee      	b.n	800e2ac <__gethex+0x160>
 800e2ce:	f100 0914 	add.w	r9, r0, #20
 800e2d2:	f04f 0b00 	mov.w	fp, #0
 800e2d6:	f1ca 0301 	rsb	r3, sl, #1
 800e2da:	f8cd 9008 	str.w	r9, [sp, #8]
 800e2de:	f8cd b000 	str.w	fp, [sp]
 800e2e2:	9306      	str	r3, [sp, #24]
 800e2e4:	42b7      	cmp	r7, r6
 800e2e6:	d340      	bcc.n	800e36a <__gethex+0x21e>
 800e2e8:	9802      	ldr	r0, [sp, #8]
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	f840 3b04 	str.w	r3, [r0], #4
 800e2f0:	eba0 0009 	sub.w	r0, r0, r9
 800e2f4:	1080      	asrs	r0, r0, #2
 800e2f6:	0146      	lsls	r6, r0, #5
 800e2f8:	6120      	str	r0, [r4, #16]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 fb3e 	bl	800e97c <__hi0bits>
 800e300:	1a30      	subs	r0, r6, r0
 800e302:	f8d8 6000 	ldr.w	r6, [r8]
 800e306:	42b0      	cmp	r0, r6
 800e308:	dd63      	ble.n	800e3d2 <__gethex+0x286>
 800e30a:	1b87      	subs	r7, r0, r6
 800e30c:	4639      	mov	r1, r7
 800e30e:	4620      	mov	r0, r4
 800e310:	f000 fee2 	bl	800f0d8 <__any_on>
 800e314:	4682      	mov	sl, r0
 800e316:	b1a8      	cbz	r0, 800e344 <__gethex+0x1f8>
 800e318:	1e7b      	subs	r3, r7, #1
 800e31a:	1159      	asrs	r1, r3, #5
 800e31c:	f003 021f 	and.w	r2, r3, #31
 800e320:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e324:	f04f 0a01 	mov.w	sl, #1
 800e328:	fa0a f202 	lsl.w	r2, sl, r2
 800e32c:	420a      	tst	r2, r1
 800e32e:	d009      	beq.n	800e344 <__gethex+0x1f8>
 800e330:	4553      	cmp	r3, sl
 800e332:	dd05      	ble.n	800e340 <__gethex+0x1f4>
 800e334:	1eb9      	subs	r1, r7, #2
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fece 	bl	800f0d8 <__any_on>
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d145      	bne.n	800e3cc <__gethex+0x280>
 800e340:	f04f 0a02 	mov.w	sl, #2
 800e344:	4639      	mov	r1, r7
 800e346:	4620      	mov	r0, r4
 800e348:	f7ff fe98 	bl	800e07c <rshift>
 800e34c:	443d      	add	r5, r7
 800e34e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e352:	42ab      	cmp	r3, r5
 800e354:	da4c      	bge.n	800e3f0 <__gethex+0x2a4>
 800e356:	ee18 0a10 	vmov	r0, s16
 800e35a:	4621      	mov	r1, r4
 800e35c:	f000 fa5c 	bl	800e818 <_Bfree>
 800e360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e362:	2300      	movs	r3, #0
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	27a3      	movs	r7, #163	; 0xa3
 800e368:	e785      	b.n	800e276 <__gethex+0x12a>
 800e36a:	1e73      	subs	r3, r6, #1
 800e36c:	9a05      	ldr	r2, [sp, #20]
 800e36e:	9303      	str	r3, [sp, #12]
 800e370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e374:	4293      	cmp	r3, r2
 800e376:	d019      	beq.n	800e3ac <__gethex+0x260>
 800e378:	f1bb 0f20 	cmp.w	fp, #32
 800e37c:	d107      	bne.n	800e38e <__gethex+0x242>
 800e37e:	9b02      	ldr	r3, [sp, #8]
 800e380:	9a00      	ldr	r2, [sp, #0]
 800e382:	f843 2b04 	str.w	r2, [r3], #4
 800e386:	9302      	str	r3, [sp, #8]
 800e388:	2300      	movs	r3, #0
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	469b      	mov	fp, r3
 800e38e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e392:	f7ff fec5 	bl	800e120 <__hexdig_fun>
 800e396:	9b00      	ldr	r3, [sp, #0]
 800e398:	f000 000f 	and.w	r0, r0, #15
 800e39c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e3a0:	4303      	orrs	r3, r0
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	f10b 0b04 	add.w	fp, fp, #4
 800e3a8:	9b03      	ldr	r3, [sp, #12]
 800e3aa:	e00d      	b.n	800e3c8 <__gethex+0x27c>
 800e3ac:	9b03      	ldr	r3, [sp, #12]
 800e3ae:	9a06      	ldr	r2, [sp, #24]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	42bb      	cmp	r3, r7
 800e3b4:	d3e0      	bcc.n	800e378 <__gethex+0x22c>
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	9901      	ldr	r1, [sp, #4]
 800e3ba:	9307      	str	r3, [sp, #28]
 800e3bc:	4652      	mov	r2, sl
 800e3be:	f001 f917 	bl	800f5f0 <strncmp>
 800e3c2:	9b07      	ldr	r3, [sp, #28]
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d1d7      	bne.n	800e378 <__gethex+0x22c>
 800e3c8:	461e      	mov	r6, r3
 800e3ca:	e78b      	b.n	800e2e4 <__gethex+0x198>
 800e3cc:	f04f 0a03 	mov.w	sl, #3
 800e3d0:	e7b8      	b.n	800e344 <__gethex+0x1f8>
 800e3d2:	da0a      	bge.n	800e3ea <__gethex+0x29e>
 800e3d4:	1a37      	subs	r7, r6, r0
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	ee18 0a10 	vmov	r0, s16
 800e3dc:	463a      	mov	r2, r7
 800e3de:	f000 fc37 	bl	800ec50 <__lshift>
 800e3e2:	1bed      	subs	r5, r5, r7
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	f100 0914 	add.w	r9, r0, #20
 800e3ea:	f04f 0a00 	mov.w	sl, #0
 800e3ee:	e7ae      	b.n	800e34e <__gethex+0x202>
 800e3f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e3f4:	42a8      	cmp	r0, r5
 800e3f6:	dd72      	ble.n	800e4de <__gethex+0x392>
 800e3f8:	1b45      	subs	r5, r0, r5
 800e3fa:	42ae      	cmp	r6, r5
 800e3fc:	dc36      	bgt.n	800e46c <__gethex+0x320>
 800e3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e402:	2b02      	cmp	r3, #2
 800e404:	d02a      	beq.n	800e45c <__gethex+0x310>
 800e406:	2b03      	cmp	r3, #3
 800e408:	d02c      	beq.n	800e464 <__gethex+0x318>
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d11c      	bne.n	800e448 <__gethex+0x2fc>
 800e40e:	42ae      	cmp	r6, r5
 800e410:	d11a      	bne.n	800e448 <__gethex+0x2fc>
 800e412:	2e01      	cmp	r6, #1
 800e414:	d112      	bne.n	800e43c <__gethex+0x2f0>
 800e416:	9a04      	ldr	r2, [sp, #16]
 800e418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e41c:	6013      	str	r3, [r2, #0]
 800e41e:	2301      	movs	r3, #1
 800e420:	6123      	str	r3, [r4, #16]
 800e422:	f8c9 3000 	str.w	r3, [r9]
 800e426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e428:	2762      	movs	r7, #98	; 0x62
 800e42a:	601c      	str	r4, [r3, #0]
 800e42c:	e723      	b.n	800e276 <__gethex+0x12a>
 800e42e:	bf00      	nop
 800e430:	08016070 	.word	0x08016070
 800e434:	08015ff8 	.word	0x08015ff8
 800e438:	08016009 	.word	0x08016009
 800e43c:	1e71      	subs	r1, r6, #1
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fe4a 	bl	800f0d8 <__any_on>
 800e444:	2800      	cmp	r0, #0
 800e446:	d1e6      	bne.n	800e416 <__gethex+0x2ca>
 800e448:	ee18 0a10 	vmov	r0, s16
 800e44c:	4621      	mov	r1, r4
 800e44e:	f000 f9e3 	bl	800e818 <_Bfree>
 800e452:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e454:	2300      	movs	r3, #0
 800e456:	6013      	str	r3, [r2, #0]
 800e458:	2750      	movs	r7, #80	; 0x50
 800e45a:	e70c      	b.n	800e276 <__gethex+0x12a>
 800e45c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1f2      	bne.n	800e448 <__gethex+0x2fc>
 800e462:	e7d8      	b.n	800e416 <__gethex+0x2ca>
 800e464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1d5      	bne.n	800e416 <__gethex+0x2ca>
 800e46a:	e7ed      	b.n	800e448 <__gethex+0x2fc>
 800e46c:	1e6f      	subs	r7, r5, #1
 800e46e:	f1ba 0f00 	cmp.w	sl, #0
 800e472:	d131      	bne.n	800e4d8 <__gethex+0x38c>
 800e474:	b127      	cbz	r7, 800e480 <__gethex+0x334>
 800e476:	4639      	mov	r1, r7
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 fe2d 	bl	800f0d8 <__any_on>
 800e47e:	4682      	mov	sl, r0
 800e480:	117b      	asrs	r3, r7, #5
 800e482:	2101      	movs	r1, #1
 800e484:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e488:	f007 071f 	and.w	r7, r7, #31
 800e48c:	fa01 f707 	lsl.w	r7, r1, r7
 800e490:	421f      	tst	r7, r3
 800e492:	4629      	mov	r1, r5
 800e494:	4620      	mov	r0, r4
 800e496:	bf18      	it	ne
 800e498:	f04a 0a02 	orrne.w	sl, sl, #2
 800e49c:	1b76      	subs	r6, r6, r5
 800e49e:	f7ff fded 	bl	800e07c <rshift>
 800e4a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4a6:	2702      	movs	r7, #2
 800e4a8:	f1ba 0f00 	cmp.w	sl, #0
 800e4ac:	d048      	beq.n	800e540 <__gethex+0x3f4>
 800e4ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d015      	beq.n	800e4e2 <__gethex+0x396>
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d017      	beq.n	800e4ea <__gethex+0x39e>
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d109      	bne.n	800e4d2 <__gethex+0x386>
 800e4be:	f01a 0f02 	tst.w	sl, #2
 800e4c2:	d006      	beq.n	800e4d2 <__gethex+0x386>
 800e4c4:	f8d9 0000 	ldr.w	r0, [r9]
 800e4c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e4cc:	f01a 0f01 	tst.w	sl, #1
 800e4d0:	d10e      	bne.n	800e4f0 <__gethex+0x3a4>
 800e4d2:	f047 0710 	orr.w	r7, r7, #16
 800e4d6:	e033      	b.n	800e540 <__gethex+0x3f4>
 800e4d8:	f04f 0a01 	mov.w	sl, #1
 800e4dc:	e7d0      	b.n	800e480 <__gethex+0x334>
 800e4de:	2701      	movs	r7, #1
 800e4e0:	e7e2      	b.n	800e4a8 <__gethex+0x35c>
 800e4e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e4:	f1c3 0301 	rsb	r3, r3, #1
 800e4e8:	9315      	str	r3, [sp, #84]	; 0x54
 800e4ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d0f0      	beq.n	800e4d2 <__gethex+0x386>
 800e4f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4f4:	f104 0314 	add.w	r3, r4, #20
 800e4f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e500:	f04f 0c00 	mov.w	ip, #0
 800e504:	4618      	mov	r0, r3
 800e506:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e50e:	d01c      	beq.n	800e54a <__gethex+0x3fe>
 800e510:	3201      	adds	r2, #1
 800e512:	6002      	str	r2, [r0, #0]
 800e514:	2f02      	cmp	r7, #2
 800e516:	f104 0314 	add.w	r3, r4, #20
 800e51a:	d13f      	bne.n	800e59c <__gethex+0x450>
 800e51c:	f8d8 2000 	ldr.w	r2, [r8]
 800e520:	3a01      	subs	r2, #1
 800e522:	42b2      	cmp	r2, r6
 800e524:	d10a      	bne.n	800e53c <__gethex+0x3f0>
 800e526:	1171      	asrs	r1, r6, #5
 800e528:	2201      	movs	r2, #1
 800e52a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e52e:	f006 061f 	and.w	r6, r6, #31
 800e532:	fa02 f606 	lsl.w	r6, r2, r6
 800e536:	421e      	tst	r6, r3
 800e538:	bf18      	it	ne
 800e53a:	4617      	movne	r7, r2
 800e53c:	f047 0720 	orr.w	r7, r7, #32
 800e540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e542:	601c      	str	r4, [r3, #0]
 800e544:	9b04      	ldr	r3, [sp, #16]
 800e546:	601d      	str	r5, [r3, #0]
 800e548:	e695      	b.n	800e276 <__gethex+0x12a>
 800e54a:	4299      	cmp	r1, r3
 800e54c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e550:	d8d8      	bhi.n	800e504 <__gethex+0x3b8>
 800e552:	68a3      	ldr	r3, [r4, #8]
 800e554:	459b      	cmp	fp, r3
 800e556:	db19      	blt.n	800e58c <__gethex+0x440>
 800e558:	6861      	ldr	r1, [r4, #4]
 800e55a:	ee18 0a10 	vmov	r0, s16
 800e55e:	3101      	adds	r1, #1
 800e560:	f000 f91a 	bl	800e798 <_Balloc>
 800e564:	4681      	mov	r9, r0
 800e566:	b918      	cbnz	r0, 800e570 <__gethex+0x424>
 800e568:	4b1a      	ldr	r3, [pc, #104]	; (800e5d4 <__gethex+0x488>)
 800e56a:	4602      	mov	r2, r0
 800e56c:	2184      	movs	r1, #132	; 0x84
 800e56e:	e6a8      	b.n	800e2c2 <__gethex+0x176>
 800e570:	6922      	ldr	r2, [r4, #16]
 800e572:	3202      	adds	r2, #2
 800e574:	f104 010c 	add.w	r1, r4, #12
 800e578:	0092      	lsls	r2, r2, #2
 800e57a:	300c      	adds	r0, #12
 800e57c:	f7fd f996 	bl	800b8ac <memcpy>
 800e580:	4621      	mov	r1, r4
 800e582:	ee18 0a10 	vmov	r0, s16
 800e586:	f000 f947 	bl	800e818 <_Bfree>
 800e58a:	464c      	mov	r4, r9
 800e58c:	6923      	ldr	r3, [r4, #16]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e594:	6122      	str	r2, [r4, #16]
 800e596:	2201      	movs	r2, #1
 800e598:	615a      	str	r2, [r3, #20]
 800e59a:	e7bb      	b.n	800e514 <__gethex+0x3c8>
 800e59c:	6922      	ldr	r2, [r4, #16]
 800e59e:	455a      	cmp	r2, fp
 800e5a0:	dd0b      	ble.n	800e5ba <__gethex+0x46e>
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f7ff fd69 	bl	800e07c <rshift>
 800e5aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5ae:	3501      	adds	r5, #1
 800e5b0:	42ab      	cmp	r3, r5
 800e5b2:	f6ff aed0 	blt.w	800e356 <__gethex+0x20a>
 800e5b6:	2701      	movs	r7, #1
 800e5b8:	e7c0      	b.n	800e53c <__gethex+0x3f0>
 800e5ba:	f016 061f 	ands.w	r6, r6, #31
 800e5be:	d0fa      	beq.n	800e5b6 <__gethex+0x46a>
 800e5c0:	4453      	add	r3, sl
 800e5c2:	f1c6 0620 	rsb	r6, r6, #32
 800e5c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5ca:	f000 f9d7 	bl	800e97c <__hi0bits>
 800e5ce:	42b0      	cmp	r0, r6
 800e5d0:	dbe7      	blt.n	800e5a2 <__gethex+0x456>
 800e5d2:	e7f0      	b.n	800e5b6 <__gethex+0x46a>
 800e5d4:	08015ff8 	.word	0x08015ff8

0800e5d8 <L_shift>:
 800e5d8:	f1c2 0208 	rsb	r2, r2, #8
 800e5dc:	0092      	lsls	r2, r2, #2
 800e5de:	b570      	push	{r4, r5, r6, lr}
 800e5e0:	f1c2 0620 	rsb	r6, r2, #32
 800e5e4:	6843      	ldr	r3, [r0, #4]
 800e5e6:	6804      	ldr	r4, [r0, #0]
 800e5e8:	fa03 f506 	lsl.w	r5, r3, r6
 800e5ec:	432c      	orrs	r4, r5
 800e5ee:	40d3      	lsrs	r3, r2
 800e5f0:	6004      	str	r4, [r0, #0]
 800e5f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5f6:	4288      	cmp	r0, r1
 800e5f8:	d3f4      	bcc.n	800e5e4 <L_shift+0xc>
 800e5fa:	bd70      	pop	{r4, r5, r6, pc}

0800e5fc <__match>:
 800e5fc:	b530      	push	{r4, r5, lr}
 800e5fe:	6803      	ldr	r3, [r0, #0]
 800e600:	3301      	adds	r3, #1
 800e602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e606:	b914      	cbnz	r4, 800e60e <__match+0x12>
 800e608:	6003      	str	r3, [r0, #0]
 800e60a:	2001      	movs	r0, #1
 800e60c:	bd30      	pop	{r4, r5, pc}
 800e60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e616:	2d19      	cmp	r5, #25
 800e618:	bf98      	it	ls
 800e61a:	3220      	addls	r2, #32
 800e61c:	42a2      	cmp	r2, r4
 800e61e:	d0f0      	beq.n	800e602 <__match+0x6>
 800e620:	2000      	movs	r0, #0
 800e622:	e7f3      	b.n	800e60c <__match+0x10>

0800e624 <__hexnan>:
 800e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e628:	680b      	ldr	r3, [r1, #0]
 800e62a:	115e      	asrs	r6, r3, #5
 800e62c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e630:	f013 031f 	ands.w	r3, r3, #31
 800e634:	b087      	sub	sp, #28
 800e636:	bf18      	it	ne
 800e638:	3604      	addne	r6, #4
 800e63a:	2500      	movs	r5, #0
 800e63c:	1f37      	subs	r7, r6, #4
 800e63e:	4690      	mov	r8, r2
 800e640:	6802      	ldr	r2, [r0, #0]
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	4682      	mov	sl, r0
 800e646:	f846 5c04 	str.w	r5, [r6, #-4]
 800e64a:	46b9      	mov	r9, r7
 800e64c:	463c      	mov	r4, r7
 800e64e:	9502      	str	r5, [sp, #8]
 800e650:	46ab      	mov	fp, r5
 800e652:	7851      	ldrb	r1, [r2, #1]
 800e654:	1c53      	adds	r3, r2, #1
 800e656:	9303      	str	r3, [sp, #12]
 800e658:	b341      	cbz	r1, 800e6ac <__hexnan+0x88>
 800e65a:	4608      	mov	r0, r1
 800e65c:	9205      	str	r2, [sp, #20]
 800e65e:	9104      	str	r1, [sp, #16]
 800e660:	f7ff fd5e 	bl	800e120 <__hexdig_fun>
 800e664:	2800      	cmp	r0, #0
 800e666:	d14f      	bne.n	800e708 <__hexnan+0xe4>
 800e668:	9904      	ldr	r1, [sp, #16]
 800e66a:	9a05      	ldr	r2, [sp, #20]
 800e66c:	2920      	cmp	r1, #32
 800e66e:	d818      	bhi.n	800e6a2 <__hexnan+0x7e>
 800e670:	9b02      	ldr	r3, [sp, #8]
 800e672:	459b      	cmp	fp, r3
 800e674:	dd13      	ble.n	800e69e <__hexnan+0x7a>
 800e676:	454c      	cmp	r4, r9
 800e678:	d206      	bcs.n	800e688 <__hexnan+0x64>
 800e67a:	2d07      	cmp	r5, #7
 800e67c:	dc04      	bgt.n	800e688 <__hexnan+0x64>
 800e67e:	462a      	mov	r2, r5
 800e680:	4649      	mov	r1, r9
 800e682:	4620      	mov	r0, r4
 800e684:	f7ff ffa8 	bl	800e5d8 <L_shift>
 800e688:	4544      	cmp	r4, r8
 800e68a:	d950      	bls.n	800e72e <__hexnan+0x10a>
 800e68c:	2300      	movs	r3, #0
 800e68e:	f1a4 0904 	sub.w	r9, r4, #4
 800e692:	f844 3c04 	str.w	r3, [r4, #-4]
 800e696:	f8cd b008 	str.w	fp, [sp, #8]
 800e69a:	464c      	mov	r4, r9
 800e69c:	461d      	mov	r5, r3
 800e69e:	9a03      	ldr	r2, [sp, #12]
 800e6a0:	e7d7      	b.n	800e652 <__hexnan+0x2e>
 800e6a2:	2929      	cmp	r1, #41	; 0x29
 800e6a4:	d156      	bne.n	800e754 <__hexnan+0x130>
 800e6a6:	3202      	adds	r2, #2
 800e6a8:	f8ca 2000 	str.w	r2, [sl]
 800e6ac:	f1bb 0f00 	cmp.w	fp, #0
 800e6b0:	d050      	beq.n	800e754 <__hexnan+0x130>
 800e6b2:	454c      	cmp	r4, r9
 800e6b4:	d206      	bcs.n	800e6c4 <__hexnan+0xa0>
 800e6b6:	2d07      	cmp	r5, #7
 800e6b8:	dc04      	bgt.n	800e6c4 <__hexnan+0xa0>
 800e6ba:	462a      	mov	r2, r5
 800e6bc:	4649      	mov	r1, r9
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7ff ff8a 	bl	800e5d8 <L_shift>
 800e6c4:	4544      	cmp	r4, r8
 800e6c6:	d934      	bls.n	800e732 <__hexnan+0x10e>
 800e6c8:	f1a8 0204 	sub.w	r2, r8, #4
 800e6cc:	4623      	mov	r3, r4
 800e6ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800e6d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6d6:	429f      	cmp	r7, r3
 800e6d8:	d2f9      	bcs.n	800e6ce <__hexnan+0xaa>
 800e6da:	1b3b      	subs	r3, r7, r4
 800e6dc:	f023 0303 	bic.w	r3, r3, #3
 800e6e0:	3304      	adds	r3, #4
 800e6e2:	3401      	adds	r4, #1
 800e6e4:	3e03      	subs	r6, #3
 800e6e6:	42b4      	cmp	r4, r6
 800e6e8:	bf88      	it	hi
 800e6ea:	2304      	movhi	r3, #4
 800e6ec:	4443      	add	r3, r8
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f843 2b04 	str.w	r2, [r3], #4
 800e6f4:	429f      	cmp	r7, r3
 800e6f6:	d2fb      	bcs.n	800e6f0 <__hexnan+0xcc>
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	b91b      	cbnz	r3, 800e704 <__hexnan+0xe0>
 800e6fc:	4547      	cmp	r7, r8
 800e6fe:	d127      	bne.n	800e750 <__hexnan+0x12c>
 800e700:	2301      	movs	r3, #1
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	2005      	movs	r0, #5
 800e706:	e026      	b.n	800e756 <__hexnan+0x132>
 800e708:	3501      	adds	r5, #1
 800e70a:	2d08      	cmp	r5, #8
 800e70c:	f10b 0b01 	add.w	fp, fp, #1
 800e710:	dd06      	ble.n	800e720 <__hexnan+0xfc>
 800e712:	4544      	cmp	r4, r8
 800e714:	d9c3      	bls.n	800e69e <__hexnan+0x7a>
 800e716:	2300      	movs	r3, #0
 800e718:	f844 3c04 	str.w	r3, [r4, #-4]
 800e71c:	2501      	movs	r5, #1
 800e71e:	3c04      	subs	r4, #4
 800e720:	6822      	ldr	r2, [r4, #0]
 800e722:	f000 000f 	and.w	r0, r0, #15
 800e726:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e72a:	6022      	str	r2, [r4, #0]
 800e72c:	e7b7      	b.n	800e69e <__hexnan+0x7a>
 800e72e:	2508      	movs	r5, #8
 800e730:	e7b5      	b.n	800e69e <__hexnan+0x7a>
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d0df      	beq.n	800e6f8 <__hexnan+0xd4>
 800e738:	f04f 32ff 	mov.w	r2, #4294967295
 800e73c:	f1c3 0320 	rsb	r3, r3, #32
 800e740:	fa22 f303 	lsr.w	r3, r2, r3
 800e744:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e748:	401a      	ands	r2, r3
 800e74a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e74e:	e7d3      	b.n	800e6f8 <__hexnan+0xd4>
 800e750:	3f04      	subs	r7, #4
 800e752:	e7d1      	b.n	800e6f8 <__hexnan+0xd4>
 800e754:	2004      	movs	r0, #4
 800e756:	b007      	add	sp, #28
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e75c <_localeconv_r>:
 800e75c:	4800      	ldr	r0, [pc, #0]	; (800e760 <_localeconv_r+0x4>)
 800e75e:	4770      	bx	lr
 800e760:	20004840 	.word	0x20004840

0800e764 <malloc>:
 800e764:	4b02      	ldr	r3, [pc, #8]	; (800e770 <malloc+0xc>)
 800e766:	4601      	mov	r1, r0
 800e768:	6818      	ldr	r0, [r3, #0]
 800e76a:	f000 bd59 	b.w	800f220 <_malloc_r>
 800e76e:	bf00      	nop
 800e770:	200046e8 	.word	0x200046e8

0800e774 <__ascii_mbtowc>:
 800e774:	b082      	sub	sp, #8
 800e776:	b901      	cbnz	r1, 800e77a <__ascii_mbtowc+0x6>
 800e778:	a901      	add	r1, sp, #4
 800e77a:	b142      	cbz	r2, 800e78e <__ascii_mbtowc+0x1a>
 800e77c:	b14b      	cbz	r3, 800e792 <__ascii_mbtowc+0x1e>
 800e77e:	7813      	ldrb	r3, [r2, #0]
 800e780:	600b      	str	r3, [r1, #0]
 800e782:	7812      	ldrb	r2, [r2, #0]
 800e784:	1e10      	subs	r0, r2, #0
 800e786:	bf18      	it	ne
 800e788:	2001      	movne	r0, #1
 800e78a:	b002      	add	sp, #8
 800e78c:	4770      	bx	lr
 800e78e:	4610      	mov	r0, r2
 800e790:	e7fb      	b.n	800e78a <__ascii_mbtowc+0x16>
 800e792:	f06f 0001 	mvn.w	r0, #1
 800e796:	e7f8      	b.n	800e78a <__ascii_mbtowc+0x16>

0800e798 <_Balloc>:
 800e798:	b570      	push	{r4, r5, r6, lr}
 800e79a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	b976      	cbnz	r6, 800e7c0 <_Balloc+0x28>
 800e7a2:	2010      	movs	r0, #16
 800e7a4:	f7ff ffde 	bl	800e764 <malloc>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	6260      	str	r0, [r4, #36]	; 0x24
 800e7ac:	b920      	cbnz	r0, 800e7b8 <_Balloc+0x20>
 800e7ae:	4b18      	ldr	r3, [pc, #96]	; (800e810 <_Balloc+0x78>)
 800e7b0:	4818      	ldr	r0, [pc, #96]	; (800e814 <_Balloc+0x7c>)
 800e7b2:	2166      	movs	r1, #102	; 0x66
 800e7b4:	f000 ff3e 	bl	800f634 <__assert_func>
 800e7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7bc:	6006      	str	r6, [r0, #0]
 800e7be:	60c6      	str	r6, [r0, #12]
 800e7c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e7c2:	68f3      	ldr	r3, [r6, #12]
 800e7c4:	b183      	cbz	r3, 800e7e8 <_Balloc+0x50>
 800e7c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7ce:	b9b8      	cbnz	r0, 800e800 <_Balloc+0x68>
 800e7d0:	2101      	movs	r1, #1
 800e7d2:	fa01 f605 	lsl.w	r6, r1, r5
 800e7d6:	1d72      	adds	r2, r6, #5
 800e7d8:	0092      	lsls	r2, r2, #2
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f000 fc9d 	bl	800f11a <_calloc_r>
 800e7e0:	b160      	cbz	r0, 800e7fc <_Balloc+0x64>
 800e7e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7e6:	e00e      	b.n	800e806 <_Balloc+0x6e>
 800e7e8:	2221      	movs	r2, #33	; 0x21
 800e7ea:	2104      	movs	r1, #4
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f000 fc94 	bl	800f11a <_calloc_r>
 800e7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7f4:	60f0      	str	r0, [r6, #12]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1e4      	bne.n	800e7c6 <_Balloc+0x2e>
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	bd70      	pop	{r4, r5, r6, pc}
 800e800:	6802      	ldr	r2, [r0, #0]
 800e802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e806:	2300      	movs	r3, #0
 800e808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e80c:	e7f7      	b.n	800e7fe <_Balloc+0x66>
 800e80e:	bf00      	nop
 800e810:	08015f86 	.word	0x08015f86
 800e814:	08016084 	.word	0x08016084

0800e818 <_Bfree>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e81c:	4605      	mov	r5, r0
 800e81e:	460c      	mov	r4, r1
 800e820:	b976      	cbnz	r6, 800e840 <_Bfree+0x28>
 800e822:	2010      	movs	r0, #16
 800e824:	f7ff ff9e 	bl	800e764 <malloc>
 800e828:	4602      	mov	r2, r0
 800e82a:	6268      	str	r0, [r5, #36]	; 0x24
 800e82c:	b920      	cbnz	r0, 800e838 <_Bfree+0x20>
 800e82e:	4b09      	ldr	r3, [pc, #36]	; (800e854 <_Bfree+0x3c>)
 800e830:	4809      	ldr	r0, [pc, #36]	; (800e858 <_Bfree+0x40>)
 800e832:	218a      	movs	r1, #138	; 0x8a
 800e834:	f000 fefe 	bl	800f634 <__assert_func>
 800e838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e83c:	6006      	str	r6, [r0, #0]
 800e83e:	60c6      	str	r6, [r0, #12]
 800e840:	b13c      	cbz	r4, 800e852 <_Bfree+0x3a>
 800e842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e844:	6862      	ldr	r2, [r4, #4]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e84c:	6021      	str	r1, [r4, #0]
 800e84e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	08015f86 	.word	0x08015f86
 800e858:	08016084 	.word	0x08016084

0800e85c <__multadd>:
 800e85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e860:	690d      	ldr	r5, [r1, #16]
 800e862:	4607      	mov	r7, r0
 800e864:	460c      	mov	r4, r1
 800e866:	461e      	mov	r6, r3
 800e868:	f101 0c14 	add.w	ip, r1, #20
 800e86c:	2000      	movs	r0, #0
 800e86e:	f8dc 3000 	ldr.w	r3, [ip]
 800e872:	b299      	uxth	r1, r3
 800e874:	fb02 6101 	mla	r1, r2, r1, r6
 800e878:	0c1e      	lsrs	r6, r3, #16
 800e87a:	0c0b      	lsrs	r3, r1, #16
 800e87c:	fb02 3306 	mla	r3, r2, r6, r3
 800e880:	b289      	uxth	r1, r1
 800e882:	3001      	adds	r0, #1
 800e884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e888:	4285      	cmp	r5, r0
 800e88a:	f84c 1b04 	str.w	r1, [ip], #4
 800e88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e892:	dcec      	bgt.n	800e86e <__multadd+0x12>
 800e894:	b30e      	cbz	r6, 800e8da <__multadd+0x7e>
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	42ab      	cmp	r3, r5
 800e89a:	dc19      	bgt.n	800e8d0 <__multadd+0x74>
 800e89c:	6861      	ldr	r1, [r4, #4]
 800e89e:	4638      	mov	r0, r7
 800e8a0:	3101      	adds	r1, #1
 800e8a2:	f7ff ff79 	bl	800e798 <_Balloc>
 800e8a6:	4680      	mov	r8, r0
 800e8a8:	b928      	cbnz	r0, 800e8b6 <__multadd+0x5a>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	4b0c      	ldr	r3, [pc, #48]	; (800e8e0 <__multadd+0x84>)
 800e8ae:	480d      	ldr	r0, [pc, #52]	; (800e8e4 <__multadd+0x88>)
 800e8b0:	21b5      	movs	r1, #181	; 0xb5
 800e8b2:	f000 febf 	bl	800f634 <__assert_func>
 800e8b6:	6922      	ldr	r2, [r4, #16]
 800e8b8:	3202      	adds	r2, #2
 800e8ba:	f104 010c 	add.w	r1, r4, #12
 800e8be:	0092      	lsls	r2, r2, #2
 800e8c0:	300c      	adds	r0, #12
 800e8c2:	f7fc fff3 	bl	800b8ac <memcpy>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7ff ffa5 	bl	800e818 <_Bfree>
 800e8ce:	4644      	mov	r4, r8
 800e8d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8d4:	3501      	adds	r5, #1
 800e8d6:	615e      	str	r6, [r3, #20]
 800e8d8:	6125      	str	r5, [r4, #16]
 800e8da:	4620      	mov	r0, r4
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e0:	08015ff8 	.word	0x08015ff8
 800e8e4:	08016084 	.word	0x08016084

0800e8e8 <__s2b>:
 800e8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	4615      	mov	r5, r2
 800e8f0:	461f      	mov	r7, r3
 800e8f2:	2209      	movs	r2, #9
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	2201      	movs	r2, #1
 800e900:	429a      	cmp	r2, r3
 800e902:	db09      	blt.n	800e918 <__s2b+0x30>
 800e904:	4630      	mov	r0, r6
 800e906:	f7ff ff47 	bl	800e798 <_Balloc>
 800e90a:	b940      	cbnz	r0, 800e91e <__s2b+0x36>
 800e90c:	4602      	mov	r2, r0
 800e90e:	4b19      	ldr	r3, [pc, #100]	; (800e974 <__s2b+0x8c>)
 800e910:	4819      	ldr	r0, [pc, #100]	; (800e978 <__s2b+0x90>)
 800e912:	21ce      	movs	r1, #206	; 0xce
 800e914:	f000 fe8e 	bl	800f634 <__assert_func>
 800e918:	0052      	lsls	r2, r2, #1
 800e91a:	3101      	adds	r1, #1
 800e91c:	e7f0      	b.n	800e900 <__s2b+0x18>
 800e91e:	9b08      	ldr	r3, [sp, #32]
 800e920:	6143      	str	r3, [r0, #20]
 800e922:	2d09      	cmp	r5, #9
 800e924:	f04f 0301 	mov.w	r3, #1
 800e928:	6103      	str	r3, [r0, #16]
 800e92a:	dd16      	ble.n	800e95a <__s2b+0x72>
 800e92c:	f104 0909 	add.w	r9, r4, #9
 800e930:	46c8      	mov	r8, r9
 800e932:	442c      	add	r4, r5
 800e934:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e938:	4601      	mov	r1, r0
 800e93a:	3b30      	subs	r3, #48	; 0x30
 800e93c:	220a      	movs	r2, #10
 800e93e:	4630      	mov	r0, r6
 800e940:	f7ff ff8c 	bl	800e85c <__multadd>
 800e944:	45a0      	cmp	r8, r4
 800e946:	d1f5      	bne.n	800e934 <__s2b+0x4c>
 800e948:	f1a5 0408 	sub.w	r4, r5, #8
 800e94c:	444c      	add	r4, r9
 800e94e:	1b2d      	subs	r5, r5, r4
 800e950:	1963      	adds	r3, r4, r5
 800e952:	42bb      	cmp	r3, r7
 800e954:	db04      	blt.n	800e960 <__s2b+0x78>
 800e956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95a:	340a      	adds	r4, #10
 800e95c:	2509      	movs	r5, #9
 800e95e:	e7f6      	b.n	800e94e <__s2b+0x66>
 800e960:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e964:	4601      	mov	r1, r0
 800e966:	3b30      	subs	r3, #48	; 0x30
 800e968:	220a      	movs	r2, #10
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7ff ff76 	bl	800e85c <__multadd>
 800e970:	e7ee      	b.n	800e950 <__s2b+0x68>
 800e972:	bf00      	nop
 800e974:	08015ff8 	.word	0x08015ff8
 800e978:	08016084 	.word	0x08016084

0800e97c <__hi0bits>:
 800e97c:	0c03      	lsrs	r3, r0, #16
 800e97e:	041b      	lsls	r3, r3, #16
 800e980:	b9d3      	cbnz	r3, 800e9b8 <__hi0bits+0x3c>
 800e982:	0400      	lsls	r0, r0, #16
 800e984:	2310      	movs	r3, #16
 800e986:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e98a:	bf04      	itt	eq
 800e98c:	0200      	lsleq	r0, r0, #8
 800e98e:	3308      	addeq	r3, #8
 800e990:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e994:	bf04      	itt	eq
 800e996:	0100      	lsleq	r0, r0, #4
 800e998:	3304      	addeq	r3, #4
 800e99a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e99e:	bf04      	itt	eq
 800e9a0:	0080      	lsleq	r0, r0, #2
 800e9a2:	3302      	addeq	r3, #2
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	db05      	blt.n	800e9b4 <__hi0bits+0x38>
 800e9a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e9ac:	f103 0301 	add.w	r3, r3, #1
 800e9b0:	bf08      	it	eq
 800e9b2:	2320      	moveq	r3, #32
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	4770      	bx	lr
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	e7e4      	b.n	800e986 <__hi0bits+0xa>

0800e9bc <__lo0bits>:
 800e9bc:	6803      	ldr	r3, [r0, #0]
 800e9be:	f013 0207 	ands.w	r2, r3, #7
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	d00b      	beq.n	800e9de <__lo0bits+0x22>
 800e9c6:	07da      	lsls	r2, r3, #31
 800e9c8:	d423      	bmi.n	800ea12 <__lo0bits+0x56>
 800e9ca:	0798      	lsls	r0, r3, #30
 800e9cc:	bf49      	itett	mi
 800e9ce:	085b      	lsrmi	r3, r3, #1
 800e9d0:	089b      	lsrpl	r3, r3, #2
 800e9d2:	2001      	movmi	r0, #1
 800e9d4:	600b      	strmi	r3, [r1, #0]
 800e9d6:	bf5c      	itt	pl
 800e9d8:	600b      	strpl	r3, [r1, #0]
 800e9da:	2002      	movpl	r0, #2
 800e9dc:	4770      	bx	lr
 800e9de:	b298      	uxth	r0, r3
 800e9e0:	b9a8      	cbnz	r0, 800ea0e <__lo0bits+0x52>
 800e9e2:	0c1b      	lsrs	r3, r3, #16
 800e9e4:	2010      	movs	r0, #16
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	b90a      	cbnz	r2, 800e9ee <__lo0bits+0x32>
 800e9ea:	3008      	adds	r0, #8
 800e9ec:	0a1b      	lsrs	r3, r3, #8
 800e9ee:	071a      	lsls	r2, r3, #28
 800e9f0:	bf04      	itt	eq
 800e9f2:	091b      	lsreq	r3, r3, #4
 800e9f4:	3004      	addeq	r0, #4
 800e9f6:	079a      	lsls	r2, r3, #30
 800e9f8:	bf04      	itt	eq
 800e9fa:	089b      	lsreq	r3, r3, #2
 800e9fc:	3002      	addeq	r0, #2
 800e9fe:	07da      	lsls	r2, r3, #31
 800ea00:	d403      	bmi.n	800ea0a <__lo0bits+0x4e>
 800ea02:	085b      	lsrs	r3, r3, #1
 800ea04:	f100 0001 	add.w	r0, r0, #1
 800ea08:	d005      	beq.n	800ea16 <__lo0bits+0x5a>
 800ea0a:	600b      	str	r3, [r1, #0]
 800ea0c:	4770      	bx	lr
 800ea0e:	4610      	mov	r0, r2
 800ea10:	e7e9      	b.n	800e9e6 <__lo0bits+0x2a>
 800ea12:	2000      	movs	r0, #0
 800ea14:	4770      	bx	lr
 800ea16:	2020      	movs	r0, #32
 800ea18:	4770      	bx	lr
	...

0800ea1c <__i2b>:
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	460c      	mov	r4, r1
 800ea20:	2101      	movs	r1, #1
 800ea22:	f7ff feb9 	bl	800e798 <_Balloc>
 800ea26:	4602      	mov	r2, r0
 800ea28:	b928      	cbnz	r0, 800ea36 <__i2b+0x1a>
 800ea2a:	4b05      	ldr	r3, [pc, #20]	; (800ea40 <__i2b+0x24>)
 800ea2c:	4805      	ldr	r0, [pc, #20]	; (800ea44 <__i2b+0x28>)
 800ea2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea32:	f000 fdff 	bl	800f634 <__assert_func>
 800ea36:	2301      	movs	r3, #1
 800ea38:	6144      	str	r4, [r0, #20]
 800ea3a:	6103      	str	r3, [r0, #16]
 800ea3c:	bd10      	pop	{r4, pc}
 800ea3e:	bf00      	nop
 800ea40:	08015ff8 	.word	0x08015ff8
 800ea44:	08016084 	.word	0x08016084

0800ea48 <__multiply>:
 800ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4c:	4691      	mov	r9, r2
 800ea4e:	690a      	ldr	r2, [r1, #16]
 800ea50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	bfb8      	it	lt
 800ea58:	460b      	movlt	r3, r1
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	bfbc      	itt	lt
 800ea5e:	464c      	movlt	r4, r9
 800ea60:	4699      	movlt	r9, r3
 800ea62:	6927      	ldr	r7, [r4, #16]
 800ea64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea68:	68a3      	ldr	r3, [r4, #8]
 800ea6a:	6861      	ldr	r1, [r4, #4]
 800ea6c:	eb07 060a 	add.w	r6, r7, sl
 800ea70:	42b3      	cmp	r3, r6
 800ea72:	b085      	sub	sp, #20
 800ea74:	bfb8      	it	lt
 800ea76:	3101      	addlt	r1, #1
 800ea78:	f7ff fe8e 	bl	800e798 <_Balloc>
 800ea7c:	b930      	cbnz	r0, 800ea8c <__multiply+0x44>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	4b44      	ldr	r3, [pc, #272]	; (800eb94 <__multiply+0x14c>)
 800ea82:	4845      	ldr	r0, [pc, #276]	; (800eb98 <__multiply+0x150>)
 800ea84:	f240 115d 	movw	r1, #349	; 0x15d
 800ea88:	f000 fdd4 	bl	800f634 <__assert_func>
 800ea8c:	f100 0514 	add.w	r5, r0, #20
 800ea90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea94:	462b      	mov	r3, r5
 800ea96:	2200      	movs	r2, #0
 800ea98:	4543      	cmp	r3, r8
 800ea9a:	d321      	bcc.n	800eae0 <__multiply+0x98>
 800ea9c:	f104 0314 	add.w	r3, r4, #20
 800eaa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eaa4:	f109 0314 	add.w	r3, r9, #20
 800eaa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eaac:	9202      	str	r2, [sp, #8]
 800eaae:	1b3a      	subs	r2, r7, r4
 800eab0:	3a15      	subs	r2, #21
 800eab2:	f022 0203 	bic.w	r2, r2, #3
 800eab6:	3204      	adds	r2, #4
 800eab8:	f104 0115 	add.w	r1, r4, #21
 800eabc:	428f      	cmp	r7, r1
 800eabe:	bf38      	it	cc
 800eac0:	2204      	movcc	r2, #4
 800eac2:	9201      	str	r2, [sp, #4]
 800eac4:	9a02      	ldr	r2, [sp, #8]
 800eac6:	9303      	str	r3, [sp, #12]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d80c      	bhi.n	800eae6 <__multiply+0x9e>
 800eacc:	2e00      	cmp	r6, #0
 800eace:	dd03      	ble.n	800ead8 <__multiply+0x90>
 800ead0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d05a      	beq.n	800eb8e <__multiply+0x146>
 800ead8:	6106      	str	r6, [r0, #16]
 800eada:	b005      	add	sp, #20
 800eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae0:	f843 2b04 	str.w	r2, [r3], #4
 800eae4:	e7d8      	b.n	800ea98 <__multiply+0x50>
 800eae6:	f8b3 a000 	ldrh.w	sl, [r3]
 800eaea:	f1ba 0f00 	cmp.w	sl, #0
 800eaee:	d024      	beq.n	800eb3a <__multiply+0xf2>
 800eaf0:	f104 0e14 	add.w	lr, r4, #20
 800eaf4:	46a9      	mov	r9, r5
 800eaf6:	f04f 0c00 	mov.w	ip, #0
 800eafa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eafe:	f8d9 1000 	ldr.w	r1, [r9]
 800eb02:	fa1f fb82 	uxth.w	fp, r2
 800eb06:	b289      	uxth	r1, r1
 800eb08:	fb0a 110b 	mla	r1, sl, fp, r1
 800eb0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eb10:	f8d9 2000 	ldr.w	r2, [r9]
 800eb14:	4461      	add	r1, ip
 800eb16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800eb1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb22:	b289      	uxth	r1, r1
 800eb24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb28:	4577      	cmp	r7, lr
 800eb2a:	f849 1b04 	str.w	r1, [r9], #4
 800eb2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb32:	d8e2      	bhi.n	800eafa <__multiply+0xb2>
 800eb34:	9a01      	ldr	r2, [sp, #4]
 800eb36:	f845 c002 	str.w	ip, [r5, r2]
 800eb3a:	9a03      	ldr	r2, [sp, #12]
 800eb3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb40:	3304      	adds	r3, #4
 800eb42:	f1b9 0f00 	cmp.w	r9, #0
 800eb46:	d020      	beq.n	800eb8a <__multiply+0x142>
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	f104 0c14 	add.w	ip, r4, #20
 800eb4e:	46ae      	mov	lr, r5
 800eb50:	f04f 0a00 	mov.w	sl, #0
 800eb54:	f8bc b000 	ldrh.w	fp, [ip]
 800eb58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb5c:	fb09 220b 	mla	r2, r9, fp, r2
 800eb60:	4492      	add	sl, r2
 800eb62:	b289      	uxth	r1, r1
 800eb64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb68:	f84e 1b04 	str.w	r1, [lr], #4
 800eb6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb70:	f8be 1000 	ldrh.w	r1, [lr]
 800eb74:	0c12      	lsrs	r2, r2, #16
 800eb76:	fb09 1102 	mla	r1, r9, r2, r1
 800eb7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eb7e:	4567      	cmp	r7, ip
 800eb80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb84:	d8e6      	bhi.n	800eb54 <__multiply+0x10c>
 800eb86:	9a01      	ldr	r2, [sp, #4]
 800eb88:	50a9      	str	r1, [r5, r2]
 800eb8a:	3504      	adds	r5, #4
 800eb8c:	e79a      	b.n	800eac4 <__multiply+0x7c>
 800eb8e:	3e01      	subs	r6, #1
 800eb90:	e79c      	b.n	800eacc <__multiply+0x84>
 800eb92:	bf00      	nop
 800eb94:	08015ff8 	.word	0x08015ff8
 800eb98:	08016084 	.word	0x08016084

0800eb9c <__pow5mult>:
 800eb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba0:	4615      	mov	r5, r2
 800eba2:	f012 0203 	ands.w	r2, r2, #3
 800eba6:	4606      	mov	r6, r0
 800eba8:	460f      	mov	r7, r1
 800ebaa:	d007      	beq.n	800ebbc <__pow5mult+0x20>
 800ebac:	4c25      	ldr	r4, [pc, #148]	; (800ec44 <__pow5mult+0xa8>)
 800ebae:	3a01      	subs	r2, #1
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebb6:	f7ff fe51 	bl	800e85c <__multadd>
 800ebba:	4607      	mov	r7, r0
 800ebbc:	10ad      	asrs	r5, r5, #2
 800ebbe:	d03d      	beq.n	800ec3c <__pow5mult+0xa0>
 800ebc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebc2:	b97c      	cbnz	r4, 800ebe4 <__pow5mult+0x48>
 800ebc4:	2010      	movs	r0, #16
 800ebc6:	f7ff fdcd 	bl	800e764 <malloc>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	6270      	str	r0, [r6, #36]	; 0x24
 800ebce:	b928      	cbnz	r0, 800ebdc <__pow5mult+0x40>
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	; (800ec48 <__pow5mult+0xac>)
 800ebd2:	481e      	ldr	r0, [pc, #120]	; (800ec4c <__pow5mult+0xb0>)
 800ebd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ebd8:	f000 fd2c 	bl	800f634 <__assert_func>
 800ebdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebe0:	6004      	str	r4, [r0, #0]
 800ebe2:	60c4      	str	r4, [r0, #12]
 800ebe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ebe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebec:	b94c      	cbnz	r4, 800ec02 <__pow5mult+0x66>
 800ebee:	f240 2171 	movw	r1, #625	; 0x271
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff ff12 	bl	800ea1c <__i2b>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebfe:	4604      	mov	r4, r0
 800ec00:	6003      	str	r3, [r0, #0]
 800ec02:	f04f 0900 	mov.w	r9, #0
 800ec06:	07eb      	lsls	r3, r5, #31
 800ec08:	d50a      	bpl.n	800ec20 <__pow5mult+0x84>
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	4630      	mov	r0, r6
 800ec10:	f7ff ff1a 	bl	800ea48 <__multiply>
 800ec14:	4639      	mov	r1, r7
 800ec16:	4680      	mov	r8, r0
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7ff fdfd 	bl	800e818 <_Bfree>
 800ec1e:	4647      	mov	r7, r8
 800ec20:	106d      	asrs	r5, r5, #1
 800ec22:	d00b      	beq.n	800ec3c <__pow5mult+0xa0>
 800ec24:	6820      	ldr	r0, [r4, #0]
 800ec26:	b938      	cbnz	r0, 800ec38 <__pow5mult+0x9c>
 800ec28:	4622      	mov	r2, r4
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f7ff ff0b 	bl	800ea48 <__multiply>
 800ec32:	6020      	str	r0, [r4, #0]
 800ec34:	f8c0 9000 	str.w	r9, [r0]
 800ec38:	4604      	mov	r4, r0
 800ec3a:	e7e4      	b.n	800ec06 <__pow5mult+0x6a>
 800ec3c:	4638      	mov	r0, r7
 800ec3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec42:	bf00      	nop
 800ec44:	080161d0 	.word	0x080161d0
 800ec48:	08015f86 	.word	0x08015f86
 800ec4c:	08016084 	.word	0x08016084

0800ec50 <__lshift>:
 800ec50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec54:	460c      	mov	r4, r1
 800ec56:	6849      	ldr	r1, [r1, #4]
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec5e:	68a3      	ldr	r3, [r4, #8]
 800ec60:	4607      	mov	r7, r0
 800ec62:	4691      	mov	r9, r2
 800ec64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec68:	f108 0601 	add.w	r6, r8, #1
 800ec6c:	42b3      	cmp	r3, r6
 800ec6e:	db0b      	blt.n	800ec88 <__lshift+0x38>
 800ec70:	4638      	mov	r0, r7
 800ec72:	f7ff fd91 	bl	800e798 <_Balloc>
 800ec76:	4605      	mov	r5, r0
 800ec78:	b948      	cbnz	r0, 800ec8e <__lshift+0x3e>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	4b2a      	ldr	r3, [pc, #168]	; (800ed28 <__lshift+0xd8>)
 800ec7e:	482b      	ldr	r0, [pc, #172]	; (800ed2c <__lshift+0xdc>)
 800ec80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec84:	f000 fcd6 	bl	800f634 <__assert_func>
 800ec88:	3101      	adds	r1, #1
 800ec8a:	005b      	lsls	r3, r3, #1
 800ec8c:	e7ee      	b.n	800ec6c <__lshift+0x1c>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	f100 0114 	add.w	r1, r0, #20
 800ec94:	f100 0210 	add.w	r2, r0, #16
 800ec98:	4618      	mov	r0, r3
 800ec9a:	4553      	cmp	r3, sl
 800ec9c:	db37      	blt.n	800ed0e <__lshift+0xbe>
 800ec9e:	6920      	ldr	r0, [r4, #16]
 800eca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eca4:	f104 0314 	add.w	r3, r4, #20
 800eca8:	f019 091f 	ands.w	r9, r9, #31
 800ecac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ecb4:	d02f      	beq.n	800ed16 <__lshift+0xc6>
 800ecb6:	f1c9 0e20 	rsb	lr, r9, #32
 800ecba:	468a      	mov	sl, r1
 800ecbc:	f04f 0c00 	mov.w	ip, #0
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	fa02 f209 	lsl.w	r2, r2, r9
 800ecc6:	ea42 020c 	orr.w	r2, r2, ip
 800ecca:	f84a 2b04 	str.w	r2, [sl], #4
 800ecce:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd2:	4298      	cmp	r0, r3
 800ecd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ecd8:	d8f2      	bhi.n	800ecc0 <__lshift+0x70>
 800ecda:	1b03      	subs	r3, r0, r4
 800ecdc:	3b15      	subs	r3, #21
 800ecde:	f023 0303 	bic.w	r3, r3, #3
 800ece2:	3304      	adds	r3, #4
 800ece4:	f104 0215 	add.w	r2, r4, #21
 800ece8:	4290      	cmp	r0, r2
 800ecea:	bf38      	it	cc
 800ecec:	2304      	movcc	r3, #4
 800ecee:	f841 c003 	str.w	ip, [r1, r3]
 800ecf2:	f1bc 0f00 	cmp.w	ip, #0
 800ecf6:	d001      	beq.n	800ecfc <__lshift+0xac>
 800ecf8:	f108 0602 	add.w	r6, r8, #2
 800ecfc:	3e01      	subs	r6, #1
 800ecfe:	4638      	mov	r0, r7
 800ed00:	612e      	str	r6, [r5, #16]
 800ed02:	4621      	mov	r1, r4
 800ed04:	f7ff fd88 	bl	800e818 <_Bfree>
 800ed08:	4628      	mov	r0, r5
 800ed0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed12:	3301      	adds	r3, #1
 800ed14:	e7c1      	b.n	800ec9a <__lshift+0x4a>
 800ed16:	3904      	subs	r1, #4
 800ed18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed20:	4298      	cmp	r0, r3
 800ed22:	d8f9      	bhi.n	800ed18 <__lshift+0xc8>
 800ed24:	e7ea      	b.n	800ecfc <__lshift+0xac>
 800ed26:	bf00      	nop
 800ed28:	08015ff8 	.word	0x08015ff8
 800ed2c:	08016084 	.word	0x08016084

0800ed30 <__mcmp>:
 800ed30:	b530      	push	{r4, r5, lr}
 800ed32:	6902      	ldr	r2, [r0, #16]
 800ed34:	690c      	ldr	r4, [r1, #16]
 800ed36:	1b12      	subs	r2, r2, r4
 800ed38:	d10e      	bne.n	800ed58 <__mcmp+0x28>
 800ed3a:	f100 0314 	add.w	r3, r0, #20
 800ed3e:	3114      	adds	r1, #20
 800ed40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed50:	42a5      	cmp	r5, r4
 800ed52:	d003      	beq.n	800ed5c <__mcmp+0x2c>
 800ed54:	d305      	bcc.n	800ed62 <__mcmp+0x32>
 800ed56:	2201      	movs	r2, #1
 800ed58:	4610      	mov	r0, r2
 800ed5a:	bd30      	pop	{r4, r5, pc}
 800ed5c:	4283      	cmp	r3, r0
 800ed5e:	d3f3      	bcc.n	800ed48 <__mcmp+0x18>
 800ed60:	e7fa      	b.n	800ed58 <__mcmp+0x28>
 800ed62:	f04f 32ff 	mov.w	r2, #4294967295
 800ed66:	e7f7      	b.n	800ed58 <__mcmp+0x28>

0800ed68 <__mdiff>:
 800ed68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	4606      	mov	r6, r0
 800ed70:	4611      	mov	r1, r2
 800ed72:	4620      	mov	r0, r4
 800ed74:	4690      	mov	r8, r2
 800ed76:	f7ff ffdb 	bl	800ed30 <__mcmp>
 800ed7a:	1e05      	subs	r5, r0, #0
 800ed7c:	d110      	bne.n	800eda0 <__mdiff+0x38>
 800ed7e:	4629      	mov	r1, r5
 800ed80:	4630      	mov	r0, r6
 800ed82:	f7ff fd09 	bl	800e798 <_Balloc>
 800ed86:	b930      	cbnz	r0, 800ed96 <__mdiff+0x2e>
 800ed88:	4b3a      	ldr	r3, [pc, #232]	; (800ee74 <__mdiff+0x10c>)
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	f240 2132 	movw	r1, #562	; 0x232
 800ed90:	4839      	ldr	r0, [pc, #228]	; (800ee78 <__mdiff+0x110>)
 800ed92:	f000 fc4f 	bl	800f634 <__assert_func>
 800ed96:	2301      	movs	r3, #1
 800ed98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda0:	bfa4      	itt	ge
 800eda2:	4643      	movge	r3, r8
 800eda4:	46a0      	movge	r8, r4
 800eda6:	4630      	mov	r0, r6
 800eda8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800edac:	bfa6      	itte	ge
 800edae:	461c      	movge	r4, r3
 800edb0:	2500      	movge	r5, #0
 800edb2:	2501      	movlt	r5, #1
 800edb4:	f7ff fcf0 	bl	800e798 <_Balloc>
 800edb8:	b920      	cbnz	r0, 800edc4 <__mdiff+0x5c>
 800edba:	4b2e      	ldr	r3, [pc, #184]	; (800ee74 <__mdiff+0x10c>)
 800edbc:	4602      	mov	r2, r0
 800edbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800edc2:	e7e5      	b.n	800ed90 <__mdiff+0x28>
 800edc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800edc8:	6926      	ldr	r6, [r4, #16]
 800edca:	60c5      	str	r5, [r0, #12]
 800edcc:	f104 0914 	add.w	r9, r4, #20
 800edd0:	f108 0514 	add.w	r5, r8, #20
 800edd4:	f100 0e14 	add.w	lr, r0, #20
 800edd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eddc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ede0:	f108 0210 	add.w	r2, r8, #16
 800ede4:	46f2      	mov	sl, lr
 800ede6:	2100      	movs	r1, #0
 800ede8:	f859 3b04 	ldr.w	r3, [r9], #4
 800edec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edf0:	fa1f f883 	uxth.w	r8, r3
 800edf4:	fa11 f18b 	uxtah	r1, r1, fp
 800edf8:	0c1b      	lsrs	r3, r3, #16
 800edfa:	eba1 0808 	sub.w	r8, r1, r8
 800edfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee06:	fa1f f888 	uxth.w	r8, r8
 800ee0a:	1419      	asrs	r1, r3, #16
 800ee0c:	454e      	cmp	r6, r9
 800ee0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ee12:	f84a 3b04 	str.w	r3, [sl], #4
 800ee16:	d8e7      	bhi.n	800ede8 <__mdiff+0x80>
 800ee18:	1b33      	subs	r3, r6, r4
 800ee1a:	3b15      	subs	r3, #21
 800ee1c:	f023 0303 	bic.w	r3, r3, #3
 800ee20:	3304      	adds	r3, #4
 800ee22:	3415      	adds	r4, #21
 800ee24:	42a6      	cmp	r6, r4
 800ee26:	bf38      	it	cc
 800ee28:	2304      	movcc	r3, #4
 800ee2a:	441d      	add	r5, r3
 800ee2c:	4473      	add	r3, lr
 800ee2e:	469e      	mov	lr, r3
 800ee30:	462e      	mov	r6, r5
 800ee32:	4566      	cmp	r6, ip
 800ee34:	d30e      	bcc.n	800ee54 <__mdiff+0xec>
 800ee36:	f10c 0203 	add.w	r2, ip, #3
 800ee3a:	1b52      	subs	r2, r2, r5
 800ee3c:	f022 0203 	bic.w	r2, r2, #3
 800ee40:	3d03      	subs	r5, #3
 800ee42:	45ac      	cmp	ip, r5
 800ee44:	bf38      	it	cc
 800ee46:	2200      	movcc	r2, #0
 800ee48:	441a      	add	r2, r3
 800ee4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee4e:	b17b      	cbz	r3, 800ee70 <__mdiff+0x108>
 800ee50:	6107      	str	r7, [r0, #16]
 800ee52:	e7a3      	b.n	800ed9c <__mdiff+0x34>
 800ee54:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee58:	fa11 f288 	uxtah	r2, r1, r8
 800ee5c:	1414      	asrs	r4, r2, #16
 800ee5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee62:	b292      	uxth	r2, r2
 800ee64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee68:	f84e 2b04 	str.w	r2, [lr], #4
 800ee6c:	1421      	asrs	r1, r4, #16
 800ee6e:	e7e0      	b.n	800ee32 <__mdiff+0xca>
 800ee70:	3f01      	subs	r7, #1
 800ee72:	e7ea      	b.n	800ee4a <__mdiff+0xe2>
 800ee74:	08015ff8 	.word	0x08015ff8
 800ee78:	08016084 	.word	0x08016084

0800ee7c <__ulp>:
 800ee7c:	b082      	sub	sp, #8
 800ee7e:	ed8d 0b00 	vstr	d0, [sp]
 800ee82:	9b01      	ldr	r3, [sp, #4]
 800ee84:	4912      	ldr	r1, [pc, #72]	; (800eed0 <__ulp+0x54>)
 800ee86:	4019      	ands	r1, r3
 800ee88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ee8c:	2900      	cmp	r1, #0
 800ee8e:	dd05      	ble.n	800ee9c <__ulp+0x20>
 800ee90:	2200      	movs	r2, #0
 800ee92:	460b      	mov	r3, r1
 800ee94:	ec43 2b10 	vmov	d0, r2, r3
 800ee98:	b002      	add	sp, #8
 800ee9a:	4770      	bx	lr
 800ee9c:	4249      	negs	r1, r1
 800ee9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eea2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eea6:	f04f 0200 	mov.w	r2, #0
 800eeaa:	f04f 0300 	mov.w	r3, #0
 800eeae:	da04      	bge.n	800eeba <__ulp+0x3e>
 800eeb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eeb4:	fa41 f300 	asr.w	r3, r1, r0
 800eeb8:	e7ec      	b.n	800ee94 <__ulp+0x18>
 800eeba:	f1a0 0114 	sub.w	r1, r0, #20
 800eebe:	291e      	cmp	r1, #30
 800eec0:	bfda      	itte	le
 800eec2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eec6:	fa20 f101 	lsrle.w	r1, r0, r1
 800eeca:	2101      	movgt	r1, #1
 800eecc:	460a      	mov	r2, r1
 800eece:	e7e1      	b.n	800ee94 <__ulp+0x18>
 800eed0:	7ff00000 	.word	0x7ff00000

0800eed4 <__b2d>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	6905      	ldr	r5, [r0, #16]
 800eed8:	f100 0714 	add.w	r7, r0, #20
 800eedc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eee0:	1f2e      	subs	r6, r5, #4
 800eee2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eee6:	4620      	mov	r0, r4
 800eee8:	f7ff fd48 	bl	800e97c <__hi0bits>
 800eeec:	f1c0 0320 	rsb	r3, r0, #32
 800eef0:	280a      	cmp	r0, #10
 800eef2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ef70 <__b2d+0x9c>
 800eef6:	600b      	str	r3, [r1, #0]
 800eef8:	dc14      	bgt.n	800ef24 <__b2d+0x50>
 800eefa:	f1c0 0e0b 	rsb	lr, r0, #11
 800eefe:	fa24 f10e 	lsr.w	r1, r4, lr
 800ef02:	42b7      	cmp	r7, r6
 800ef04:	ea41 030c 	orr.w	r3, r1, ip
 800ef08:	bf34      	ite	cc
 800ef0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ef0e:	2100      	movcs	r1, #0
 800ef10:	3015      	adds	r0, #21
 800ef12:	fa04 f000 	lsl.w	r0, r4, r0
 800ef16:	fa21 f10e 	lsr.w	r1, r1, lr
 800ef1a:	ea40 0201 	orr.w	r2, r0, r1
 800ef1e:	ec43 2b10 	vmov	d0, r2, r3
 800ef22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef24:	42b7      	cmp	r7, r6
 800ef26:	bf3a      	itte	cc
 800ef28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ef2c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ef30:	2100      	movcs	r1, #0
 800ef32:	380b      	subs	r0, #11
 800ef34:	d017      	beq.n	800ef66 <__b2d+0x92>
 800ef36:	f1c0 0c20 	rsb	ip, r0, #32
 800ef3a:	fa04 f500 	lsl.w	r5, r4, r0
 800ef3e:	42be      	cmp	r6, r7
 800ef40:	fa21 f40c 	lsr.w	r4, r1, ip
 800ef44:	ea45 0504 	orr.w	r5, r5, r4
 800ef48:	bf8c      	ite	hi
 800ef4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ef4e:	2400      	movls	r4, #0
 800ef50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ef54:	fa01 f000 	lsl.w	r0, r1, r0
 800ef58:	fa24 f40c 	lsr.w	r4, r4, ip
 800ef5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ef60:	ea40 0204 	orr.w	r2, r0, r4
 800ef64:	e7db      	b.n	800ef1e <__b2d+0x4a>
 800ef66:	ea44 030c 	orr.w	r3, r4, ip
 800ef6a:	460a      	mov	r2, r1
 800ef6c:	e7d7      	b.n	800ef1e <__b2d+0x4a>
 800ef6e:	bf00      	nop
 800ef70:	3ff00000 	.word	0x3ff00000

0800ef74 <__d2b>:
 800ef74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef78:	4689      	mov	r9, r1
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	ec57 6b10 	vmov	r6, r7, d0
 800ef80:	4690      	mov	r8, r2
 800ef82:	f7ff fc09 	bl	800e798 <_Balloc>
 800ef86:	4604      	mov	r4, r0
 800ef88:	b930      	cbnz	r0, 800ef98 <__d2b+0x24>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	4b25      	ldr	r3, [pc, #148]	; (800f024 <__d2b+0xb0>)
 800ef8e:	4826      	ldr	r0, [pc, #152]	; (800f028 <__d2b+0xb4>)
 800ef90:	f240 310a 	movw	r1, #778	; 0x30a
 800ef94:	f000 fb4e 	bl	800f634 <__assert_func>
 800ef98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ef9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800efa0:	bb35      	cbnz	r5, 800eff0 <__d2b+0x7c>
 800efa2:	2e00      	cmp	r6, #0
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	d028      	beq.n	800effa <__d2b+0x86>
 800efa8:	4668      	mov	r0, sp
 800efaa:	9600      	str	r6, [sp, #0]
 800efac:	f7ff fd06 	bl	800e9bc <__lo0bits>
 800efb0:	9900      	ldr	r1, [sp, #0]
 800efb2:	b300      	cbz	r0, 800eff6 <__d2b+0x82>
 800efb4:	9a01      	ldr	r2, [sp, #4]
 800efb6:	f1c0 0320 	rsb	r3, r0, #32
 800efba:	fa02 f303 	lsl.w	r3, r2, r3
 800efbe:	430b      	orrs	r3, r1
 800efc0:	40c2      	lsrs	r2, r0
 800efc2:	6163      	str	r3, [r4, #20]
 800efc4:	9201      	str	r2, [sp, #4]
 800efc6:	9b01      	ldr	r3, [sp, #4]
 800efc8:	61a3      	str	r3, [r4, #24]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	bf14      	ite	ne
 800efce:	2202      	movne	r2, #2
 800efd0:	2201      	moveq	r2, #1
 800efd2:	6122      	str	r2, [r4, #16]
 800efd4:	b1d5      	cbz	r5, 800f00c <__d2b+0x98>
 800efd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800efda:	4405      	add	r5, r0
 800efdc:	f8c9 5000 	str.w	r5, [r9]
 800efe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800efe4:	f8c8 0000 	str.w	r0, [r8]
 800efe8:	4620      	mov	r0, r4
 800efea:	b003      	add	sp, #12
 800efec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eff4:	e7d5      	b.n	800efa2 <__d2b+0x2e>
 800eff6:	6161      	str	r1, [r4, #20]
 800eff8:	e7e5      	b.n	800efc6 <__d2b+0x52>
 800effa:	a801      	add	r0, sp, #4
 800effc:	f7ff fcde 	bl	800e9bc <__lo0bits>
 800f000:	9b01      	ldr	r3, [sp, #4]
 800f002:	6163      	str	r3, [r4, #20]
 800f004:	2201      	movs	r2, #1
 800f006:	6122      	str	r2, [r4, #16]
 800f008:	3020      	adds	r0, #32
 800f00a:	e7e3      	b.n	800efd4 <__d2b+0x60>
 800f00c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f014:	f8c9 0000 	str.w	r0, [r9]
 800f018:	6918      	ldr	r0, [r3, #16]
 800f01a:	f7ff fcaf 	bl	800e97c <__hi0bits>
 800f01e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f022:	e7df      	b.n	800efe4 <__d2b+0x70>
 800f024:	08015ff8 	.word	0x08015ff8
 800f028:	08016084 	.word	0x08016084

0800f02c <__ratio>:
 800f02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f030:	4688      	mov	r8, r1
 800f032:	4669      	mov	r1, sp
 800f034:	4681      	mov	r9, r0
 800f036:	f7ff ff4d 	bl	800eed4 <__b2d>
 800f03a:	a901      	add	r1, sp, #4
 800f03c:	4640      	mov	r0, r8
 800f03e:	ec55 4b10 	vmov	r4, r5, d0
 800f042:	f7ff ff47 	bl	800eed4 <__b2d>
 800f046:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f04a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f04e:	eba3 0c02 	sub.w	ip, r3, r2
 800f052:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f056:	1a9b      	subs	r3, r3, r2
 800f058:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f05c:	ec51 0b10 	vmov	r0, r1, d0
 800f060:	2b00      	cmp	r3, #0
 800f062:	bfd6      	itet	le
 800f064:	460a      	movle	r2, r1
 800f066:	462a      	movgt	r2, r5
 800f068:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f06c:	468b      	mov	fp, r1
 800f06e:	462f      	mov	r7, r5
 800f070:	bfd4      	ite	le
 800f072:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f076:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f07a:	4620      	mov	r0, r4
 800f07c:	ee10 2a10 	vmov	r2, s0
 800f080:	465b      	mov	r3, fp
 800f082:	4639      	mov	r1, r7
 800f084:	f7f1 fbba 	bl	80007fc <__aeabi_ddiv>
 800f088:	ec41 0b10 	vmov	d0, r0, r1
 800f08c:	b003      	add	sp, #12
 800f08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f092 <__copybits>:
 800f092:	3901      	subs	r1, #1
 800f094:	b570      	push	{r4, r5, r6, lr}
 800f096:	1149      	asrs	r1, r1, #5
 800f098:	6914      	ldr	r4, [r2, #16]
 800f09a:	3101      	adds	r1, #1
 800f09c:	f102 0314 	add.w	r3, r2, #20
 800f0a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0a8:	1f05      	subs	r5, r0, #4
 800f0aa:	42a3      	cmp	r3, r4
 800f0ac:	d30c      	bcc.n	800f0c8 <__copybits+0x36>
 800f0ae:	1aa3      	subs	r3, r4, r2
 800f0b0:	3b11      	subs	r3, #17
 800f0b2:	f023 0303 	bic.w	r3, r3, #3
 800f0b6:	3211      	adds	r2, #17
 800f0b8:	42a2      	cmp	r2, r4
 800f0ba:	bf88      	it	hi
 800f0bc:	2300      	movhi	r3, #0
 800f0be:	4418      	add	r0, r3
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	4288      	cmp	r0, r1
 800f0c4:	d305      	bcc.n	800f0d2 <__copybits+0x40>
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}
 800f0c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0d0:	e7eb      	b.n	800f0aa <__copybits+0x18>
 800f0d2:	f840 3b04 	str.w	r3, [r0], #4
 800f0d6:	e7f4      	b.n	800f0c2 <__copybits+0x30>

0800f0d8 <__any_on>:
 800f0d8:	f100 0214 	add.w	r2, r0, #20
 800f0dc:	6900      	ldr	r0, [r0, #16]
 800f0de:	114b      	asrs	r3, r1, #5
 800f0e0:	4298      	cmp	r0, r3
 800f0e2:	b510      	push	{r4, lr}
 800f0e4:	db11      	blt.n	800f10a <__any_on+0x32>
 800f0e6:	dd0a      	ble.n	800f0fe <__any_on+0x26>
 800f0e8:	f011 011f 	ands.w	r1, r1, #31
 800f0ec:	d007      	beq.n	800f0fe <__any_on+0x26>
 800f0ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0f2:	fa24 f001 	lsr.w	r0, r4, r1
 800f0f6:	fa00 f101 	lsl.w	r1, r0, r1
 800f0fa:	428c      	cmp	r4, r1
 800f0fc:	d10b      	bne.n	800f116 <__any_on+0x3e>
 800f0fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f102:	4293      	cmp	r3, r2
 800f104:	d803      	bhi.n	800f10e <__any_on+0x36>
 800f106:	2000      	movs	r0, #0
 800f108:	bd10      	pop	{r4, pc}
 800f10a:	4603      	mov	r3, r0
 800f10c:	e7f7      	b.n	800f0fe <__any_on+0x26>
 800f10e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f112:	2900      	cmp	r1, #0
 800f114:	d0f5      	beq.n	800f102 <__any_on+0x2a>
 800f116:	2001      	movs	r0, #1
 800f118:	e7f6      	b.n	800f108 <__any_on+0x30>

0800f11a <_calloc_r>:
 800f11a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f11c:	fba1 2402 	umull	r2, r4, r1, r2
 800f120:	b94c      	cbnz	r4, 800f136 <_calloc_r+0x1c>
 800f122:	4611      	mov	r1, r2
 800f124:	9201      	str	r2, [sp, #4]
 800f126:	f000 f87b 	bl	800f220 <_malloc_r>
 800f12a:	9a01      	ldr	r2, [sp, #4]
 800f12c:	4605      	mov	r5, r0
 800f12e:	b930      	cbnz	r0, 800f13e <_calloc_r+0x24>
 800f130:	4628      	mov	r0, r5
 800f132:	b003      	add	sp, #12
 800f134:	bd30      	pop	{r4, r5, pc}
 800f136:	220c      	movs	r2, #12
 800f138:	6002      	str	r2, [r0, #0]
 800f13a:	2500      	movs	r5, #0
 800f13c:	e7f8      	b.n	800f130 <_calloc_r+0x16>
 800f13e:	4621      	mov	r1, r4
 800f140:	f7fc fbc2 	bl	800b8c8 <memset>
 800f144:	e7f4      	b.n	800f130 <_calloc_r+0x16>
	...

0800f148 <_free_r>:
 800f148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f14a:	2900      	cmp	r1, #0
 800f14c:	d044      	beq.n	800f1d8 <_free_r+0x90>
 800f14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f152:	9001      	str	r0, [sp, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	f1a1 0404 	sub.w	r4, r1, #4
 800f15a:	bfb8      	it	lt
 800f15c:	18e4      	addlt	r4, r4, r3
 800f15e:	f000 fab3 	bl	800f6c8 <__malloc_lock>
 800f162:	4a1e      	ldr	r2, [pc, #120]	; (800f1dc <_free_r+0x94>)
 800f164:	9801      	ldr	r0, [sp, #4]
 800f166:	6813      	ldr	r3, [r2, #0]
 800f168:	b933      	cbnz	r3, 800f178 <_free_r+0x30>
 800f16a:	6063      	str	r3, [r4, #4]
 800f16c:	6014      	str	r4, [r2, #0]
 800f16e:	b003      	add	sp, #12
 800f170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f174:	f000 baae 	b.w	800f6d4 <__malloc_unlock>
 800f178:	42a3      	cmp	r3, r4
 800f17a:	d908      	bls.n	800f18e <_free_r+0x46>
 800f17c:	6825      	ldr	r5, [r4, #0]
 800f17e:	1961      	adds	r1, r4, r5
 800f180:	428b      	cmp	r3, r1
 800f182:	bf01      	itttt	eq
 800f184:	6819      	ldreq	r1, [r3, #0]
 800f186:	685b      	ldreq	r3, [r3, #4]
 800f188:	1949      	addeq	r1, r1, r5
 800f18a:	6021      	streq	r1, [r4, #0]
 800f18c:	e7ed      	b.n	800f16a <_free_r+0x22>
 800f18e:	461a      	mov	r2, r3
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	b10b      	cbz	r3, 800f198 <_free_r+0x50>
 800f194:	42a3      	cmp	r3, r4
 800f196:	d9fa      	bls.n	800f18e <_free_r+0x46>
 800f198:	6811      	ldr	r1, [r2, #0]
 800f19a:	1855      	adds	r5, r2, r1
 800f19c:	42a5      	cmp	r5, r4
 800f19e:	d10b      	bne.n	800f1b8 <_free_r+0x70>
 800f1a0:	6824      	ldr	r4, [r4, #0]
 800f1a2:	4421      	add	r1, r4
 800f1a4:	1854      	adds	r4, r2, r1
 800f1a6:	42a3      	cmp	r3, r4
 800f1a8:	6011      	str	r1, [r2, #0]
 800f1aa:	d1e0      	bne.n	800f16e <_free_r+0x26>
 800f1ac:	681c      	ldr	r4, [r3, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	6053      	str	r3, [r2, #4]
 800f1b2:	4421      	add	r1, r4
 800f1b4:	6011      	str	r1, [r2, #0]
 800f1b6:	e7da      	b.n	800f16e <_free_r+0x26>
 800f1b8:	d902      	bls.n	800f1c0 <_free_r+0x78>
 800f1ba:	230c      	movs	r3, #12
 800f1bc:	6003      	str	r3, [r0, #0]
 800f1be:	e7d6      	b.n	800f16e <_free_r+0x26>
 800f1c0:	6825      	ldr	r5, [r4, #0]
 800f1c2:	1961      	adds	r1, r4, r5
 800f1c4:	428b      	cmp	r3, r1
 800f1c6:	bf04      	itt	eq
 800f1c8:	6819      	ldreq	r1, [r3, #0]
 800f1ca:	685b      	ldreq	r3, [r3, #4]
 800f1cc:	6063      	str	r3, [r4, #4]
 800f1ce:	bf04      	itt	eq
 800f1d0:	1949      	addeq	r1, r1, r5
 800f1d2:	6021      	streq	r1, [r4, #0]
 800f1d4:	6054      	str	r4, [r2, #4]
 800f1d6:	e7ca      	b.n	800f16e <_free_r+0x26>
 800f1d8:	b003      	add	sp, #12
 800f1da:	bd30      	pop	{r4, r5, pc}
 800f1dc:	20007504 	.word	0x20007504

0800f1e0 <sbrk_aligned>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	4e0e      	ldr	r6, [pc, #56]	; (800f21c <sbrk_aligned+0x3c>)
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	6831      	ldr	r1, [r6, #0]
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	b911      	cbnz	r1, 800f1f2 <sbrk_aligned+0x12>
 800f1ec:	f000 f9f0 	bl	800f5d0 <_sbrk_r>
 800f1f0:	6030      	str	r0, [r6, #0]
 800f1f2:	4621      	mov	r1, r4
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f000 f9eb 	bl	800f5d0 <_sbrk_r>
 800f1fa:	1c43      	adds	r3, r0, #1
 800f1fc:	d00a      	beq.n	800f214 <sbrk_aligned+0x34>
 800f1fe:	1cc4      	adds	r4, r0, #3
 800f200:	f024 0403 	bic.w	r4, r4, #3
 800f204:	42a0      	cmp	r0, r4
 800f206:	d007      	beq.n	800f218 <sbrk_aligned+0x38>
 800f208:	1a21      	subs	r1, r4, r0
 800f20a:	4628      	mov	r0, r5
 800f20c:	f000 f9e0 	bl	800f5d0 <_sbrk_r>
 800f210:	3001      	adds	r0, #1
 800f212:	d101      	bne.n	800f218 <sbrk_aligned+0x38>
 800f214:	f04f 34ff 	mov.w	r4, #4294967295
 800f218:	4620      	mov	r0, r4
 800f21a:	bd70      	pop	{r4, r5, r6, pc}
 800f21c:	20007508 	.word	0x20007508

0800f220 <_malloc_r>:
 800f220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f224:	1ccd      	adds	r5, r1, #3
 800f226:	f025 0503 	bic.w	r5, r5, #3
 800f22a:	3508      	adds	r5, #8
 800f22c:	2d0c      	cmp	r5, #12
 800f22e:	bf38      	it	cc
 800f230:	250c      	movcc	r5, #12
 800f232:	2d00      	cmp	r5, #0
 800f234:	4607      	mov	r7, r0
 800f236:	db01      	blt.n	800f23c <_malloc_r+0x1c>
 800f238:	42a9      	cmp	r1, r5
 800f23a:	d905      	bls.n	800f248 <_malloc_r+0x28>
 800f23c:	230c      	movs	r3, #12
 800f23e:	603b      	str	r3, [r7, #0]
 800f240:	2600      	movs	r6, #0
 800f242:	4630      	mov	r0, r6
 800f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f248:	4e2e      	ldr	r6, [pc, #184]	; (800f304 <_malloc_r+0xe4>)
 800f24a:	f000 fa3d 	bl	800f6c8 <__malloc_lock>
 800f24e:	6833      	ldr	r3, [r6, #0]
 800f250:	461c      	mov	r4, r3
 800f252:	bb34      	cbnz	r4, 800f2a2 <_malloc_r+0x82>
 800f254:	4629      	mov	r1, r5
 800f256:	4638      	mov	r0, r7
 800f258:	f7ff ffc2 	bl	800f1e0 <sbrk_aligned>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	4604      	mov	r4, r0
 800f260:	d14d      	bne.n	800f2fe <_malloc_r+0xde>
 800f262:	6834      	ldr	r4, [r6, #0]
 800f264:	4626      	mov	r6, r4
 800f266:	2e00      	cmp	r6, #0
 800f268:	d140      	bne.n	800f2ec <_malloc_r+0xcc>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	4631      	mov	r1, r6
 800f26e:	4638      	mov	r0, r7
 800f270:	eb04 0803 	add.w	r8, r4, r3
 800f274:	f000 f9ac 	bl	800f5d0 <_sbrk_r>
 800f278:	4580      	cmp	r8, r0
 800f27a:	d13a      	bne.n	800f2f2 <_malloc_r+0xd2>
 800f27c:	6821      	ldr	r1, [r4, #0]
 800f27e:	3503      	adds	r5, #3
 800f280:	1a6d      	subs	r5, r5, r1
 800f282:	f025 0503 	bic.w	r5, r5, #3
 800f286:	3508      	adds	r5, #8
 800f288:	2d0c      	cmp	r5, #12
 800f28a:	bf38      	it	cc
 800f28c:	250c      	movcc	r5, #12
 800f28e:	4629      	mov	r1, r5
 800f290:	4638      	mov	r0, r7
 800f292:	f7ff ffa5 	bl	800f1e0 <sbrk_aligned>
 800f296:	3001      	adds	r0, #1
 800f298:	d02b      	beq.n	800f2f2 <_malloc_r+0xd2>
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	442b      	add	r3, r5
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	e00e      	b.n	800f2c0 <_malloc_r+0xa0>
 800f2a2:	6822      	ldr	r2, [r4, #0]
 800f2a4:	1b52      	subs	r2, r2, r5
 800f2a6:	d41e      	bmi.n	800f2e6 <_malloc_r+0xc6>
 800f2a8:	2a0b      	cmp	r2, #11
 800f2aa:	d916      	bls.n	800f2da <_malloc_r+0xba>
 800f2ac:	1961      	adds	r1, r4, r5
 800f2ae:	42a3      	cmp	r3, r4
 800f2b0:	6025      	str	r5, [r4, #0]
 800f2b2:	bf18      	it	ne
 800f2b4:	6059      	strne	r1, [r3, #4]
 800f2b6:	6863      	ldr	r3, [r4, #4]
 800f2b8:	bf08      	it	eq
 800f2ba:	6031      	streq	r1, [r6, #0]
 800f2bc:	5162      	str	r2, [r4, r5]
 800f2be:	604b      	str	r3, [r1, #4]
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f104 060b 	add.w	r6, r4, #11
 800f2c6:	f000 fa05 	bl	800f6d4 <__malloc_unlock>
 800f2ca:	f026 0607 	bic.w	r6, r6, #7
 800f2ce:	1d23      	adds	r3, r4, #4
 800f2d0:	1af2      	subs	r2, r6, r3
 800f2d2:	d0b6      	beq.n	800f242 <_malloc_r+0x22>
 800f2d4:	1b9b      	subs	r3, r3, r6
 800f2d6:	50a3      	str	r3, [r4, r2]
 800f2d8:	e7b3      	b.n	800f242 <_malloc_r+0x22>
 800f2da:	6862      	ldr	r2, [r4, #4]
 800f2dc:	42a3      	cmp	r3, r4
 800f2de:	bf0c      	ite	eq
 800f2e0:	6032      	streq	r2, [r6, #0]
 800f2e2:	605a      	strne	r2, [r3, #4]
 800f2e4:	e7ec      	b.n	800f2c0 <_malloc_r+0xa0>
 800f2e6:	4623      	mov	r3, r4
 800f2e8:	6864      	ldr	r4, [r4, #4]
 800f2ea:	e7b2      	b.n	800f252 <_malloc_r+0x32>
 800f2ec:	4634      	mov	r4, r6
 800f2ee:	6876      	ldr	r6, [r6, #4]
 800f2f0:	e7b9      	b.n	800f266 <_malloc_r+0x46>
 800f2f2:	230c      	movs	r3, #12
 800f2f4:	603b      	str	r3, [r7, #0]
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	f000 f9ec 	bl	800f6d4 <__malloc_unlock>
 800f2fc:	e7a1      	b.n	800f242 <_malloc_r+0x22>
 800f2fe:	6025      	str	r5, [r4, #0]
 800f300:	e7de      	b.n	800f2c0 <_malloc_r+0xa0>
 800f302:	bf00      	nop
 800f304:	20007504 	.word	0x20007504

0800f308 <__ssputs_r>:
 800f308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f30c:	688e      	ldr	r6, [r1, #8]
 800f30e:	429e      	cmp	r6, r3
 800f310:	4682      	mov	sl, r0
 800f312:	460c      	mov	r4, r1
 800f314:	4690      	mov	r8, r2
 800f316:	461f      	mov	r7, r3
 800f318:	d838      	bhi.n	800f38c <__ssputs_r+0x84>
 800f31a:	898a      	ldrh	r2, [r1, #12]
 800f31c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f320:	d032      	beq.n	800f388 <__ssputs_r+0x80>
 800f322:	6825      	ldr	r5, [r4, #0]
 800f324:	6909      	ldr	r1, [r1, #16]
 800f326:	eba5 0901 	sub.w	r9, r5, r1
 800f32a:	6965      	ldr	r5, [r4, #20]
 800f32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f334:	3301      	adds	r3, #1
 800f336:	444b      	add	r3, r9
 800f338:	106d      	asrs	r5, r5, #1
 800f33a:	429d      	cmp	r5, r3
 800f33c:	bf38      	it	cc
 800f33e:	461d      	movcc	r5, r3
 800f340:	0553      	lsls	r3, r2, #21
 800f342:	d531      	bpl.n	800f3a8 <__ssputs_r+0xa0>
 800f344:	4629      	mov	r1, r5
 800f346:	f7ff ff6b 	bl	800f220 <_malloc_r>
 800f34a:	4606      	mov	r6, r0
 800f34c:	b950      	cbnz	r0, 800f364 <__ssputs_r+0x5c>
 800f34e:	230c      	movs	r3, #12
 800f350:	f8ca 3000 	str.w	r3, [sl]
 800f354:	89a3      	ldrh	r3, [r4, #12]
 800f356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f35a:	81a3      	strh	r3, [r4, #12]
 800f35c:	f04f 30ff 	mov.w	r0, #4294967295
 800f360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f364:	6921      	ldr	r1, [r4, #16]
 800f366:	464a      	mov	r2, r9
 800f368:	f7fc faa0 	bl	800b8ac <memcpy>
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f376:	81a3      	strh	r3, [r4, #12]
 800f378:	6126      	str	r6, [r4, #16]
 800f37a:	6165      	str	r5, [r4, #20]
 800f37c:	444e      	add	r6, r9
 800f37e:	eba5 0509 	sub.w	r5, r5, r9
 800f382:	6026      	str	r6, [r4, #0]
 800f384:	60a5      	str	r5, [r4, #8]
 800f386:	463e      	mov	r6, r7
 800f388:	42be      	cmp	r6, r7
 800f38a:	d900      	bls.n	800f38e <__ssputs_r+0x86>
 800f38c:	463e      	mov	r6, r7
 800f38e:	6820      	ldr	r0, [r4, #0]
 800f390:	4632      	mov	r2, r6
 800f392:	4641      	mov	r1, r8
 800f394:	f000 f97e 	bl	800f694 <memmove>
 800f398:	68a3      	ldr	r3, [r4, #8]
 800f39a:	1b9b      	subs	r3, r3, r6
 800f39c:	60a3      	str	r3, [r4, #8]
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	4433      	add	r3, r6
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	e7db      	b.n	800f360 <__ssputs_r+0x58>
 800f3a8:	462a      	mov	r2, r5
 800f3aa:	f000 f999 	bl	800f6e0 <_realloc_r>
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d1e1      	bne.n	800f378 <__ssputs_r+0x70>
 800f3b4:	6921      	ldr	r1, [r4, #16]
 800f3b6:	4650      	mov	r0, sl
 800f3b8:	f7ff fec6 	bl	800f148 <_free_r>
 800f3bc:	e7c7      	b.n	800f34e <__ssputs_r+0x46>
	...

0800f3c0 <_svfiprintf_r>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	4698      	mov	r8, r3
 800f3c6:	898b      	ldrh	r3, [r1, #12]
 800f3c8:	061b      	lsls	r3, r3, #24
 800f3ca:	b09d      	sub	sp, #116	; 0x74
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	d50e      	bpl.n	800f3f2 <_svfiprintf_r+0x32>
 800f3d4:	690b      	ldr	r3, [r1, #16]
 800f3d6:	b963      	cbnz	r3, 800f3f2 <_svfiprintf_r+0x32>
 800f3d8:	2140      	movs	r1, #64	; 0x40
 800f3da:	f7ff ff21 	bl	800f220 <_malloc_r>
 800f3de:	6028      	str	r0, [r5, #0]
 800f3e0:	6128      	str	r0, [r5, #16]
 800f3e2:	b920      	cbnz	r0, 800f3ee <_svfiprintf_r+0x2e>
 800f3e4:	230c      	movs	r3, #12
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e0d1      	b.n	800f592 <_svfiprintf_r+0x1d2>
 800f3ee:	2340      	movs	r3, #64	; 0x40
 800f3f0:	616b      	str	r3, [r5, #20]
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f6:	2320      	movs	r3, #32
 800f3f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f400:	2330      	movs	r3, #48	; 0x30
 800f402:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5ac <_svfiprintf_r+0x1ec>
 800f406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f40a:	f04f 0901 	mov.w	r9, #1
 800f40e:	4623      	mov	r3, r4
 800f410:	469a      	mov	sl, r3
 800f412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f416:	b10a      	cbz	r2, 800f41c <_svfiprintf_r+0x5c>
 800f418:	2a25      	cmp	r2, #37	; 0x25
 800f41a:	d1f9      	bne.n	800f410 <_svfiprintf_r+0x50>
 800f41c:	ebba 0b04 	subs.w	fp, sl, r4
 800f420:	d00b      	beq.n	800f43a <_svfiprintf_r+0x7a>
 800f422:	465b      	mov	r3, fp
 800f424:	4622      	mov	r2, r4
 800f426:	4629      	mov	r1, r5
 800f428:	4638      	mov	r0, r7
 800f42a:	f7ff ff6d 	bl	800f308 <__ssputs_r>
 800f42e:	3001      	adds	r0, #1
 800f430:	f000 80aa 	beq.w	800f588 <_svfiprintf_r+0x1c8>
 800f434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f436:	445a      	add	r2, fp
 800f438:	9209      	str	r2, [sp, #36]	; 0x24
 800f43a:	f89a 3000 	ldrb.w	r3, [sl]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 80a2 	beq.w	800f588 <_svfiprintf_r+0x1c8>
 800f444:	2300      	movs	r3, #0
 800f446:	f04f 32ff 	mov.w	r2, #4294967295
 800f44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f44e:	f10a 0a01 	add.w	sl, sl, #1
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	9307      	str	r3, [sp, #28]
 800f456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f45a:	931a      	str	r3, [sp, #104]	; 0x68
 800f45c:	4654      	mov	r4, sl
 800f45e:	2205      	movs	r2, #5
 800f460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f464:	4851      	ldr	r0, [pc, #324]	; (800f5ac <_svfiprintf_r+0x1ec>)
 800f466:	f7f0 fe93 	bl	8000190 <memchr>
 800f46a:	9a04      	ldr	r2, [sp, #16]
 800f46c:	b9d8      	cbnz	r0, 800f4a6 <_svfiprintf_r+0xe6>
 800f46e:	06d0      	lsls	r0, r2, #27
 800f470:	bf44      	itt	mi
 800f472:	2320      	movmi	r3, #32
 800f474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f478:	0711      	lsls	r1, r2, #28
 800f47a:	bf44      	itt	mi
 800f47c:	232b      	movmi	r3, #43	; 0x2b
 800f47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f482:	f89a 3000 	ldrb.w	r3, [sl]
 800f486:	2b2a      	cmp	r3, #42	; 0x2a
 800f488:	d015      	beq.n	800f4b6 <_svfiprintf_r+0xf6>
 800f48a:	9a07      	ldr	r2, [sp, #28]
 800f48c:	4654      	mov	r4, sl
 800f48e:	2000      	movs	r0, #0
 800f490:	f04f 0c0a 	mov.w	ip, #10
 800f494:	4621      	mov	r1, r4
 800f496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f49a:	3b30      	subs	r3, #48	; 0x30
 800f49c:	2b09      	cmp	r3, #9
 800f49e:	d94e      	bls.n	800f53e <_svfiprintf_r+0x17e>
 800f4a0:	b1b0      	cbz	r0, 800f4d0 <_svfiprintf_r+0x110>
 800f4a2:	9207      	str	r2, [sp, #28]
 800f4a4:	e014      	b.n	800f4d0 <_svfiprintf_r+0x110>
 800f4a6:	eba0 0308 	sub.w	r3, r0, r8
 800f4aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	9304      	str	r3, [sp, #16]
 800f4b2:	46a2      	mov	sl, r4
 800f4b4:	e7d2      	b.n	800f45c <_svfiprintf_r+0x9c>
 800f4b6:	9b03      	ldr	r3, [sp, #12]
 800f4b8:	1d19      	adds	r1, r3, #4
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	9103      	str	r1, [sp, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	bfbb      	ittet	lt
 800f4c2:	425b      	neglt	r3, r3
 800f4c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f4c8:	9307      	strge	r3, [sp, #28]
 800f4ca:	9307      	strlt	r3, [sp, #28]
 800f4cc:	bfb8      	it	lt
 800f4ce:	9204      	strlt	r2, [sp, #16]
 800f4d0:	7823      	ldrb	r3, [r4, #0]
 800f4d2:	2b2e      	cmp	r3, #46	; 0x2e
 800f4d4:	d10c      	bne.n	800f4f0 <_svfiprintf_r+0x130>
 800f4d6:	7863      	ldrb	r3, [r4, #1]
 800f4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f4da:	d135      	bne.n	800f548 <_svfiprintf_r+0x188>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	1d1a      	adds	r2, r3, #4
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	9203      	str	r2, [sp, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	bfb8      	it	lt
 800f4e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4ec:	3402      	adds	r4, #2
 800f4ee:	9305      	str	r3, [sp, #20]
 800f4f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5bc <_svfiprintf_r+0x1fc>
 800f4f4:	7821      	ldrb	r1, [r4, #0]
 800f4f6:	2203      	movs	r2, #3
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	f7f0 fe49 	bl	8000190 <memchr>
 800f4fe:	b140      	cbz	r0, 800f512 <_svfiprintf_r+0x152>
 800f500:	2340      	movs	r3, #64	; 0x40
 800f502:	eba0 000a 	sub.w	r0, r0, sl
 800f506:	fa03 f000 	lsl.w	r0, r3, r0
 800f50a:	9b04      	ldr	r3, [sp, #16]
 800f50c:	4303      	orrs	r3, r0
 800f50e:	3401      	adds	r4, #1
 800f510:	9304      	str	r3, [sp, #16]
 800f512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f516:	4826      	ldr	r0, [pc, #152]	; (800f5b0 <_svfiprintf_r+0x1f0>)
 800f518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f51c:	2206      	movs	r2, #6
 800f51e:	f7f0 fe37 	bl	8000190 <memchr>
 800f522:	2800      	cmp	r0, #0
 800f524:	d038      	beq.n	800f598 <_svfiprintf_r+0x1d8>
 800f526:	4b23      	ldr	r3, [pc, #140]	; (800f5b4 <_svfiprintf_r+0x1f4>)
 800f528:	bb1b      	cbnz	r3, 800f572 <_svfiprintf_r+0x1b2>
 800f52a:	9b03      	ldr	r3, [sp, #12]
 800f52c:	3307      	adds	r3, #7
 800f52e:	f023 0307 	bic.w	r3, r3, #7
 800f532:	3308      	adds	r3, #8
 800f534:	9303      	str	r3, [sp, #12]
 800f536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f538:	4433      	add	r3, r6
 800f53a:	9309      	str	r3, [sp, #36]	; 0x24
 800f53c:	e767      	b.n	800f40e <_svfiprintf_r+0x4e>
 800f53e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f542:	460c      	mov	r4, r1
 800f544:	2001      	movs	r0, #1
 800f546:	e7a5      	b.n	800f494 <_svfiprintf_r+0xd4>
 800f548:	2300      	movs	r3, #0
 800f54a:	3401      	adds	r4, #1
 800f54c:	9305      	str	r3, [sp, #20]
 800f54e:	4619      	mov	r1, r3
 800f550:	f04f 0c0a 	mov.w	ip, #10
 800f554:	4620      	mov	r0, r4
 800f556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f55a:	3a30      	subs	r2, #48	; 0x30
 800f55c:	2a09      	cmp	r2, #9
 800f55e:	d903      	bls.n	800f568 <_svfiprintf_r+0x1a8>
 800f560:	2b00      	cmp	r3, #0
 800f562:	d0c5      	beq.n	800f4f0 <_svfiprintf_r+0x130>
 800f564:	9105      	str	r1, [sp, #20]
 800f566:	e7c3      	b.n	800f4f0 <_svfiprintf_r+0x130>
 800f568:	fb0c 2101 	mla	r1, ip, r1, r2
 800f56c:	4604      	mov	r4, r0
 800f56e:	2301      	movs	r3, #1
 800f570:	e7f0      	b.n	800f554 <_svfiprintf_r+0x194>
 800f572:	ab03      	add	r3, sp, #12
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	462a      	mov	r2, r5
 800f578:	4b0f      	ldr	r3, [pc, #60]	; (800f5b8 <_svfiprintf_r+0x1f8>)
 800f57a:	a904      	add	r1, sp, #16
 800f57c:	4638      	mov	r0, r7
 800f57e:	f7fc fa4b 	bl	800ba18 <_printf_float>
 800f582:	1c42      	adds	r2, r0, #1
 800f584:	4606      	mov	r6, r0
 800f586:	d1d6      	bne.n	800f536 <_svfiprintf_r+0x176>
 800f588:	89ab      	ldrh	r3, [r5, #12]
 800f58a:	065b      	lsls	r3, r3, #25
 800f58c:	f53f af2c 	bmi.w	800f3e8 <_svfiprintf_r+0x28>
 800f590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f592:	b01d      	add	sp, #116	; 0x74
 800f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	ab03      	add	r3, sp, #12
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	462a      	mov	r2, r5
 800f59e:	4b06      	ldr	r3, [pc, #24]	; (800f5b8 <_svfiprintf_r+0x1f8>)
 800f5a0:	a904      	add	r1, sp, #16
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	f7fc fcdc 	bl	800bf60 <_printf_i>
 800f5a8:	e7eb      	b.n	800f582 <_svfiprintf_r+0x1c2>
 800f5aa:	bf00      	nop
 800f5ac:	080161dc 	.word	0x080161dc
 800f5b0:	080161e6 	.word	0x080161e6
 800f5b4:	0800ba19 	.word	0x0800ba19
 800f5b8:	0800f309 	.word	0x0800f309
 800f5bc:	080161e2 	.word	0x080161e2

0800f5c0 <nan>:
 800f5c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f5c8 <nan+0x8>
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	00000000 	.word	0x00000000
 800f5cc:	7ff80000 	.word	0x7ff80000

0800f5d0 <_sbrk_r>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	4d06      	ldr	r5, [pc, #24]	; (800f5ec <_sbrk_r+0x1c>)
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	4608      	mov	r0, r1
 800f5da:	602b      	str	r3, [r5, #0]
 800f5dc:	f7f2 fa5c 	bl	8001a98 <_sbrk>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d102      	bne.n	800f5ea <_sbrk_r+0x1a>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b103      	cbz	r3, 800f5ea <_sbrk_r+0x1a>
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	2000750c 	.word	0x2000750c

0800f5f0 <strncmp>:
 800f5f0:	b510      	push	{r4, lr}
 800f5f2:	b17a      	cbz	r2, 800f614 <strncmp+0x24>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	3901      	subs	r1, #1
 800f5f8:	1884      	adds	r4, r0, r2
 800f5fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f5fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f602:	4290      	cmp	r0, r2
 800f604:	d101      	bne.n	800f60a <strncmp+0x1a>
 800f606:	42a3      	cmp	r3, r4
 800f608:	d101      	bne.n	800f60e <strncmp+0x1e>
 800f60a:	1a80      	subs	r0, r0, r2
 800f60c:	bd10      	pop	{r4, pc}
 800f60e:	2800      	cmp	r0, #0
 800f610:	d1f3      	bne.n	800f5fa <strncmp+0xa>
 800f612:	e7fa      	b.n	800f60a <strncmp+0x1a>
 800f614:	4610      	mov	r0, r2
 800f616:	e7f9      	b.n	800f60c <strncmp+0x1c>

0800f618 <__ascii_wctomb>:
 800f618:	b149      	cbz	r1, 800f62e <__ascii_wctomb+0x16>
 800f61a:	2aff      	cmp	r2, #255	; 0xff
 800f61c:	bf85      	ittet	hi
 800f61e:	238a      	movhi	r3, #138	; 0x8a
 800f620:	6003      	strhi	r3, [r0, #0]
 800f622:	700a      	strbls	r2, [r1, #0]
 800f624:	f04f 30ff 	movhi.w	r0, #4294967295
 800f628:	bf98      	it	ls
 800f62a:	2001      	movls	r0, #1
 800f62c:	4770      	bx	lr
 800f62e:	4608      	mov	r0, r1
 800f630:	4770      	bx	lr
	...

0800f634 <__assert_func>:
 800f634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f636:	4614      	mov	r4, r2
 800f638:	461a      	mov	r2, r3
 800f63a:	4b09      	ldr	r3, [pc, #36]	; (800f660 <__assert_func+0x2c>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4605      	mov	r5, r0
 800f640:	68d8      	ldr	r0, [r3, #12]
 800f642:	b14c      	cbz	r4, 800f658 <__assert_func+0x24>
 800f644:	4b07      	ldr	r3, [pc, #28]	; (800f664 <__assert_func+0x30>)
 800f646:	9100      	str	r1, [sp, #0]
 800f648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f64c:	4906      	ldr	r1, [pc, #24]	; (800f668 <__assert_func+0x34>)
 800f64e:	462b      	mov	r3, r5
 800f650:	f000 f80e 	bl	800f670 <fiprintf>
 800f654:	f000 fa8c 	bl	800fb70 <abort>
 800f658:	4b04      	ldr	r3, [pc, #16]	; (800f66c <__assert_func+0x38>)
 800f65a:	461c      	mov	r4, r3
 800f65c:	e7f3      	b.n	800f646 <__assert_func+0x12>
 800f65e:	bf00      	nop
 800f660:	200046e8 	.word	0x200046e8
 800f664:	080161ed 	.word	0x080161ed
 800f668:	080161fa 	.word	0x080161fa
 800f66c:	08016228 	.word	0x08016228

0800f670 <fiprintf>:
 800f670:	b40e      	push	{r1, r2, r3}
 800f672:	b503      	push	{r0, r1, lr}
 800f674:	4601      	mov	r1, r0
 800f676:	ab03      	add	r3, sp, #12
 800f678:	4805      	ldr	r0, [pc, #20]	; (800f690 <fiprintf+0x20>)
 800f67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f67e:	6800      	ldr	r0, [r0, #0]
 800f680:	9301      	str	r3, [sp, #4]
 800f682:	f000 f885 	bl	800f790 <_vfiprintf_r>
 800f686:	b002      	add	sp, #8
 800f688:	f85d eb04 	ldr.w	lr, [sp], #4
 800f68c:	b003      	add	sp, #12
 800f68e:	4770      	bx	lr
 800f690:	200046e8 	.word	0x200046e8

0800f694 <memmove>:
 800f694:	4288      	cmp	r0, r1
 800f696:	b510      	push	{r4, lr}
 800f698:	eb01 0402 	add.w	r4, r1, r2
 800f69c:	d902      	bls.n	800f6a4 <memmove+0x10>
 800f69e:	4284      	cmp	r4, r0
 800f6a0:	4623      	mov	r3, r4
 800f6a2:	d807      	bhi.n	800f6b4 <memmove+0x20>
 800f6a4:	1e43      	subs	r3, r0, #1
 800f6a6:	42a1      	cmp	r1, r4
 800f6a8:	d008      	beq.n	800f6bc <memmove+0x28>
 800f6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6b2:	e7f8      	b.n	800f6a6 <memmove+0x12>
 800f6b4:	4402      	add	r2, r0
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	428a      	cmp	r2, r1
 800f6ba:	d100      	bne.n	800f6be <memmove+0x2a>
 800f6bc:	bd10      	pop	{r4, pc}
 800f6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6c6:	e7f7      	b.n	800f6b8 <memmove+0x24>

0800f6c8 <__malloc_lock>:
 800f6c8:	4801      	ldr	r0, [pc, #4]	; (800f6d0 <__malloc_lock+0x8>)
 800f6ca:	f000 bc11 	b.w	800fef0 <__retarget_lock_acquire_recursive>
 800f6ce:	bf00      	nop
 800f6d0:	20007510 	.word	0x20007510

0800f6d4 <__malloc_unlock>:
 800f6d4:	4801      	ldr	r0, [pc, #4]	; (800f6dc <__malloc_unlock+0x8>)
 800f6d6:	f000 bc0c 	b.w	800fef2 <__retarget_lock_release_recursive>
 800f6da:	bf00      	nop
 800f6dc:	20007510 	.word	0x20007510

0800f6e0 <_realloc_r>:
 800f6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e4:	4680      	mov	r8, r0
 800f6e6:	4614      	mov	r4, r2
 800f6e8:	460e      	mov	r6, r1
 800f6ea:	b921      	cbnz	r1, 800f6f6 <_realloc_r+0x16>
 800f6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	f7ff bd95 	b.w	800f220 <_malloc_r>
 800f6f6:	b92a      	cbnz	r2, 800f704 <_realloc_r+0x24>
 800f6f8:	f7ff fd26 	bl	800f148 <_free_r>
 800f6fc:	4625      	mov	r5, r4
 800f6fe:	4628      	mov	r0, r5
 800f700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f704:	f000 fc5c 	bl	800ffc0 <_malloc_usable_size_r>
 800f708:	4284      	cmp	r4, r0
 800f70a:	4607      	mov	r7, r0
 800f70c:	d802      	bhi.n	800f714 <_realloc_r+0x34>
 800f70e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f712:	d812      	bhi.n	800f73a <_realloc_r+0x5a>
 800f714:	4621      	mov	r1, r4
 800f716:	4640      	mov	r0, r8
 800f718:	f7ff fd82 	bl	800f220 <_malloc_r>
 800f71c:	4605      	mov	r5, r0
 800f71e:	2800      	cmp	r0, #0
 800f720:	d0ed      	beq.n	800f6fe <_realloc_r+0x1e>
 800f722:	42bc      	cmp	r4, r7
 800f724:	4622      	mov	r2, r4
 800f726:	4631      	mov	r1, r6
 800f728:	bf28      	it	cs
 800f72a:	463a      	movcs	r2, r7
 800f72c:	f7fc f8be 	bl	800b8ac <memcpy>
 800f730:	4631      	mov	r1, r6
 800f732:	4640      	mov	r0, r8
 800f734:	f7ff fd08 	bl	800f148 <_free_r>
 800f738:	e7e1      	b.n	800f6fe <_realloc_r+0x1e>
 800f73a:	4635      	mov	r5, r6
 800f73c:	e7df      	b.n	800f6fe <_realloc_r+0x1e>

0800f73e <__sfputc_r>:
 800f73e:	6893      	ldr	r3, [r2, #8]
 800f740:	3b01      	subs	r3, #1
 800f742:	2b00      	cmp	r3, #0
 800f744:	b410      	push	{r4}
 800f746:	6093      	str	r3, [r2, #8]
 800f748:	da08      	bge.n	800f75c <__sfputc_r+0x1e>
 800f74a:	6994      	ldr	r4, [r2, #24]
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	db01      	blt.n	800f754 <__sfputc_r+0x16>
 800f750:	290a      	cmp	r1, #10
 800f752:	d103      	bne.n	800f75c <__sfputc_r+0x1e>
 800f754:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f758:	f000 b94a 	b.w	800f9f0 <__swbuf_r>
 800f75c:	6813      	ldr	r3, [r2, #0]
 800f75e:	1c58      	adds	r0, r3, #1
 800f760:	6010      	str	r0, [r2, #0]
 800f762:	7019      	strb	r1, [r3, #0]
 800f764:	4608      	mov	r0, r1
 800f766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <__sfputs_r>:
 800f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76e:	4606      	mov	r6, r0
 800f770:	460f      	mov	r7, r1
 800f772:	4614      	mov	r4, r2
 800f774:	18d5      	adds	r5, r2, r3
 800f776:	42ac      	cmp	r4, r5
 800f778:	d101      	bne.n	800f77e <__sfputs_r+0x12>
 800f77a:	2000      	movs	r0, #0
 800f77c:	e007      	b.n	800f78e <__sfputs_r+0x22>
 800f77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f782:	463a      	mov	r2, r7
 800f784:	4630      	mov	r0, r6
 800f786:	f7ff ffda 	bl	800f73e <__sfputc_r>
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	d1f3      	bne.n	800f776 <__sfputs_r+0xa>
 800f78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f790 <_vfiprintf_r>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	460d      	mov	r5, r1
 800f796:	b09d      	sub	sp, #116	; 0x74
 800f798:	4614      	mov	r4, r2
 800f79a:	4698      	mov	r8, r3
 800f79c:	4606      	mov	r6, r0
 800f79e:	b118      	cbz	r0, 800f7a8 <_vfiprintf_r+0x18>
 800f7a0:	6983      	ldr	r3, [r0, #24]
 800f7a2:	b90b      	cbnz	r3, 800f7a8 <_vfiprintf_r+0x18>
 800f7a4:	f000 fb06 	bl	800fdb4 <__sinit>
 800f7a8:	4b89      	ldr	r3, [pc, #548]	; (800f9d0 <_vfiprintf_r+0x240>)
 800f7aa:	429d      	cmp	r5, r3
 800f7ac:	d11b      	bne.n	800f7e6 <_vfiprintf_r+0x56>
 800f7ae:	6875      	ldr	r5, [r6, #4]
 800f7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7b2:	07d9      	lsls	r1, r3, #31
 800f7b4:	d405      	bmi.n	800f7c2 <_vfiprintf_r+0x32>
 800f7b6:	89ab      	ldrh	r3, [r5, #12]
 800f7b8:	059a      	lsls	r2, r3, #22
 800f7ba:	d402      	bmi.n	800f7c2 <_vfiprintf_r+0x32>
 800f7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7be:	f000 fb97 	bl	800fef0 <__retarget_lock_acquire_recursive>
 800f7c2:	89ab      	ldrh	r3, [r5, #12]
 800f7c4:	071b      	lsls	r3, r3, #28
 800f7c6:	d501      	bpl.n	800f7cc <_vfiprintf_r+0x3c>
 800f7c8:	692b      	ldr	r3, [r5, #16]
 800f7ca:	b9eb      	cbnz	r3, 800f808 <_vfiprintf_r+0x78>
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f000 f960 	bl	800fa94 <__swsetup_r>
 800f7d4:	b1c0      	cbz	r0, 800f808 <_vfiprintf_r+0x78>
 800f7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7d8:	07dc      	lsls	r4, r3, #31
 800f7da:	d50e      	bpl.n	800f7fa <_vfiprintf_r+0x6a>
 800f7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e0:	b01d      	add	sp, #116	; 0x74
 800f7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e6:	4b7b      	ldr	r3, [pc, #492]	; (800f9d4 <_vfiprintf_r+0x244>)
 800f7e8:	429d      	cmp	r5, r3
 800f7ea:	d101      	bne.n	800f7f0 <_vfiprintf_r+0x60>
 800f7ec:	68b5      	ldr	r5, [r6, #8]
 800f7ee:	e7df      	b.n	800f7b0 <_vfiprintf_r+0x20>
 800f7f0:	4b79      	ldr	r3, [pc, #484]	; (800f9d8 <_vfiprintf_r+0x248>)
 800f7f2:	429d      	cmp	r5, r3
 800f7f4:	bf08      	it	eq
 800f7f6:	68f5      	ldreq	r5, [r6, #12]
 800f7f8:	e7da      	b.n	800f7b0 <_vfiprintf_r+0x20>
 800f7fa:	89ab      	ldrh	r3, [r5, #12]
 800f7fc:	0598      	lsls	r0, r3, #22
 800f7fe:	d4ed      	bmi.n	800f7dc <_vfiprintf_r+0x4c>
 800f800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f802:	f000 fb76 	bl	800fef2 <__retarget_lock_release_recursive>
 800f806:	e7e9      	b.n	800f7dc <_vfiprintf_r+0x4c>
 800f808:	2300      	movs	r3, #0
 800f80a:	9309      	str	r3, [sp, #36]	; 0x24
 800f80c:	2320      	movs	r3, #32
 800f80e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f812:	f8cd 800c 	str.w	r8, [sp, #12]
 800f816:	2330      	movs	r3, #48	; 0x30
 800f818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9dc <_vfiprintf_r+0x24c>
 800f81c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f820:	f04f 0901 	mov.w	r9, #1
 800f824:	4623      	mov	r3, r4
 800f826:	469a      	mov	sl, r3
 800f828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f82c:	b10a      	cbz	r2, 800f832 <_vfiprintf_r+0xa2>
 800f82e:	2a25      	cmp	r2, #37	; 0x25
 800f830:	d1f9      	bne.n	800f826 <_vfiprintf_r+0x96>
 800f832:	ebba 0b04 	subs.w	fp, sl, r4
 800f836:	d00b      	beq.n	800f850 <_vfiprintf_r+0xc0>
 800f838:	465b      	mov	r3, fp
 800f83a:	4622      	mov	r2, r4
 800f83c:	4629      	mov	r1, r5
 800f83e:	4630      	mov	r0, r6
 800f840:	f7ff ff94 	bl	800f76c <__sfputs_r>
 800f844:	3001      	adds	r0, #1
 800f846:	f000 80aa 	beq.w	800f99e <_vfiprintf_r+0x20e>
 800f84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f84c:	445a      	add	r2, fp
 800f84e:	9209      	str	r2, [sp, #36]	; 0x24
 800f850:	f89a 3000 	ldrb.w	r3, [sl]
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 80a2 	beq.w	800f99e <_vfiprintf_r+0x20e>
 800f85a:	2300      	movs	r3, #0
 800f85c:	f04f 32ff 	mov.w	r2, #4294967295
 800f860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f864:	f10a 0a01 	add.w	sl, sl, #1
 800f868:	9304      	str	r3, [sp, #16]
 800f86a:	9307      	str	r3, [sp, #28]
 800f86c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f870:	931a      	str	r3, [sp, #104]	; 0x68
 800f872:	4654      	mov	r4, sl
 800f874:	2205      	movs	r2, #5
 800f876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f87a:	4858      	ldr	r0, [pc, #352]	; (800f9dc <_vfiprintf_r+0x24c>)
 800f87c:	f7f0 fc88 	bl	8000190 <memchr>
 800f880:	9a04      	ldr	r2, [sp, #16]
 800f882:	b9d8      	cbnz	r0, 800f8bc <_vfiprintf_r+0x12c>
 800f884:	06d1      	lsls	r1, r2, #27
 800f886:	bf44      	itt	mi
 800f888:	2320      	movmi	r3, #32
 800f88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f88e:	0713      	lsls	r3, r2, #28
 800f890:	bf44      	itt	mi
 800f892:	232b      	movmi	r3, #43	; 0x2b
 800f894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f898:	f89a 3000 	ldrb.w	r3, [sl]
 800f89c:	2b2a      	cmp	r3, #42	; 0x2a
 800f89e:	d015      	beq.n	800f8cc <_vfiprintf_r+0x13c>
 800f8a0:	9a07      	ldr	r2, [sp, #28]
 800f8a2:	4654      	mov	r4, sl
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	f04f 0c0a 	mov.w	ip, #10
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8b0:	3b30      	subs	r3, #48	; 0x30
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d94e      	bls.n	800f954 <_vfiprintf_r+0x1c4>
 800f8b6:	b1b0      	cbz	r0, 800f8e6 <_vfiprintf_r+0x156>
 800f8b8:	9207      	str	r2, [sp, #28]
 800f8ba:	e014      	b.n	800f8e6 <_vfiprintf_r+0x156>
 800f8bc:	eba0 0308 	sub.w	r3, r0, r8
 800f8c0:	fa09 f303 	lsl.w	r3, r9, r3
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	9304      	str	r3, [sp, #16]
 800f8c8:	46a2      	mov	sl, r4
 800f8ca:	e7d2      	b.n	800f872 <_vfiprintf_r+0xe2>
 800f8cc:	9b03      	ldr	r3, [sp, #12]
 800f8ce:	1d19      	adds	r1, r3, #4
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	9103      	str	r1, [sp, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	bfbb      	ittet	lt
 800f8d8:	425b      	neglt	r3, r3
 800f8da:	f042 0202 	orrlt.w	r2, r2, #2
 800f8de:	9307      	strge	r3, [sp, #28]
 800f8e0:	9307      	strlt	r3, [sp, #28]
 800f8e2:	bfb8      	it	lt
 800f8e4:	9204      	strlt	r2, [sp, #16]
 800f8e6:	7823      	ldrb	r3, [r4, #0]
 800f8e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8ea:	d10c      	bne.n	800f906 <_vfiprintf_r+0x176>
 800f8ec:	7863      	ldrb	r3, [r4, #1]
 800f8ee:	2b2a      	cmp	r3, #42	; 0x2a
 800f8f0:	d135      	bne.n	800f95e <_vfiprintf_r+0x1ce>
 800f8f2:	9b03      	ldr	r3, [sp, #12]
 800f8f4:	1d1a      	adds	r2, r3, #4
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	9203      	str	r2, [sp, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	bfb8      	it	lt
 800f8fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800f902:	3402      	adds	r4, #2
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f9ec <_vfiprintf_r+0x25c>
 800f90a:	7821      	ldrb	r1, [r4, #0]
 800f90c:	2203      	movs	r2, #3
 800f90e:	4650      	mov	r0, sl
 800f910:	f7f0 fc3e 	bl	8000190 <memchr>
 800f914:	b140      	cbz	r0, 800f928 <_vfiprintf_r+0x198>
 800f916:	2340      	movs	r3, #64	; 0x40
 800f918:	eba0 000a 	sub.w	r0, r0, sl
 800f91c:	fa03 f000 	lsl.w	r0, r3, r0
 800f920:	9b04      	ldr	r3, [sp, #16]
 800f922:	4303      	orrs	r3, r0
 800f924:	3401      	adds	r4, #1
 800f926:	9304      	str	r3, [sp, #16]
 800f928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f92c:	482c      	ldr	r0, [pc, #176]	; (800f9e0 <_vfiprintf_r+0x250>)
 800f92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f932:	2206      	movs	r2, #6
 800f934:	f7f0 fc2c 	bl	8000190 <memchr>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d03f      	beq.n	800f9bc <_vfiprintf_r+0x22c>
 800f93c:	4b29      	ldr	r3, [pc, #164]	; (800f9e4 <_vfiprintf_r+0x254>)
 800f93e:	bb1b      	cbnz	r3, 800f988 <_vfiprintf_r+0x1f8>
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	3307      	adds	r3, #7
 800f944:	f023 0307 	bic.w	r3, r3, #7
 800f948:	3308      	adds	r3, #8
 800f94a:	9303      	str	r3, [sp, #12]
 800f94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94e:	443b      	add	r3, r7
 800f950:	9309      	str	r3, [sp, #36]	; 0x24
 800f952:	e767      	b.n	800f824 <_vfiprintf_r+0x94>
 800f954:	fb0c 3202 	mla	r2, ip, r2, r3
 800f958:	460c      	mov	r4, r1
 800f95a:	2001      	movs	r0, #1
 800f95c:	e7a5      	b.n	800f8aa <_vfiprintf_r+0x11a>
 800f95e:	2300      	movs	r3, #0
 800f960:	3401      	adds	r4, #1
 800f962:	9305      	str	r3, [sp, #20]
 800f964:	4619      	mov	r1, r3
 800f966:	f04f 0c0a 	mov.w	ip, #10
 800f96a:	4620      	mov	r0, r4
 800f96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f970:	3a30      	subs	r2, #48	; 0x30
 800f972:	2a09      	cmp	r2, #9
 800f974:	d903      	bls.n	800f97e <_vfiprintf_r+0x1ee>
 800f976:	2b00      	cmp	r3, #0
 800f978:	d0c5      	beq.n	800f906 <_vfiprintf_r+0x176>
 800f97a:	9105      	str	r1, [sp, #20]
 800f97c:	e7c3      	b.n	800f906 <_vfiprintf_r+0x176>
 800f97e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f982:	4604      	mov	r4, r0
 800f984:	2301      	movs	r3, #1
 800f986:	e7f0      	b.n	800f96a <_vfiprintf_r+0x1da>
 800f988:	ab03      	add	r3, sp, #12
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	462a      	mov	r2, r5
 800f98e:	4b16      	ldr	r3, [pc, #88]	; (800f9e8 <_vfiprintf_r+0x258>)
 800f990:	a904      	add	r1, sp, #16
 800f992:	4630      	mov	r0, r6
 800f994:	f7fc f840 	bl	800ba18 <_printf_float>
 800f998:	4607      	mov	r7, r0
 800f99a:	1c78      	adds	r0, r7, #1
 800f99c:	d1d6      	bne.n	800f94c <_vfiprintf_r+0x1bc>
 800f99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9a0:	07d9      	lsls	r1, r3, #31
 800f9a2:	d405      	bmi.n	800f9b0 <_vfiprintf_r+0x220>
 800f9a4:	89ab      	ldrh	r3, [r5, #12]
 800f9a6:	059a      	lsls	r2, r3, #22
 800f9a8:	d402      	bmi.n	800f9b0 <_vfiprintf_r+0x220>
 800f9aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9ac:	f000 faa1 	bl	800fef2 <__retarget_lock_release_recursive>
 800f9b0:	89ab      	ldrh	r3, [r5, #12]
 800f9b2:	065b      	lsls	r3, r3, #25
 800f9b4:	f53f af12 	bmi.w	800f7dc <_vfiprintf_r+0x4c>
 800f9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9ba:	e711      	b.n	800f7e0 <_vfiprintf_r+0x50>
 800f9bc:	ab03      	add	r3, sp, #12
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	462a      	mov	r2, r5
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <_vfiprintf_r+0x258>)
 800f9c4:	a904      	add	r1, sp, #16
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f7fc faca 	bl	800bf60 <_printf_i>
 800f9cc:	e7e4      	b.n	800f998 <_vfiprintf_r+0x208>
 800f9ce:	bf00      	nop
 800f9d0:	0801624c 	.word	0x0801624c
 800f9d4:	0801626c 	.word	0x0801626c
 800f9d8:	0801622c 	.word	0x0801622c
 800f9dc:	080161dc 	.word	0x080161dc
 800f9e0:	080161e6 	.word	0x080161e6
 800f9e4:	0800ba19 	.word	0x0800ba19
 800f9e8:	0800f76d 	.word	0x0800f76d
 800f9ec:	080161e2 	.word	0x080161e2

0800f9f0 <__swbuf_r>:
 800f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f2:	460e      	mov	r6, r1
 800f9f4:	4614      	mov	r4, r2
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	b118      	cbz	r0, 800fa02 <__swbuf_r+0x12>
 800f9fa:	6983      	ldr	r3, [r0, #24]
 800f9fc:	b90b      	cbnz	r3, 800fa02 <__swbuf_r+0x12>
 800f9fe:	f000 f9d9 	bl	800fdb4 <__sinit>
 800fa02:	4b21      	ldr	r3, [pc, #132]	; (800fa88 <__swbuf_r+0x98>)
 800fa04:	429c      	cmp	r4, r3
 800fa06:	d12b      	bne.n	800fa60 <__swbuf_r+0x70>
 800fa08:	686c      	ldr	r4, [r5, #4]
 800fa0a:	69a3      	ldr	r3, [r4, #24]
 800fa0c:	60a3      	str	r3, [r4, #8]
 800fa0e:	89a3      	ldrh	r3, [r4, #12]
 800fa10:	071a      	lsls	r2, r3, #28
 800fa12:	d52f      	bpl.n	800fa74 <__swbuf_r+0x84>
 800fa14:	6923      	ldr	r3, [r4, #16]
 800fa16:	b36b      	cbz	r3, 800fa74 <__swbuf_r+0x84>
 800fa18:	6923      	ldr	r3, [r4, #16]
 800fa1a:	6820      	ldr	r0, [r4, #0]
 800fa1c:	1ac0      	subs	r0, r0, r3
 800fa1e:	6963      	ldr	r3, [r4, #20]
 800fa20:	b2f6      	uxtb	r6, r6
 800fa22:	4283      	cmp	r3, r0
 800fa24:	4637      	mov	r7, r6
 800fa26:	dc04      	bgt.n	800fa32 <__swbuf_r+0x42>
 800fa28:	4621      	mov	r1, r4
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f000 f92e 	bl	800fc8c <_fflush_r>
 800fa30:	bb30      	cbnz	r0, 800fa80 <__swbuf_r+0x90>
 800fa32:	68a3      	ldr	r3, [r4, #8]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	60a3      	str	r3, [r4, #8]
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	6022      	str	r2, [r4, #0]
 800fa3e:	701e      	strb	r6, [r3, #0]
 800fa40:	6963      	ldr	r3, [r4, #20]
 800fa42:	3001      	adds	r0, #1
 800fa44:	4283      	cmp	r3, r0
 800fa46:	d004      	beq.n	800fa52 <__swbuf_r+0x62>
 800fa48:	89a3      	ldrh	r3, [r4, #12]
 800fa4a:	07db      	lsls	r3, r3, #31
 800fa4c:	d506      	bpl.n	800fa5c <__swbuf_r+0x6c>
 800fa4e:	2e0a      	cmp	r6, #10
 800fa50:	d104      	bne.n	800fa5c <__swbuf_r+0x6c>
 800fa52:	4621      	mov	r1, r4
 800fa54:	4628      	mov	r0, r5
 800fa56:	f000 f919 	bl	800fc8c <_fflush_r>
 800fa5a:	b988      	cbnz	r0, 800fa80 <__swbuf_r+0x90>
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa60:	4b0a      	ldr	r3, [pc, #40]	; (800fa8c <__swbuf_r+0x9c>)
 800fa62:	429c      	cmp	r4, r3
 800fa64:	d101      	bne.n	800fa6a <__swbuf_r+0x7a>
 800fa66:	68ac      	ldr	r4, [r5, #8]
 800fa68:	e7cf      	b.n	800fa0a <__swbuf_r+0x1a>
 800fa6a:	4b09      	ldr	r3, [pc, #36]	; (800fa90 <__swbuf_r+0xa0>)
 800fa6c:	429c      	cmp	r4, r3
 800fa6e:	bf08      	it	eq
 800fa70:	68ec      	ldreq	r4, [r5, #12]
 800fa72:	e7ca      	b.n	800fa0a <__swbuf_r+0x1a>
 800fa74:	4621      	mov	r1, r4
 800fa76:	4628      	mov	r0, r5
 800fa78:	f000 f80c 	bl	800fa94 <__swsetup_r>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d0cb      	beq.n	800fa18 <__swbuf_r+0x28>
 800fa80:	f04f 37ff 	mov.w	r7, #4294967295
 800fa84:	e7ea      	b.n	800fa5c <__swbuf_r+0x6c>
 800fa86:	bf00      	nop
 800fa88:	0801624c 	.word	0x0801624c
 800fa8c:	0801626c 	.word	0x0801626c
 800fa90:	0801622c 	.word	0x0801622c

0800fa94 <__swsetup_r>:
 800fa94:	4b32      	ldr	r3, [pc, #200]	; (800fb60 <__swsetup_r+0xcc>)
 800fa96:	b570      	push	{r4, r5, r6, lr}
 800fa98:	681d      	ldr	r5, [r3, #0]
 800fa9a:	4606      	mov	r6, r0
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	b125      	cbz	r5, 800faaa <__swsetup_r+0x16>
 800faa0:	69ab      	ldr	r3, [r5, #24]
 800faa2:	b913      	cbnz	r3, 800faaa <__swsetup_r+0x16>
 800faa4:	4628      	mov	r0, r5
 800faa6:	f000 f985 	bl	800fdb4 <__sinit>
 800faaa:	4b2e      	ldr	r3, [pc, #184]	; (800fb64 <__swsetup_r+0xd0>)
 800faac:	429c      	cmp	r4, r3
 800faae:	d10f      	bne.n	800fad0 <__swsetup_r+0x3c>
 800fab0:	686c      	ldr	r4, [r5, #4]
 800fab2:	89a3      	ldrh	r3, [r4, #12]
 800fab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fab8:	0719      	lsls	r1, r3, #28
 800faba:	d42c      	bmi.n	800fb16 <__swsetup_r+0x82>
 800fabc:	06dd      	lsls	r5, r3, #27
 800fabe:	d411      	bmi.n	800fae4 <__swsetup_r+0x50>
 800fac0:	2309      	movs	r3, #9
 800fac2:	6033      	str	r3, [r6, #0]
 800fac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fac8:	81a3      	strh	r3, [r4, #12]
 800faca:	f04f 30ff 	mov.w	r0, #4294967295
 800face:	e03e      	b.n	800fb4e <__swsetup_r+0xba>
 800fad0:	4b25      	ldr	r3, [pc, #148]	; (800fb68 <__swsetup_r+0xd4>)
 800fad2:	429c      	cmp	r4, r3
 800fad4:	d101      	bne.n	800fada <__swsetup_r+0x46>
 800fad6:	68ac      	ldr	r4, [r5, #8]
 800fad8:	e7eb      	b.n	800fab2 <__swsetup_r+0x1e>
 800fada:	4b24      	ldr	r3, [pc, #144]	; (800fb6c <__swsetup_r+0xd8>)
 800fadc:	429c      	cmp	r4, r3
 800fade:	bf08      	it	eq
 800fae0:	68ec      	ldreq	r4, [r5, #12]
 800fae2:	e7e6      	b.n	800fab2 <__swsetup_r+0x1e>
 800fae4:	0758      	lsls	r0, r3, #29
 800fae6:	d512      	bpl.n	800fb0e <__swsetup_r+0x7a>
 800fae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faea:	b141      	cbz	r1, 800fafe <__swsetup_r+0x6a>
 800faec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faf0:	4299      	cmp	r1, r3
 800faf2:	d002      	beq.n	800fafa <__swsetup_r+0x66>
 800faf4:	4630      	mov	r0, r6
 800faf6:	f7ff fb27 	bl	800f148 <_free_r>
 800fafa:	2300      	movs	r3, #0
 800fafc:	6363      	str	r3, [r4, #52]	; 0x34
 800fafe:	89a3      	ldrh	r3, [r4, #12]
 800fb00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb04:	81a3      	strh	r3, [r4, #12]
 800fb06:	2300      	movs	r3, #0
 800fb08:	6063      	str	r3, [r4, #4]
 800fb0a:	6923      	ldr	r3, [r4, #16]
 800fb0c:	6023      	str	r3, [r4, #0]
 800fb0e:	89a3      	ldrh	r3, [r4, #12]
 800fb10:	f043 0308 	orr.w	r3, r3, #8
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	6923      	ldr	r3, [r4, #16]
 800fb18:	b94b      	cbnz	r3, 800fb2e <__swsetup_r+0x9a>
 800fb1a:	89a3      	ldrh	r3, [r4, #12]
 800fb1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb24:	d003      	beq.n	800fb2e <__swsetup_r+0x9a>
 800fb26:	4621      	mov	r1, r4
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f000 fa09 	bl	800ff40 <__smakebuf_r>
 800fb2e:	89a0      	ldrh	r0, [r4, #12]
 800fb30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb34:	f010 0301 	ands.w	r3, r0, #1
 800fb38:	d00a      	beq.n	800fb50 <__swsetup_r+0xbc>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	60a3      	str	r3, [r4, #8]
 800fb3e:	6963      	ldr	r3, [r4, #20]
 800fb40:	425b      	negs	r3, r3
 800fb42:	61a3      	str	r3, [r4, #24]
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	b943      	cbnz	r3, 800fb5a <__swsetup_r+0xc6>
 800fb48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb4c:	d1ba      	bne.n	800fac4 <__swsetup_r+0x30>
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}
 800fb50:	0781      	lsls	r1, r0, #30
 800fb52:	bf58      	it	pl
 800fb54:	6963      	ldrpl	r3, [r4, #20]
 800fb56:	60a3      	str	r3, [r4, #8]
 800fb58:	e7f4      	b.n	800fb44 <__swsetup_r+0xb0>
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	e7f7      	b.n	800fb4e <__swsetup_r+0xba>
 800fb5e:	bf00      	nop
 800fb60:	200046e8 	.word	0x200046e8
 800fb64:	0801624c 	.word	0x0801624c
 800fb68:	0801626c 	.word	0x0801626c
 800fb6c:	0801622c 	.word	0x0801622c

0800fb70 <abort>:
 800fb70:	b508      	push	{r3, lr}
 800fb72:	2006      	movs	r0, #6
 800fb74:	f000 fa54 	bl	8010020 <raise>
 800fb78:	2001      	movs	r0, #1
 800fb7a:	f7f1 ff15 	bl	80019a8 <_exit>
	...

0800fb80 <__sflush_r>:
 800fb80:	898a      	ldrh	r2, [r1, #12]
 800fb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb86:	4605      	mov	r5, r0
 800fb88:	0710      	lsls	r0, r2, #28
 800fb8a:	460c      	mov	r4, r1
 800fb8c:	d458      	bmi.n	800fc40 <__sflush_r+0xc0>
 800fb8e:	684b      	ldr	r3, [r1, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	dc05      	bgt.n	800fba0 <__sflush_r+0x20>
 800fb94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	dc02      	bgt.n	800fba0 <__sflush_r+0x20>
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fba2:	2e00      	cmp	r6, #0
 800fba4:	d0f9      	beq.n	800fb9a <__sflush_r+0x1a>
 800fba6:	2300      	movs	r3, #0
 800fba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbac:	682f      	ldr	r7, [r5, #0]
 800fbae:	602b      	str	r3, [r5, #0]
 800fbb0:	d032      	beq.n	800fc18 <__sflush_r+0x98>
 800fbb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbb4:	89a3      	ldrh	r3, [r4, #12]
 800fbb6:	075a      	lsls	r2, r3, #29
 800fbb8:	d505      	bpl.n	800fbc6 <__sflush_r+0x46>
 800fbba:	6863      	ldr	r3, [r4, #4]
 800fbbc:	1ac0      	subs	r0, r0, r3
 800fbbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbc0:	b10b      	cbz	r3, 800fbc6 <__sflush_r+0x46>
 800fbc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbc4:	1ac0      	subs	r0, r0, r3
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	4602      	mov	r2, r0
 800fbca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbcc:	6a21      	ldr	r1, [r4, #32]
 800fbce:	4628      	mov	r0, r5
 800fbd0:	47b0      	blx	r6
 800fbd2:	1c43      	adds	r3, r0, #1
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	d106      	bne.n	800fbe6 <__sflush_r+0x66>
 800fbd8:	6829      	ldr	r1, [r5, #0]
 800fbda:	291d      	cmp	r1, #29
 800fbdc:	d82c      	bhi.n	800fc38 <__sflush_r+0xb8>
 800fbde:	4a2a      	ldr	r2, [pc, #168]	; (800fc88 <__sflush_r+0x108>)
 800fbe0:	40ca      	lsrs	r2, r1
 800fbe2:	07d6      	lsls	r6, r2, #31
 800fbe4:	d528      	bpl.n	800fc38 <__sflush_r+0xb8>
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	6062      	str	r2, [r4, #4]
 800fbea:	04d9      	lsls	r1, r3, #19
 800fbec:	6922      	ldr	r2, [r4, #16]
 800fbee:	6022      	str	r2, [r4, #0]
 800fbf0:	d504      	bpl.n	800fbfc <__sflush_r+0x7c>
 800fbf2:	1c42      	adds	r2, r0, #1
 800fbf4:	d101      	bne.n	800fbfa <__sflush_r+0x7a>
 800fbf6:	682b      	ldr	r3, [r5, #0]
 800fbf8:	b903      	cbnz	r3, 800fbfc <__sflush_r+0x7c>
 800fbfa:	6560      	str	r0, [r4, #84]	; 0x54
 800fbfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbfe:	602f      	str	r7, [r5, #0]
 800fc00:	2900      	cmp	r1, #0
 800fc02:	d0ca      	beq.n	800fb9a <__sflush_r+0x1a>
 800fc04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc08:	4299      	cmp	r1, r3
 800fc0a:	d002      	beq.n	800fc12 <__sflush_r+0x92>
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f7ff fa9b 	bl	800f148 <_free_r>
 800fc12:	2000      	movs	r0, #0
 800fc14:	6360      	str	r0, [r4, #52]	; 0x34
 800fc16:	e7c1      	b.n	800fb9c <__sflush_r+0x1c>
 800fc18:	6a21      	ldr	r1, [r4, #32]
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b0      	blx	r6
 800fc20:	1c41      	adds	r1, r0, #1
 800fc22:	d1c7      	bne.n	800fbb4 <__sflush_r+0x34>
 800fc24:	682b      	ldr	r3, [r5, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d0c4      	beq.n	800fbb4 <__sflush_r+0x34>
 800fc2a:	2b1d      	cmp	r3, #29
 800fc2c:	d001      	beq.n	800fc32 <__sflush_r+0xb2>
 800fc2e:	2b16      	cmp	r3, #22
 800fc30:	d101      	bne.n	800fc36 <__sflush_r+0xb6>
 800fc32:	602f      	str	r7, [r5, #0]
 800fc34:	e7b1      	b.n	800fb9a <__sflush_r+0x1a>
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc3c:	81a3      	strh	r3, [r4, #12]
 800fc3e:	e7ad      	b.n	800fb9c <__sflush_r+0x1c>
 800fc40:	690f      	ldr	r7, [r1, #16]
 800fc42:	2f00      	cmp	r7, #0
 800fc44:	d0a9      	beq.n	800fb9a <__sflush_r+0x1a>
 800fc46:	0793      	lsls	r3, r2, #30
 800fc48:	680e      	ldr	r6, [r1, #0]
 800fc4a:	bf08      	it	eq
 800fc4c:	694b      	ldreq	r3, [r1, #20]
 800fc4e:	600f      	str	r7, [r1, #0]
 800fc50:	bf18      	it	ne
 800fc52:	2300      	movne	r3, #0
 800fc54:	eba6 0807 	sub.w	r8, r6, r7
 800fc58:	608b      	str	r3, [r1, #8]
 800fc5a:	f1b8 0f00 	cmp.w	r8, #0
 800fc5e:	dd9c      	ble.n	800fb9a <__sflush_r+0x1a>
 800fc60:	6a21      	ldr	r1, [r4, #32]
 800fc62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc64:	4643      	mov	r3, r8
 800fc66:	463a      	mov	r2, r7
 800fc68:	4628      	mov	r0, r5
 800fc6a:	47b0      	blx	r6
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	dc06      	bgt.n	800fc7e <__sflush_r+0xfe>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7c:	e78e      	b.n	800fb9c <__sflush_r+0x1c>
 800fc7e:	4407      	add	r7, r0
 800fc80:	eba8 0800 	sub.w	r8, r8, r0
 800fc84:	e7e9      	b.n	800fc5a <__sflush_r+0xda>
 800fc86:	bf00      	nop
 800fc88:	20400001 	.word	0x20400001

0800fc8c <_fflush_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	690b      	ldr	r3, [r1, #16]
 800fc90:	4605      	mov	r5, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	b913      	cbnz	r3, 800fc9c <_fflush_r+0x10>
 800fc96:	2500      	movs	r5, #0
 800fc98:	4628      	mov	r0, r5
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	b118      	cbz	r0, 800fca6 <_fflush_r+0x1a>
 800fc9e:	6983      	ldr	r3, [r0, #24]
 800fca0:	b90b      	cbnz	r3, 800fca6 <_fflush_r+0x1a>
 800fca2:	f000 f887 	bl	800fdb4 <__sinit>
 800fca6:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <_fflush_r+0x6c>)
 800fca8:	429c      	cmp	r4, r3
 800fcaa:	d11b      	bne.n	800fce4 <_fflush_r+0x58>
 800fcac:	686c      	ldr	r4, [r5, #4]
 800fcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d0ef      	beq.n	800fc96 <_fflush_r+0xa>
 800fcb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcb8:	07d0      	lsls	r0, r2, #31
 800fcba:	d404      	bmi.n	800fcc6 <_fflush_r+0x3a>
 800fcbc:	0599      	lsls	r1, r3, #22
 800fcbe:	d402      	bmi.n	800fcc6 <_fflush_r+0x3a>
 800fcc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcc2:	f000 f915 	bl	800fef0 <__retarget_lock_acquire_recursive>
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	4621      	mov	r1, r4
 800fcca:	f7ff ff59 	bl	800fb80 <__sflush_r>
 800fcce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcd0:	07da      	lsls	r2, r3, #31
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	d4e0      	bmi.n	800fc98 <_fflush_r+0xc>
 800fcd6:	89a3      	ldrh	r3, [r4, #12]
 800fcd8:	059b      	lsls	r3, r3, #22
 800fcda:	d4dd      	bmi.n	800fc98 <_fflush_r+0xc>
 800fcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcde:	f000 f908 	bl	800fef2 <__retarget_lock_release_recursive>
 800fce2:	e7d9      	b.n	800fc98 <_fflush_r+0xc>
 800fce4:	4b05      	ldr	r3, [pc, #20]	; (800fcfc <_fflush_r+0x70>)
 800fce6:	429c      	cmp	r4, r3
 800fce8:	d101      	bne.n	800fcee <_fflush_r+0x62>
 800fcea:	68ac      	ldr	r4, [r5, #8]
 800fcec:	e7df      	b.n	800fcae <_fflush_r+0x22>
 800fcee:	4b04      	ldr	r3, [pc, #16]	; (800fd00 <_fflush_r+0x74>)
 800fcf0:	429c      	cmp	r4, r3
 800fcf2:	bf08      	it	eq
 800fcf4:	68ec      	ldreq	r4, [r5, #12]
 800fcf6:	e7da      	b.n	800fcae <_fflush_r+0x22>
 800fcf8:	0801624c 	.word	0x0801624c
 800fcfc:	0801626c 	.word	0x0801626c
 800fd00:	0801622c 	.word	0x0801622c

0800fd04 <std>:
 800fd04:	2300      	movs	r3, #0
 800fd06:	b510      	push	{r4, lr}
 800fd08:	4604      	mov	r4, r0
 800fd0a:	e9c0 3300 	strd	r3, r3, [r0]
 800fd0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd12:	6083      	str	r3, [r0, #8]
 800fd14:	8181      	strh	r1, [r0, #12]
 800fd16:	6643      	str	r3, [r0, #100]	; 0x64
 800fd18:	81c2      	strh	r2, [r0, #14]
 800fd1a:	6183      	str	r3, [r0, #24]
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	2208      	movs	r2, #8
 800fd20:	305c      	adds	r0, #92	; 0x5c
 800fd22:	f7fb fdd1 	bl	800b8c8 <memset>
 800fd26:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <std+0x38>)
 800fd28:	6263      	str	r3, [r4, #36]	; 0x24
 800fd2a:	4b05      	ldr	r3, [pc, #20]	; (800fd40 <std+0x3c>)
 800fd2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd2e:	4b05      	ldr	r3, [pc, #20]	; (800fd44 <std+0x40>)
 800fd30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd32:	4b05      	ldr	r3, [pc, #20]	; (800fd48 <std+0x44>)
 800fd34:	6224      	str	r4, [r4, #32]
 800fd36:	6323      	str	r3, [r4, #48]	; 0x30
 800fd38:	bd10      	pop	{r4, pc}
 800fd3a:	bf00      	nop
 800fd3c:	08010059 	.word	0x08010059
 800fd40:	0801007b 	.word	0x0801007b
 800fd44:	080100b3 	.word	0x080100b3
 800fd48:	080100d7 	.word	0x080100d7

0800fd4c <_cleanup_r>:
 800fd4c:	4901      	ldr	r1, [pc, #4]	; (800fd54 <_cleanup_r+0x8>)
 800fd4e:	f000 b8af 	b.w	800feb0 <_fwalk_reent>
 800fd52:	bf00      	nop
 800fd54:	0800fc8d 	.word	0x0800fc8d

0800fd58 <__sfmoreglue>:
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	2268      	movs	r2, #104	; 0x68
 800fd5c:	1e4d      	subs	r5, r1, #1
 800fd5e:	4355      	muls	r5, r2
 800fd60:	460e      	mov	r6, r1
 800fd62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd66:	f7ff fa5b 	bl	800f220 <_malloc_r>
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	b140      	cbz	r0, 800fd80 <__sfmoreglue+0x28>
 800fd6e:	2100      	movs	r1, #0
 800fd70:	e9c0 1600 	strd	r1, r6, [r0]
 800fd74:	300c      	adds	r0, #12
 800fd76:	60a0      	str	r0, [r4, #8]
 800fd78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd7c:	f7fb fda4 	bl	800b8c8 <memset>
 800fd80:	4620      	mov	r0, r4
 800fd82:	bd70      	pop	{r4, r5, r6, pc}

0800fd84 <__sfp_lock_acquire>:
 800fd84:	4801      	ldr	r0, [pc, #4]	; (800fd8c <__sfp_lock_acquire+0x8>)
 800fd86:	f000 b8b3 	b.w	800fef0 <__retarget_lock_acquire_recursive>
 800fd8a:	bf00      	nop
 800fd8c:	20007511 	.word	0x20007511

0800fd90 <__sfp_lock_release>:
 800fd90:	4801      	ldr	r0, [pc, #4]	; (800fd98 <__sfp_lock_release+0x8>)
 800fd92:	f000 b8ae 	b.w	800fef2 <__retarget_lock_release_recursive>
 800fd96:	bf00      	nop
 800fd98:	20007511 	.word	0x20007511

0800fd9c <__sinit_lock_acquire>:
 800fd9c:	4801      	ldr	r0, [pc, #4]	; (800fda4 <__sinit_lock_acquire+0x8>)
 800fd9e:	f000 b8a7 	b.w	800fef0 <__retarget_lock_acquire_recursive>
 800fda2:	bf00      	nop
 800fda4:	20007512 	.word	0x20007512

0800fda8 <__sinit_lock_release>:
 800fda8:	4801      	ldr	r0, [pc, #4]	; (800fdb0 <__sinit_lock_release+0x8>)
 800fdaa:	f000 b8a2 	b.w	800fef2 <__retarget_lock_release_recursive>
 800fdae:	bf00      	nop
 800fdb0:	20007512 	.word	0x20007512

0800fdb4 <__sinit>:
 800fdb4:	b510      	push	{r4, lr}
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	f7ff fff0 	bl	800fd9c <__sinit_lock_acquire>
 800fdbc:	69a3      	ldr	r3, [r4, #24]
 800fdbe:	b11b      	cbz	r3, 800fdc8 <__sinit+0x14>
 800fdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc4:	f7ff bff0 	b.w	800fda8 <__sinit_lock_release>
 800fdc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fdcc:	6523      	str	r3, [r4, #80]	; 0x50
 800fdce:	4b13      	ldr	r3, [pc, #76]	; (800fe1c <__sinit+0x68>)
 800fdd0:	4a13      	ldr	r2, [pc, #76]	; (800fe20 <__sinit+0x6c>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800fdd6:	42a3      	cmp	r3, r4
 800fdd8:	bf04      	itt	eq
 800fdda:	2301      	moveq	r3, #1
 800fddc:	61a3      	streq	r3, [r4, #24]
 800fdde:	4620      	mov	r0, r4
 800fde0:	f000 f820 	bl	800fe24 <__sfp>
 800fde4:	6060      	str	r0, [r4, #4]
 800fde6:	4620      	mov	r0, r4
 800fde8:	f000 f81c 	bl	800fe24 <__sfp>
 800fdec:	60a0      	str	r0, [r4, #8]
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f000 f818 	bl	800fe24 <__sfp>
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	60e0      	str	r0, [r4, #12]
 800fdf8:	2104      	movs	r1, #4
 800fdfa:	6860      	ldr	r0, [r4, #4]
 800fdfc:	f7ff ff82 	bl	800fd04 <std>
 800fe00:	68a0      	ldr	r0, [r4, #8]
 800fe02:	2201      	movs	r2, #1
 800fe04:	2109      	movs	r1, #9
 800fe06:	f7ff ff7d 	bl	800fd04 <std>
 800fe0a:	68e0      	ldr	r0, [r4, #12]
 800fe0c:	2202      	movs	r2, #2
 800fe0e:	2112      	movs	r1, #18
 800fe10:	f7ff ff78 	bl	800fd04 <std>
 800fe14:	2301      	movs	r3, #1
 800fe16:	61a3      	str	r3, [r4, #24]
 800fe18:	e7d2      	b.n	800fdc0 <__sinit+0xc>
 800fe1a:	bf00      	nop
 800fe1c:	08015de8 	.word	0x08015de8
 800fe20:	0800fd4d 	.word	0x0800fd4d

0800fe24 <__sfp>:
 800fe24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe26:	4607      	mov	r7, r0
 800fe28:	f7ff ffac 	bl	800fd84 <__sfp_lock_acquire>
 800fe2c:	4b1e      	ldr	r3, [pc, #120]	; (800fea8 <__sfp+0x84>)
 800fe2e:	681e      	ldr	r6, [r3, #0]
 800fe30:	69b3      	ldr	r3, [r6, #24]
 800fe32:	b913      	cbnz	r3, 800fe3a <__sfp+0x16>
 800fe34:	4630      	mov	r0, r6
 800fe36:	f7ff ffbd 	bl	800fdb4 <__sinit>
 800fe3a:	3648      	adds	r6, #72	; 0x48
 800fe3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	d503      	bpl.n	800fe4c <__sfp+0x28>
 800fe44:	6833      	ldr	r3, [r6, #0]
 800fe46:	b30b      	cbz	r3, 800fe8c <__sfp+0x68>
 800fe48:	6836      	ldr	r6, [r6, #0]
 800fe4a:	e7f7      	b.n	800fe3c <__sfp+0x18>
 800fe4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe50:	b9d5      	cbnz	r5, 800fe88 <__sfp+0x64>
 800fe52:	4b16      	ldr	r3, [pc, #88]	; (800feac <__sfp+0x88>)
 800fe54:	60e3      	str	r3, [r4, #12]
 800fe56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe5a:	6665      	str	r5, [r4, #100]	; 0x64
 800fe5c:	f000 f847 	bl	800feee <__retarget_lock_init_recursive>
 800fe60:	f7ff ff96 	bl	800fd90 <__sfp_lock_release>
 800fe64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe6c:	6025      	str	r5, [r4, #0]
 800fe6e:	61a5      	str	r5, [r4, #24]
 800fe70:	2208      	movs	r2, #8
 800fe72:	4629      	mov	r1, r5
 800fe74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe78:	f7fb fd26 	bl	800b8c8 <memset>
 800fe7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe84:	4620      	mov	r0, r4
 800fe86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe88:	3468      	adds	r4, #104	; 0x68
 800fe8a:	e7d9      	b.n	800fe40 <__sfp+0x1c>
 800fe8c:	2104      	movs	r1, #4
 800fe8e:	4638      	mov	r0, r7
 800fe90:	f7ff ff62 	bl	800fd58 <__sfmoreglue>
 800fe94:	4604      	mov	r4, r0
 800fe96:	6030      	str	r0, [r6, #0]
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d1d5      	bne.n	800fe48 <__sfp+0x24>
 800fe9c:	f7ff ff78 	bl	800fd90 <__sfp_lock_release>
 800fea0:	230c      	movs	r3, #12
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	e7ee      	b.n	800fe84 <__sfp+0x60>
 800fea6:	bf00      	nop
 800fea8:	08015de8 	.word	0x08015de8
 800feac:	ffff0001 	.word	0xffff0001

0800feb0 <_fwalk_reent>:
 800feb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feb4:	4606      	mov	r6, r0
 800feb6:	4688      	mov	r8, r1
 800feb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800febc:	2700      	movs	r7, #0
 800febe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fec2:	f1b9 0901 	subs.w	r9, r9, #1
 800fec6:	d505      	bpl.n	800fed4 <_fwalk_reent+0x24>
 800fec8:	6824      	ldr	r4, [r4, #0]
 800feca:	2c00      	cmp	r4, #0
 800fecc:	d1f7      	bne.n	800febe <_fwalk_reent+0xe>
 800fece:	4638      	mov	r0, r7
 800fed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fed4:	89ab      	ldrh	r3, [r5, #12]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d907      	bls.n	800feea <_fwalk_reent+0x3a>
 800feda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fede:	3301      	adds	r3, #1
 800fee0:	d003      	beq.n	800feea <_fwalk_reent+0x3a>
 800fee2:	4629      	mov	r1, r5
 800fee4:	4630      	mov	r0, r6
 800fee6:	47c0      	blx	r8
 800fee8:	4307      	orrs	r7, r0
 800feea:	3568      	adds	r5, #104	; 0x68
 800feec:	e7e9      	b.n	800fec2 <_fwalk_reent+0x12>

0800feee <__retarget_lock_init_recursive>:
 800feee:	4770      	bx	lr

0800fef0 <__retarget_lock_acquire_recursive>:
 800fef0:	4770      	bx	lr

0800fef2 <__retarget_lock_release_recursive>:
 800fef2:	4770      	bx	lr

0800fef4 <__swhatbuf_r>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	460e      	mov	r6, r1
 800fef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefc:	2900      	cmp	r1, #0
 800fefe:	b096      	sub	sp, #88	; 0x58
 800ff00:	4614      	mov	r4, r2
 800ff02:	461d      	mov	r5, r3
 800ff04:	da08      	bge.n	800ff18 <__swhatbuf_r+0x24>
 800ff06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	602a      	str	r2, [r5, #0]
 800ff0e:	061a      	lsls	r2, r3, #24
 800ff10:	d410      	bmi.n	800ff34 <__swhatbuf_r+0x40>
 800ff12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff16:	e00e      	b.n	800ff36 <__swhatbuf_r+0x42>
 800ff18:	466a      	mov	r2, sp
 800ff1a:	f000 f903 	bl	8010124 <_fstat_r>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	dbf1      	blt.n	800ff06 <__swhatbuf_r+0x12>
 800ff22:	9a01      	ldr	r2, [sp, #4]
 800ff24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff2c:	425a      	negs	r2, r3
 800ff2e:	415a      	adcs	r2, r3
 800ff30:	602a      	str	r2, [r5, #0]
 800ff32:	e7ee      	b.n	800ff12 <__swhatbuf_r+0x1e>
 800ff34:	2340      	movs	r3, #64	; 0x40
 800ff36:	2000      	movs	r0, #0
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	b016      	add	sp, #88	; 0x58
 800ff3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff40 <__smakebuf_r>:
 800ff40:	898b      	ldrh	r3, [r1, #12]
 800ff42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff44:	079d      	lsls	r5, r3, #30
 800ff46:	4606      	mov	r6, r0
 800ff48:	460c      	mov	r4, r1
 800ff4a:	d507      	bpl.n	800ff5c <__smakebuf_r+0x1c>
 800ff4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	2301      	movs	r3, #1
 800ff56:	6163      	str	r3, [r4, #20]
 800ff58:	b002      	add	sp, #8
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
 800ff5c:	ab01      	add	r3, sp, #4
 800ff5e:	466a      	mov	r2, sp
 800ff60:	f7ff ffc8 	bl	800fef4 <__swhatbuf_r>
 800ff64:	9900      	ldr	r1, [sp, #0]
 800ff66:	4605      	mov	r5, r0
 800ff68:	4630      	mov	r0, r6
 800ff6a:	f7ff f959 	bl	800f220 <_malloc_r>
 800ff6e:	b948      	cbnz	r0, 800ff84 <__smakebuf_r+0x44>
 800ff70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff74:	059a      	lsls	r2, r3, #22
 800ff76:	d4ef      	bmi.n	800ff58 <__smakebuf_r+0x18>
 800ff78:	f023 0303 	bic.w	r3, r3, #3
 800ff7c:	f043 0302 	orr.w	r3, r3, #2
 800ff80:	81a3      	strh	r3, [r4, #12]
 800ff82:	e7e3      	b.n	800ff4c <__smakebuf_r+0xc>
 800ff84:	4b0d      	ldr	r3, [pc, #52]	; (800ffbc <__smakebuf_r+0x7c>)
 800ff86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff88:	89a3      	ldrh	r3, [r4, #12]
 800ff8a:	6020      	str	r0, [r4, #0]
 800ff8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff90:	81a3      	strh	r3, [r4, #12]
 800ff92:	9b00      	ldr	r3, [sp, #0]
 800ff94:	6163      	str	r3, [r4, #20]
 800ff96:	9b01      	ldr	r3, [sp, #4]
 800ff98:	6120      	str	r0, [r4, #16]
 800ff9a:	b15b      	cbz	r3, 800ffb4 <__smakebuf_r+0x74>
 800ff9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f000 f8d1 	bl	8010148 <_isatty_r>
 800ffa6:	b128      	cbz	r0, 800ffb4 <__smakebuf_r+0x74>
 800ffa8:	89a3      	ldrh	r3, [r4, #12]
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	f043 0301 	orr.w	r3, r3, #1
 800ffb2:	81a3      	strh	r3, [r4, #12]
 800ffb4:	89a0      	ldrh	r0, [r4, #12]
 800ffb6:	4305      	orrs	r5, r0
 800ffb8:	81a5      	strh	r5, [r4, #12]
 800ffba:	e7cd      	b.n	800ff58 <__smakebuf_r+0x18>
 800ffbc:	0800fd4d 	.word	0x0800fd4d

0800ffc0 <_malloc_usable_size_r>:
 800ffc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc4:	1f18      	subs	r0, r3, #4
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	bfbc      	itt	lt
 800ffca:	580b      	ldrlt	r3, [r1, r0]
 800ffcc:	18c0      	addlt	r0, r0, r3
 800ffce:	4770      	bx	lr

0800ffd0 <_raise_r>:
 800ffd0:	291f      	cmp	r1, #31
 800ffd2:	b538      	push	{r3, r4, r5, lr}
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	460d      	mov	r5, r1
 800ffd8:	d904      	bls.n	800ffe4 <_raise_r+0x14>
 800ffda:	2316      	movs	r3, #22
 800ffdc:	6003      	str	r3, [r0, #0]
 800ffde:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ffe6:	b112      	cbz	r2, 800ffee <_raise_r+0x1e>
 800ffe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffec:	b94b      	cbnz	r3, 8010002 <_raise_r+0x32>
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 f830 	bl	8010054 <_getpid_r>
 800fff4:	462a      	mov	r2, r5
 800fff6:	4601      	mov	r1, r0
 800fff8:	4620      	mov	r0, r4
 800fffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fffe:	f000 b817 	b.w	8010030 <_kill_r>
 8010002:	2b01      	cmp	r3, #1
 8010004:	d00a      	beq.n	801001c <_raise_r+0x4c>
 8010006:	1c59      	adds	r1, r3, #1
 8010008:	d103      	bne.n	8010012 <_raise_r+0x42>
 801000a:	2316      	movs	r3, #22
 801000c:	6003      	str	r3, [r0, #0]
 801000e:	2001      	movs	r0, #1
 8010010:	e7e7      	b.n	800ffe2 <_raise_r+0x12>
 8010012:	2400      	movs	r4, #0
 8010014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010018:	4628      	mov	r0, r5
 801001a:	4798      	blx	r3
 801001c:	2000      	movs	r0, #0
 801001e:	e7e0      	b.n	800ffe2 <_raise_r+0x12>

08010020 <raise>:
 8010020:	4b02      	ldr	r3, [pc, #8]	; (801002c <raise+0xc>)
 8010022:	4601      	mov	r1, r0
 8010024:	6818      	ldr	r0, [r3, #0]
 8010026:	f7ff bfd3 	b.w	800ffd0 <_raise_r>
 801002a:	bf00      	nop
 801002c:	200046e8 	.word	0x200046e8

08010030 <_kill_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	4d07      	ldr	r5, [pc, #28]	; (8010050 <_kill_r+0x20>)
 8010034:	2300      	movs	r3, #0
 8010036:	4604      	mov	r4, r0
 8010038:	4608      	mov	r0, r1
 801003a:	4611      	mov	r1, r2
 801003c:	602b      	str	r3, [r5, #0]
 801003e:	f7f1 fca3 	bl	8001988 <_kill>
 8010042:	1c43      	adds	r3, r0, #1
 8010044:	d102      	bne.n	801004c <_kill_r+0x1c>
 8010046:	682b      	ldr	r3, [r5, #0]
 8010048:	b103      	cbz	r3, 801004c <_kill_r+0x1c>
 801004a:	6023      	str	r3, [r4, #0]
 801004c:	bd38      	pop	{r3, r4, r5, pc}
 801004e:	bf00      	nop
 8010050:	2000750c 	.word	0x2000750c

08010054 <_getpid_r>:
 8010054:	f7f1 bc90 	b.w	8001978 <_getpid>

08010058 <__sread>:
 8010058:	b510      	push	{r4, lr}
 801005a:	460c      	mov	r4, r1
 801005c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010060:	f000 f894 	bl	801018c <_read_r>
 8010064:	2800      	cmp	r0, #0
 8010066:	bfab      	itete	ge
 8010068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801006a:	89a3      	ldrhlt	r3, [r4, #12]
 801006c:	181b      	addge	r3, r3, r0
 801006e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010072:	bfac      	ite	ge
 8010074:	6563      	strge	r3, [r4, #84]	; 0x54
 8010076:	81a3      	strhlt	r3, [r4, #12]
 8010078:	bd10      	pop	{r4, pc}

0801007a <__swrite>:
 801007a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801007e:	461f      	mov	r7, r3
 8010080:	898b      	ldrh	r3, [r1, #12]
 8010082:	05db      	lsls	r3, r3, #23
 8010084:	4605      	mov	r5, r0
 8010086:	460c      	mov	r4, r1
 8010088:	4616      	mov	r6, r2
 801008a:	d505      	bpl.n	8010098 <__swrite+0x1e>
 801008c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010090:	2302      	movs	r3, #2
 8010092:	2200      	movs	r2, #0
 8010094:	f000 f868 	bl	8010168 <_lseek_r>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801009e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	4632      	mov	r2, r6
 80100a6:	463b      	mov	r3, r7
 80100a8:	4628      	mov	r0, r5
 80100aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100ae:	f000 b817 	b.w	80100e0 <_write_r>

080100b2 <__sseek>:
 80100b2:	b510      	push	{r4, lr}
 80100b4:	460c      	mov	r4, r1
 80100b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ba:	f000 f855 	bl	8010168 <_lseek_r>
 80100be:	1c43      	adds	r3, r0, #1
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	bf15      	itete	ne
 80100c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80100c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100ce:	81a3      	strheq	r3, [r4, #12]
 80100d0:	bf18      	it	ne
 80100d2:	81a3      	strhne	r3, [r4, #12]
 80100d4:	bd10      	pop	{r4, pc}

080100d6 <__sclose>:
 80100d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100da:	f000 b813 	b.w	8010104 <_close_r>
	...

080100e0 <_write_r>:
 80100e0:	b538      	push	{r3, r4, r5, lr}
 80100e2:	4d07      	ldr	r5, [pc, #28]	; (8010100 <_write_r+0x20>)
 80100e4:	4604      	mov	r4, r0
 80100e6:	4608      	mov	r0, r1
 80100e8:	4611      	mov	r1, r2
 80100ea:	2200      	movs	r2, #0
 80100ec:	602a      	str	r2, [r5, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	f7f1 fc81 	bl	80019f6 <_write>
 80100f4:	1c43      	adds	r3, r0, #1
 80100f6:	d102      	bne.n	80100fe <_write_r+0x1e>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	b103      	cbz	r3, 80100fe <_write_r+0x1e>
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
 8010100:	2000750c 	.word	0x2000750c

08010104 <_close_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	4d06      	ldr	r5, [pc, #24]	; (8010120 <_close_r+0x1c>)
 8010108:	2300      	movs	r3, #0
 801010a:	4604      	mov	r4, r0
 801010c:	4608      	mov	r0, r1
 801010e:	602b      	str	r3, [r5, #0]
 8010110:	f7f1 fc8d 	bl	8001a2e <_close>
 8010114:	1c43      	adds	r3, r0, #1
 8010116:	d102      	bne.n	801011e <_close_r+0x1a>
 8010118:	682b      	ldr	r3, [r5, #0]
 801011a:	b103      	cbz	r3, 801011e <_close_r+0x1a>
 801011c:	6023      	str	r3, [r4, #0]
 801011e:	bd38      	pop	{r3, r4, r5, pc}
 8010120:	2000750c 	.word	0x2000750c

08010124 <_fstat_r>:
 8010124:	b538      	push	{r3, r4, r5, lr}
 8010126:	4d07      	ldr	r5, [pc, #28]	; (8010144 <_fstat_r+0x20>)
 8010128:	2300      	movs	r3, #0
 801012a:	4604      	mov	r4, r0
 801012c:	4608      	mov	r0, r1
 801012e:	4611      	mov	r1, r2
 8010130:	602b      	str	r3, [r5, #0]
 8010132:	f7f1 fc88 	bl	8001a46 <_fstat>
 8010136:	1c43      	adds	r3, r0, #1
 8010138:	d102      	bne.n	8010140 <_fstat_r+0x1c>
 801013a:	682b      	ldr	r3, [r5, #0]
 801013c:	b103      	cbz	r3, 8010140 <_fstat_r+0x1c>
 801013e:	6023      	str	r3, [r4, #0]
 8010140:	bd38      	pop	{r3, r4, r5, pc}
 8010142:	bf00      	nop
 8010144:	2000750c 	.word	0x2000750c

08010148 <_isatty_r>:
 8010148:	b538      	push	{r3, r4, r5, lr}
 801014a:	4d06      	ldr	r5, [pc, #24]	; (8010164 <_isatty_r+0x1c>)
 801014c:	2300      	movs	r3, #0
 801014e:	4604      	mov	r4, r0
 8010150:	4608      	mov	r0, r1
 8010152:	602b      	str	r3, [r5, #0]
 8010154:	f7f1 fc87 	bl	8001a66 <_isatty>
 8010158:	1c43      	adds	r3, r0, #1
 801015a:	d102      	bne.n	8010162 <_isatty_r+0x1a>
 801015c:	682b      	ldr	r3, [r5, #0]
 801015e:	b103      	cbz	r3, 8010162 <_isatty_r+0x1a>
 8010160:	6023      	str	r3, [r4, #0]
 8010162:	bd38      	pop	{r3, r4, r5, pc}
 8010164:	2000750c 	.word	0x2000750c

08010168 <_lseek_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	4d07      	ldr	r5, [pc, #28]	; (8010188 <_lseek_r+0x20>)
 801016c:	4604      	mov	r4, r0
 801016e:	4608      	mov	r0, r1
 8010170:	4611      	mov	r1, r2
 8010172:	2200      	movs	r2, #0
 8010174:	602a      	str	r2, [r5, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	f7f1 fc80 	bl	8001a7c <_lseek>
 801017c:	1c43      	adds	r3, r0, #1
 801017e:	d102      	bne.n	8010186 <_lseek_r+0x1e>
 8010180:	682b      	ldr	r3, [r5, #0]
 8010182:	b103      	cbz	r3, 8010186 <_lseek_r+0x1e>
 8010184:	6023      	str	r3, [r4, #0]
 8010186:	bd38      	pop	{r3, r4, r5, pc}
 8010188:	2000750c 	.word	0x2000750c

0801018c <_read_r>:
 801018c:	b538      	push	{r3, r4, r5, lr}
 801018e:	4d07      	ldr	r5, [pc, #28]	; (80101ac <_read_r+0x20>)
 8010190:	4604      	mov	r4, r0
 8010192:	4608      	mov	r0, r1
 8010194:	4611      	mov	r1, r2
 8010196:	2200      	movs	r2, #0
 8010198:	602a      	str	r2, [r5, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	f7f1 fc0e 	bl	80019bc <_read>
 80101a0:	1c43      	adds	r3, r0, #1
 80101a2:	d102      	bne.n	80101aa <_read_r+0x1e>
 80101a4:	682b      	ldr	r3, [r5, #0]
 80101a6:	b103      	cbz	r3, 80101aa <_read_r+0x1e>
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	bd38      	pop	{r3, r4, r5, pc}
 80101ac:	2000750c 	.word	0x2000750c

080101b0 <tanhf>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	ee10 4a10 	vmov	r4, s0
 80101b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80101ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80101be:	ed2d 8b02 	vpush	{d8}
 80101c2:	eeb0 7a40 	vmov.f32	s14, s0
 80101c6:	db0c      	blt.n	80101e2 <tanhf+0x32>
 80101c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80101cc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80101d0:	2c00      	cmp	r4, #0
 80101d2:	bfac      	ite	ge
 80101d4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 80101d8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 80101dc:	ecbd 8b02 	vpop	{d8}
 80101e0:	bd10      	pop	{r4, pc}
 80101e2:	4a1b      	ldr	r2, [pc, #108]	; (8010250 <tanhf+0xa0>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	dc30      	bgt.n	801024a <tanhf+0x9a>
 80101e8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80101ec:	da06      	bge.n	80101fc <tanhf+0x4c>
 80101ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80101f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80101f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80101fa:	e7ef      	b.n	80101dc <tanhf+0x2c>
 80101fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010200:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8010204:	db12      	blt.n	801022c <tanhf+0x7c>
 8010206:	f000 fb85 	bl	8010914 <fabsf>
 801020a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801020e:	f000 fa65 	bl	80106dc <expm1f>
 8010212:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010216:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801021a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801021e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010222:	2c00      	cmp	r4, #0
 8010224:	bfb8      	it	lt
 8010226:	eeb1 0a40 	vneglt.f32	s0, s0
 801022a:	e7d7      	b.n	80101dc <tanhf+0x2c>
 801022c:	f000 fb72 	bl	8010914 <fabsf>
 8010230:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8010234:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010238:	f000 fa50 	bl	80106dc <expm1f>
 801023c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8010240:	eeb1 7a40 	vneg.f32	s14, s0
 8010244:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010248:	e7eb      	b.n	8010222 <tanhf+0x72>
 801024a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801024e:	e7e8      	b.n	8010222 <tanhf+0x72>
 8010250:	41afffff 	.word	0x41afffff

08010254 <expf>:
 8010254:	b508      	push	{r3, lr}
 8010256:	ed2d 8b02 	vpush	{d8}
 801025a:	eef0 8a40 	vmov.f32	s17, s0
 801025e:	f000 f85d 	bl	801031c <__ieee754_expf>
 8010262:	eeb0 8a40 	vmov.f32	s16, s0
 8010266:	eeb0 0a68 	vmov.f32	s0, s17
 801026a:	f000 fb5a 	bl	8010922 <finitef>
 801026e:	b160      	cbz	r0, 801028a <expf+0x36>
 8010270:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80102b0 <expf+0x5c>
 8010274:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027c:	dd0a      	ble.n	8010294 <expf+0x40>
 801027e:	f7fb faeb 	bl	800b858 <__errno>
 8010282:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80102b4 <expf+0x60>
 8010286:	2322      	movs	r3, #34	; 0x22
 8010288:	6003      	str	r3, [r0, #0]
 801028a:	eeb0 0a48 	vmov.f32	s0, s16
 801028e:	ecbd 8b02 	vpop	{d8}
 8010292:	bd08      	pop	{r3, pc}
 8010294:	eddf 7a08 	vldr	s15, [pc, #32]	; 80102b8 <expf+0x64>
 8010298:	eef4 8ae7 	vcmpe.f32	s17, s15
 801029c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a0:	d5f3      	bpl.n	801028a <expf+0x36>
 80102a2:	f7fb fad9 	bl	800b858 <__errno>
 80102a6:	2322      	movs	r3, #34	; 0x22
 80102a8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80102bc <expf+0x68>
 80102ac:	6003      	str	r3, [r0, #0]
 80102ae:	e7ec      	b.n	801028a <expf+0x36>
 80102b0:	42b17180 	.word	0x42b17180
 80102b4:	7f800000 	.word	0x7f800000
 80102b8:	c2cff1b5 	.word	0xc2cff1b5
 80102bc:	00000000 	.word	0x00000000

080102c0 <logf>:
 80102c0:	b508      	push	{r3, lr}
 80102c2:	ed2d 8b02 	vpush	{d8}
 80102c6:	eeb0 8a40 	vmov.f32	s16, s0
 80102ca:	f000 f8f5 	bl	80104b8 <__ieee754_logf>
 80102ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80102d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d6:	d60f      	bvs.n	80102f8 <logf+0x38>
 80102d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80102dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e0:	dc0a      	bgt.n	80102f8 <logf+0x38>
 80102e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80102e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ea:	d108      	bne.n	80102fe <logf+0x3e>
 80102ec:	f7fb fab4 	bl	800b858 <__errno>
 80102f0:	2322      	movs	r3, #34	; 0x22
 80102f2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010314 <logf+0x54>
 80102f6:	6003      	str	r3, [r0, #0]
 80102f8:	ecbd 8b02 	vpop	{d8}
 80102fc:	bd08      	pop	{r3, pc}
 80102fe:	f7fb faab 	bl	800b858 <__errno>
 8010302:	ecbd 8b02 	vpop	{d8}
 8010306:	2321      	movs	r3, #33	; 0x21
 8010308:	6003      	str	r3, [r0, #0]
 801030a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801030e:	4802      	ldr	r0, [pc, #8]	; (8010318 <logf+0x58>)
 8010310:	f7fc b95c 	b.w	800c5cc <nanf>
 8010314:	ff800000 	.word	0xff800000
 8010318:	08016228 	.word	0x08016228

0801031c <__ieee754_expf>:
 801031c:	ee10 2a10 	vmov	r2, s0
 8010320:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010324:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010328:	d902      	bls.n	8010330 <__ieee754_expf+0x14>
 801032a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801032e:	4770      	bx	lr
 8010330:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8010334:	d106      	bne.n	8010344 <__ieee754_expf+0x28>
 8010336:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8010470 <__ieee754_expf+0x154>
 801033a:	2b00      	cmp	r3, #0
 801033c:	bf18      	it	ne
 801033e:	eeb0 0a67 	vmovne.f32	s0, s15
 8010342:	4770      	bx	lr
 8010344:	484b      	ldr	r0, [pc, #300]	; (8010474 <__ieee754_expf+0x158>)
 8010346:	4282      	cmp	r2, r0
 8010348:	dd02      	ble.n	8010350 <__ieee754_expf+0x34>
 801034a:	2000      	movs	r0, #0
 801034c:	f000 b9c0 	b.w	80106d0 <__math_oflowf>
 8010350:	2a00      	cmp	r2, #0
 8010352:	da05      	bge.n	8010360 <__ieee754_expf+0x44>
 8010354:	4a48      	ldr	r2, [pc, #288]	; (8010478 <__ieee754_expf+0x15c>)
 8010356:	4291      	cmp	r1, r2
 8010358:	d902      	bls.n	8010360 <__ieee754_expf+0x44>
 801035a:	2000      	movs	r0, #0
 801035c:	f000 b9b2 	b.w	80106c4 <__math_uflowf>
 8010360:	4a46      	ldr	r2, [pc, #280]	; (801047c <__ieee754_expf+0x160>)
 8010362:	4291      	cmp	r1, r2
 8010364:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010368:	d952      	bls.n	8010410 <__ieee754_expf+0xf4>
 801036a:	4a45      	ldr	r2, [pc, #276]	; (8010480 <__ieee754_expf+0x164>)
 801036c:	4291      	cmp	r1, r2
 801036e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010372:	d834      	bhi.n	80103de <__ieee754_expf+0xc2>
 8010374:	4943      	ldr	r1, [pc, #268]	; (8010484 <__ieee754_expf+0x168>)
 8010376:	4411      	add	r1, r2
 8010378:	ed91 7a00 	vldr	s14, [r1]
 801037c:	4942      	ldr	r1, [pc, #264]	; (8010488 <__ieee754_expf+0x16c>)
 801037e:	440a      	add	r2, r1
 8010380:	edd2 7a00 	vldr	s15, [r2]
 8010384:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010388:	f1c3 0201 	rsb	r2, r3, #1
 801038c:	1ad2      	subs	r2, r2, r3
 801038e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010392:	ee20 6a00 	vmul.f32	s12, s0, s0
 8010396:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801048c <__ieee754_expf+0x170>
 801039a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010490 <__ieee754_expf+0x174>
 801039e:	eee6 6a05 	vfma.f32	s13, s12, s10
 80103a2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8010494 <__ieee754_expf+0x178>
 80103a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80103aa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010498 <__ieee754_expf+0x17c>
 80103ae:	eee5 6a06 	vfma.f32	s13, s10, s12
 80103b2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801049c <__ieee754_expf+0x180>
 80103b6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80103ba:	eef0 6a40 	vmov.f32	s13, s0
 80103be:	eee5 6a46 	vfms.f32	s13, s10, s12
 80103c2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80103c6:	ee20 5a26 	vmul.f32	s10, s0, s13
 80103ca:	bb92      	cbnz	r2, 8010432 <__ieee754_expf+0x116>
 80103cc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80103d0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80103d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80103d8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80103dc:	4770      	bx	lr
 80103de:	4b30      	ldr	r3, [pc, #192]	; (80104a0 <__ieee754_expf+0x184>)
 80103e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80104a4 <__ieee754_expf+0x188>
 80103e4:	eddf 6a30 	vldr	s13, [pc, #192]	; 80104a8 <__ieee754_expf+0x18c>
 80103e8:	4413      	add	r3, r2
 80103ea:	edd3 7a00 	vldr	s15, [r3]
 80103ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80103f2:	eeb0 7a40 	vmov.f32	s14, s0
 80103f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103fa:	ee17 2a90 	vmov	r2, s15
 80103fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010402:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8010406:	eddf 6a29 	vldr	s13, [pc, #164]	; 80104ac <__ieee754_expf+0x190>
 801040a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801040e:	e7be      	b.n	801038e <__ieee754_expf+0x72>
 8010410:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8010414:	d20b      	bcs.n	801042e <__ieee754_expf+0x112>
 8010416:	eddf 6a26 	vldr	s13, [pc, #152]	; 80104b0 <__ieee754_expf+0x194>
 801041a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801041e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8010422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010426:	dd02      	ble.n	801042e <__ieee754_expf+0x112>
 8010428:	ee30 0a25 	vadd.f32	s0, s0, s11
 801042c:	4770      	bx	lr
 801042e:	2200      	movs	r2, #0
 8010430:	e7af      	b.n	8010392 <__ieee754_expf+0x76>
 8010432:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010436:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801043a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801043e:	bfb8      	it	lt
 8010440:	3264      	addlt	r2, #100	; 0x64
 8010442:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010446:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801044a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801044e:	ee17 3a90 	vmov	r3, s15
 8010452:	bfab      	itete	ge
 8010454:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010458:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801045c:	ee00 3a10 	vmovge	s0, r3
 8010460:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80104b4 <__ieee754_expf+0x198>
 8010464:	bfbc      	itt	lt
 8010466:	ee00 3a10 	vmovlt	s0, r3
 801046a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801046e:	4770      	bx	lr
 8010470:	00000000 	.word	0x00000000
 8010474:	42b17217 	.word	0x42b17217
 8010478:	42cff1b5 	.word	0x42cff1b5
 801047c:	3eb17218 	.word	0x3eb17218
 8010480:	3f851591 	.word	0x3f851591
 8010484:	08016294 	.word	0x08016294
 8010488:	0801629c 	.word	0x0801629c
 801048c:	3331bb4c 	.word	0x3331bb4c
 8010490:	b5ddea0e 	.word	0xb5ddea0e
 8010494:	388ab355 	.word	0x388ab355
 8010498:	bb360b61 	.word	0xbb360b61
 801049c:	3e2aaaab 	.word	0x3e2aaaab
 80104a0:	0801628c 	.word	0x0801628c
 80104a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80104a8:	3f317180 	.word	0x3f317180
 80104ac:	3717f7d1 	.word	0x3717f7d1
 80104b0:	7149f2ca 	.word	0x7149f2ca
 80104b4:	0d800000 	.word	0x0d800000

080104b8 <__ieee754_logf>:
 80104b8:	ee10 3a10 	vmov	r3, s0
 80104bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80104c0:	d106      	bne.n	80104d0 <__ieee754_logf+0x18>
 80104c2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8010658 <__ieee754_logf+0x1a0>
 80104c6:	eddf 7a65 	vldr	s15, [pc, #404]	; 801065c <__ieee754_logf+0x1a4>
 80104ca:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80104ce:	4770      	bx	lr
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	da02      	bge.n	80104da <__ieee754_logf+0x22>
 80104d4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80104d8:	e7f5      	b.n	80104c6 <__ieee754_logf+0xe>
 80104da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104de:	db02      	blt.n	80104e6 <__ieee754_logf+0x2e>
 80104e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80104e4:	4770      	bx	lr
 80104e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80104ea:	bfb8      	it	lt
 80104ec:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8010660 <__ieee754_logf+0x1a8>
 80104f0:	485c      	ldr	r0, [pc, #368]	; (8010664 <__ieee754_logf+0x1ac>)
 80104f2:	bfbe      	ittt	lt
 80104f4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80104f8:	f06f 0118 	mvnlt.w	r1, #24
 80104fc:	ee17 3a90 	vmovlt	r3, s15
 8010500:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8010504:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010508:	4418      	add	r0, r3
 801050a:	bfa8      	it	ge
 801050c:	2100      	movge	r1, #0
 801050e:	3a7f      	subs	r2, #127	; 0x7f
 8010510:	440a      	add	r2, r1
 8010512:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8010516:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801051a:	4319      	orrs	r1, r3
 801051c:	ee00 1a10 	vmov	s0, r1
 8010520:	4951      	ldr	r1, [pc, #324]	; (8010668 <__ieee754_logf+0x1b0>)
 8010522:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8010526:	f103 000f 	add.w	r0, r3, #15
 801052a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801052e:	4001      	ands	r1, r0
 8010530:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010534:	bb89      	cbnz	r1, 801059a <__ieee754_logf+0xe2>
 8010536:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801053a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053e:	d10f      	bne.n	8010560 <__ieee754_logf+0xa8>
 8010540:	2a00      	cmp	r2, #0
 8010542:	f000 8085 	beq.w	8010650 <__ieee754_logf+0x198>
 8010546:	ee07 2a90 	vmov	s15, r2
 801054a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801066c <__ieee754_logf+0x1b4>
 801054e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010670 <__ieee754_logf+0x1b8>
 8010552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010556:	ee27 0a80 	vmul.f32	s0, s15, s0
 801055a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801055e:	4770      	bx	lr
 8010560:	eddf 6a44 	vldr	s13, [pc, #272]	; 8010674 <__ieee754_logf+0x1bc>
 8010564:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010568:	eee0 7a66 	vfms.f32	s15, s0, s13
 801056c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010574:	b912      	cbnz	r2, 801057c <__ieee754_logf+0xc4>
 8010576:	ee30 0a47 	vsub.f32	s0, s0, s14
 801057a:	4770      	bx	lr
 801057c:	ee07 2a90 	vmov	s15, r2
 8010580:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801066c <__ieee754_logf+0x1b4>
 8010584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010588:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801058c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010590:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8010670 <__ieee754_logf+0x1b8>
 8010594:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8010598:	4770      	bx	lr
 801059a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801059e:	ee70 7a27 	vadd.f32	s15, s0, s15
 80105a2:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010678 <__ieee754_logf+0x1c0>
 80105a6:	eddf 4a35 	vldr	s9, [pc, #212]	; 801067c <__ieee754_logf+0x1c4>
 80105aa:	4935      	ldr	r1, [pc, #212]	; (8010680 <__ieee754_logf+0x1c8>)
 80105ac:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80105b0:	4419      	add	r1, r3
 80105b2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80105b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80105ba:	430b      	orrs	r3, r1
 80105bc:	2b00      	cmp	r3, #0
 80105be:	ee07 2a90 	vmov	s15, r2
 80105c2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80105c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80105ca:	ee25 7a05 	vmul.f32	s14, s10, s10
 80105ce:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8010684 <__ieee754_logf+0x1cc>
 80105d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80105d6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8010688 <__ieee754_logf+0x1d0>
 80105da:	eee7 5a87 	vfma.f32	s11, s15, s14
 80105de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801068c <__ieee754_logf+0x1d4>
 80105e2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80105e6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8010690 <__ieee754_logf+0x1d8>
 80105ea:	eee7 4a87 	vfma.f32	s9, s15, s14
 80105ee:	eddf 7a29 	vldr	s15, [pc, #164]	; 8010694 <__ieee754_logf+0x1dc>
 80105f2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80105f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80105fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 80105fe:	dd1c      	ble.n	801063a <__ieee754_logf+0x182>
 8010600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010604:	ee20 7a07 	vmul.f32	s14, s0, s14
 8010608:	ee27 7a00 	vmul.f32	s14, s14, s0
 801060c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010610:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010614:	b922      	cbnz	r2, 8010620 <__ieee754_logf+0x168>
 8010616:	ee77 7a67 	vsub.f32	s15, s14, s15
 801061a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801061e:	4770      	bx	lr
 8010620:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801066c <__ieee754_logf+0x1b4>
 8010624:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010628:	ee77 7a67 	vsub.f32	s15, s14, s15
 801062c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010630:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010670 <__ieee754_logf+0x1b8>
 8010634:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8010638:	4770      	bx	lr
 801063a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801063e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010642:	2a00      	cmp	r2, #0
 8010644:	d0e9      	beq.n	801061a <__ieee754_logf+0x162>
 8010646:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801066c <__ieee754_logf+0x1b4>
 801064a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801064e:	e7ed      	b.n	801062c <__ieee754_logf+0x174>
 8010650:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801065c <__ieee754_logf+0x1a4>
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	cc000000 	.word	0xcc000000
 801065c:	00000000 	.word	0x00000000
 8010660:	4c000000 	.word	0x4c000000
 8010664:	004afb20 	.word	0x004afb20
 8010668:	007ffff0 	.word	0x007ffff0
 801066c:	3717f7d1 	.word	0x3717f7d1
 8010670:	3f317180 	.word	0x3f317180
 8010674:	3eaaaaab 	.word	0x3eaaaaab
 8010678:	3e1cd04f 	.word	0x3e1cd04f
 801067c:	3e178897 	.word	0x3e178897
 8010680:	ffcf5c30 	.word	0xffcf5c30
 8010684:	3e638e29 	.word	0x3e638e29
 8010688:	3ecccccd 	.word	0x3ecccccd
 801068c:	3e3a3325 	.word	0x3e3a3325
 8010690:	3e924925 	.word	0x3e924925
 8010694:	3f2aaaab 	.word	0x3f2aaaab

08010698 <with_errnof>:
 8010698:	b513      	push	{r0, r1, r4, lr}
 801069a:	4604      	mov	r4, r0
 801069c:	ed8d 0a01 	vstr	s0, [sp, #4]
 80106a0:	f7fb f8da 	bl	800b858 <__errno>
 80106a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80106a8:	6004      	str	r4, [r0, #0]
 80106aa:	b002      	add	sp, #8
 80106ac:	bd10      	pop	{r4, pc}

080106ae <xflowf>:
 80106ae:	b130      	cbz	r0, 80106be <xflowf+0x10>
 80106b0:	eef1 7a40 	vneg.f32	s15, s0
 80106b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80106b8:	2022      	movs	r0, #34	; 0x22
 80106ba:	f7ff bfed 	b.w	8010698 <with_errnof>
 80106be:	eef0 7a40 	vmov.f32	s15, s0
 80106c2:	e7f7      	b.n	80106b4 <xflowf+0x6>

080106c4 <__math_uflowf>:
 80106c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106cc <__math_uflowf+0x8>
 80106c8:	f7ff bff1 	b.w	80106ae <xflowf>
 80106cc:	10000000 	.word	0x10000000

080106d0 <__math_oflowf>:
 80106d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80106d8 <__math_oflowf+0x8>
 80106d4:	f7ff bfeb 	b.w	80106ae <xflowf>
 80106d8:	70000000 	.word	0x70000000

080106dc <expm1f>:
 80106dc:	ee10 2a10 	vmov	r2, s0
 80106e0:	497d      	ldr	r1, [pc, #500]	; (80108d8 <expm1f+0x1fc>)
 80106e2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80106e6:	428b      	cmp	r3, r1
 80106e8:	d921      	bls.n	801072e <expm1f+0x52>
 80106ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80106ee:	d902      	bls.n	80106f6 <expm1f+0x1a>
 80106f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80106f4:	4770      	bx	lr
 80106f6:	d106      	bne.n	8010706 <expm1f+0x2a>
 80106f8:	2a00      	cmp	r2, #0
 80106fa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80106fe:	bfb8      	it	lt
 8010700:	eeb0 0a67 	vmovlt.f32	s0, s15
 8010704:	4770      	bx	lr
 8010706:	2a00      	cmp	r2, #0
 8010708:	db05      	blt.n	8010716 <expm1f+0x3a>
 801070a:	4974      	ldr	r1, [pc, #464]	; (80108dc <expm1f+0x200>)
 801070c:	428b      	cmp	r3, r1
 801070e:	d95c      	bls.n	80107ca <expm1f+0xee>
 8010710:	2000      	movs	r0, #0
 8010712:	f7ff bfdd 	b.w	80106d0 <__math_oflowf>
 8010716:	eddf 7a72 	vldr	s15, [pc, #456]	; 80108e0 <expm1f+0x204>
 801071a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801071e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010726:	d550      	bpl.n	80107ca <expm1f+0xee>
 8010728:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801072c:	4770      	bx	lr
 801072e:	496d      	ldr	r1, [pc, #436]	; (80108e4 <expm1f+0x208>)
 8010730:	428b      	cmp	r3, r1
 8010732:	d967      	bls.n	8010804 <expm1f+0x128>
 8010734:	496c      	ldr	r1, [pc, #432]	; (80108e8 <expm1f+0x20c>)
 8010736:	428b      	cmp	r3, r1
 8010738:	d847      	bhi.n	80107ca <expm1f+0xee>
 801073a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80108ec <expm1f+0x210>
 801073e:	2a00      	cmp	r2, #0
 8010740:	bfa7      	ittee	ge
 8010742:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8010746:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 80108f0 <expm1f+0x214>
 801074a:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 80108f4 <expm1f+0x218>
 801074e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8010752:	bfac      	ite	ge
 8010754:	2301      	movge	r3, #1
 8010756:	f04f 33ff 	movlt.w	r3, #4294967295
 801075a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801075e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8010762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010766:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801076a:	ee20 4a25 	vmul.f32	s8, s0, s11
 801076e:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80108f8 <expm1f+0x21c>
 8010772:	eddf 6a62 	vldr	s13, [pc, #392]	; 80108fc <expm1f+0x220>
 8010776:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8010900 <expm1f+0x224>
 801077a:	ee20 7a04 	vmul.f32	s14, s0, s8
 801077e:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8010782:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010786:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8010904 <expm1f+0x228>
 801078a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801078e:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010908 <expm1f+0x22c>
 8010792:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010796:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801079a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801079e:	eef0 6a46 	vmov.f32	s13, s12
 80107a2:	eee5 6a07 	vfma.f32	s13, s10, s14
 80107a6:	eee4 4a66 	vfms.f32	s9, s8, s13
 80107aa:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80107ae:	eea0 4a64 	vfms.f32	s8, s0, s9
 80107b2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80107b6:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80107ba:	ee66 6a87 	vmul.f32	s13, s13, s14
 80107be:	bb7b      	cbnz	r3, 8010820 <expm1f+0x144>
 80107c0:	eef0 7a47 	vmov.f32	s15, s14
 80107c4:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80107c8:	e025      	b.n	8010816 <expm1f+0x13a>
 80107ca:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80107d4:	bfb8      	it	lt
 80107d6:	eef0 7a47 	vmovlt.f32	s15, s14
 80107da:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801090c <expm1f+0x230>
 80107de:	eddf 6a43 	vldr	s13, [pc, #268]	; 80108ec <expm1f+0x210>
 80107e2:	ee40 7a07 	vmla.f32	s15, s0, s14
 80107e6:	eeb0 7a40 	vmov.f32	s14, s0
 80107ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107ee:	ee17 3a90 	vmov	r3, s15
 80107f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107f6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80107fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80108f0 <expm1f+0x214>
 80107fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010802:	e7aa      	b.n	801075a <expm1f+0x7e>
 8010804:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8010808:	d208      	bcs.n	801081c <expm1f+0x140>
 801080a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8010910 <expm1f+0x234>
 801080e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010812:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8010816:	ee30 0a67 	vsub.f32	s0, s0, s15
 801081a:	4770      	bx	lr
 801081c:	2300      	movs	r3, #0
 801081e:	e7a2      	b.n	8010766 <expm1f+0x8a>
 8010820:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010824:	1c5a      	adds	r2, r3, #1
 8010826:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801082a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801082e:	d106      	bne.n	801083e <expm1f+0x162>
 8010830:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010834:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8010838:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801083c:	4770      	bx	lr
 801083e:	2b01      	cmp	r3, #1
 8010840:	d118      	bne.n	8010874 <expm1f+0x198>
 8010842:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8010846:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084e:	bf5b      	ittet	pl
 8010850:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8010854:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8010858:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801085c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8010860:	bf43      	ittte	mi
 8010862:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8010866:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801086a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801086e:	eeb0 0a46 	vmovpl.f32	s0, s12
 8010872:	4770      	bx	lr
 8010874:	1c5a      	adds	r2, r3, #1
 8010876:	2a39      	cmp	r2, #57	; 0x39
 8010878:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801087c:	d90b      	bls.n	8010896 <expm1f+0x1ba>
 801087e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010882:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010886:	ee10 3a10 	vmov	r3, s0
 801088a:	440b      	add	r3, r1
 801088c:	ee00 3a10 	vmov	s0, r3
 8010890:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010894:	4770      	bx	lr
 8010896:	2b16      	cmp	r3, #22
 8010898:	dc11      	bgt.n	80108be <expm1f+0x1e2>
 801089a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801089e:	fa42 f303 	asr.w	r3, r2, r3
 80108a2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80108a6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80108aa:	ee07 3a90 	vmov	s15, r3
 80108ae:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80108b2:	ee10 3a10 	vmov	r3, s0
 80108b6:	440b      	add	r3, r1
 80108b8:	ee00 3a10 	vmov	s0, r3
 80108bc:	4770      	bx	lr
 80108be:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80108c2:	05db      	lsls	r3, r3, #23
 80108c4:	ee07 3a10 	vmov	s14, r3
 80108c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80108d0:	ee37 0a86 	vadd.f32	s0, s15, s12
 80108d4:	e7ed      	b.n	80108b2 <expm1f+0x1d6>
 80108d6:	bf00      	nop
 80108d8:	4195b843 	.word	0x4195b843
 80108dc:	42b17217 	.word	0x42b17217
 80108e0:	0da24260 	.word	0x0da24260
 80108e4:	3eb17218 	.word	0x3eb17218
 80108e8:	3f851591 	.word	0x3f851591
 80108ec:	3f317180 	.word	0x3f317180
 80108f0:	3717f7d1 	.word	0x3717f7d1
 80108f4:	b717f7d1 	.word	0xb717f7d1
 80108f8:	b457edbb 	.word	0xb457edbb
 80108fc:	36867e54 	.word	0x36867e54
 8010900:	bd088889 	.word	0xbd088889
 8010904:	b8a670cd 	.word	0xb8a670cd
 8010908:	3ad00d01 	.word	0x3ad00d01
 801090c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010910:	7149f2ca 	.word	0x7149f2ca

08010914 <fabsf>:
 8010914:	ee10 3a10 	vmov	r3, s0
 8010918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801091c:	ee00 3a10 	vmov	s0, r3
 8010920:	4770      	bx	lr

08010922 <finitef>:
 8010922:	b082      	sub	sp, #8
 8010924:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010928:	9801      	ldr	r0, [sp, #4]
 801092a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801092e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010932:	bfac      	ite	ge
 8010934:	2000      	movge	r0, #0
 8010936:	2001      	movlt	r0, #1
 8010938:	b002      	add	sp, #8
 801093a:	4770      	bx	lr

0801093c <_init>:
 801093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801093e:	bf00      	nop
 8010940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010942:	bc08      	pop	{r3}
 8010944:	469e      	mov	lr, r3
 8010946:	4770      	bx	lr

08010948 <_fini>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	bf00      	nop
 801094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094e:	bc08      	pop	{r3}
 8010950:	469e      	mov	lr, r3
 8010952:	4770      	bx	lr
